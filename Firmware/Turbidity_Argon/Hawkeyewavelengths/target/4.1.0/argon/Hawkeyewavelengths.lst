
c:/Users/Russe/OneDrive/Desktop/Coastlab/Hawkeyewavelengths/target/4.1.0/argon/Hawkeyewavelengths.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000038e0  000b4020  000b4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000b7900  000b7900  00007900  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000b7924  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000006c  2003e618  000b7928  0001e618  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000016c  2003e684  2003e684  0002e684  2**2
                  ALLOC
  7 .module_info_suffix 00000028  000b7994  000b7994  00027994  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000b79bc  000b79bc  000279bc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   00125364  00000000  00000000  000279c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 000133d1  00000000  00000000  0014cd24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    00034f21  00000000  00000000  001600f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002b18  00000000  00000000  00195016  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00009880  00000000  00000000  00197b2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003d612  00000000  00000000  001a13ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00041d1e  00000000  00000000  001de9c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00133e98  00000000  00000000  002206de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  000079c8  00000000  00000000  00354578  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4020:	4809      	ldr	r0, [pc, #36]	; (b4048 <module_user_pre_init+0x28>)
   b4022:	490a      	ldr	r1, [pc, #40]	; (b404c <module_user_pre_init+0x2c>)
   b4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4028:	d005      	beq.n	b4036 <module_user_pre_init+0x16>
   b402a:	4a09      	ldr	r2, [pc, #36]	; (b4050 <module_user_pre_init+0x30>)
   b402c:	4282      	cmp	r2, r0
   b402e:	d002      	beq.n	b4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b4030:	1a12      	subs	r2, r2, r0
   b4032:	f003 f9f9 	bl	b7428 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4036:	4807      	ldr	r0, [pc, #28]	; (b4054 <module_user_pre_init+0x34>)
   b4038:	4a07      	ldr	r2, [pc, #28]	; (b4058 <module_user_pre_init+0x38>)
   b403a:	2100      	movs	r1, #0
   b403c:	1a12      	subs	r2, r2, r0
   b403e:	f003 fa01 	bl	b7444 <memset>
    return &link_global_data_start;
}
   b4042:	4801      	ldr	r0, [pc, #4]	; (b4048 <module_user_pre_init+0x28>)
   b4044:	bd08      	pop	{r3, pc}
   b4046:	bf00      	nop
   b4048:	2003e618 	.word	0x2003e618
   b404c:	000b7928 	.word	0x000b7928
   b4050:	2003e684 	.word	0x2003e684
   b4054:	2003e684 	.word	0x2003e684
   b4058:	2003e7ed 	.word	0x2003e7ed

000b405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405e:	4e07      	ldr	r6, [pc, #28]	; (b407c <module_user_init+0x20>)
   b4060:	4c07      	ldr	r4, [pc, #28]	; (b4080 <module_user_init+0x24>)
    module_user_init_hook();
   b4062:	f002 f903 	bl	b626c <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4066:	1ba4      	subs	r4, r4, r6
   b4068:	08a4      	lsrs	r4, r4, #2
   b406a:	2500      	movs	r5, #0
   b406c:	42ac      	cmp	r4, r5
   b406e:	d100      	bne.n	b4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b4072:	f856 3b04 	ldr.w	r3, [r6], #4
   b4076:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4078:	3501      	adds	r5, #1
   b407a:	e7f7      	b.n	b406c <module_user_init+0x10>
   b407c:	000b78d0 	.word	0x000b78d0
   b4080:	000b78f4 	.word	0x000b78f4

000b4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4084:	f000 b816 	b.w	b40b4 <setup>

000b4088 <module_user_loop>:
}

void module_user_loop() {
   b4088:	b508      	push	{r3, lr}
    loop();
   b408a:	f000 f849 	bl	b4120 <loop>
    _post_loop();
}
   b408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b4092:	f002 b8a3 	b.w	b61dc <_post_loop>

000b4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4096:	f001 bd49 	b.w	b5b2c <malloc>

000b409a <_Znaj>:
   b409a:	f001 bd47 	b.w	b5b2c <malloc>

000b409e <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b409e:	f001 bd4d 	b.w	b5b3c <free>

000b40a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b40a2:	7800      	ldrb	r0, [r0, #0]
   b40a4:	fab0 f080 	clz	r0, r0
   b40a8:	0940      	lsrs	r0, r0, #5
   b40aa:	4770      	bx	lr

000b40ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40ac:	2301      	movs	r3, #1
   b40ae:	7003      	strb	r3, [r0, #0]
   b40b0:	4770      	bx	lr
	...

000b40b4 <setup>:
Adafruit_AS7341 as7341;

SYSTEM_THREAD(ENABLED);
SYSTEM_MODE(SEMI_AUTOMATIC);

void setup() {
   b40b4:	b508      	push	{r3, lr}
  Serial.begin(115200);
   b40b6:	f002 f9e7 	bl	b6488 <_Z16_fetch_usbserialv>
   b40ba:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
   b40be:	f002 f9d1 	bl	b6464 <_ZN9USBSerial5beginEl>

  // Wait for communication with the host computer serial monitor
  while (!Serial) {
   b40c2:	f002 f9e1 	bl	b6488 <_Z16_fetch_usbserialv>
   b40c6:	f002 f9d4 	bl	b6472 <_ZN9USBSerialcvbEv>
   b40ca:	b918      	cbnz	r0, b40d4 <setup+0x20>
    delay(1);
   b40cc:	2001      	movs	r0, #1
   b40ce:	f002 f837 	bl	b6140 <delay>
  while (!Serial) {
   b40d2:	e7f6      	b.n	b40c2 <setup+0xe>
  }
  
  if (!as7341.begin()){
   b40d4:	f002 fc76 	bl	b69c4 <_Z19__fetch_global_Wirev>
   b40d8:	2300      	movs	r3, #0
   b40da:	4602      	mov	r2, r0
   b40dc:	2139      	movs	r1, #57	; 0x39
   b40de:	480e      	ldr	r0, [pc, #56]	; (b4118 <setup+0x64>)
   b40e0:	f001 f830 	bl	b5144 <_ZN15Adafruit_AS73415beginEhP7TwoWirel>
   b40e4:	b940      	cbnz	r0, b40f8 <setup+0x44>
    Serial.println("Could not find AS7341");
   b40e6:	f002 f9cf 	bl	b6488 <_Z16_fetch_usbserialv>
   b40ea:	490c      	ldr	r1, [pc, #48]	; (b411c <setup+0x68>)
   b40ec:	f001 ff0b 	bl	b5f06 <_ZN5Print7printlnEPKc>
    while (1) { delay(10); }
   b40f0:	200a      	movs	r0, #10
   b40f2:	f002 f825 	bl	b6140 <delay>
   b40f6:	e7fb      	b.n	b40f0 <setup+0x3c>
  }
  
  as7341.setATIME(59);
   b40f8:	213b      	movs	r1, #59	; 0x3b
   b40fa:	4807      	ldr	r0, [pc, #28]	; (b4118 <setup+0x64>)
   b40fc:	f001 f8fa 	bl	b52f4 <_ZN15Adafruit_AS73418setATIMEEh>
  as7341.setASTEP(599);
   b4100:	f240 2157 	movw	r1, #599	; 0x257
   b4104:	4804      	ldr	r0, [pc, #16]	; (b4118 <setup+0x64>)
   b4106:	f001 f91a 	bl	b533e <_ZN15Adafruit_AS73418setASTEPEt>
  as7341.setGain(AS7341_GAIN_4X);
}
   b410a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  as7341.setGain(AS7341_GAIN_4X);
   b410e:	4802      	ldr	r0, [pc, #8]	; (b4118 <setup+0x64>)
   b4110:	2103      	movs	r1, #3
   b4112:	f001 b93b 	b.w	b538c <_ZN15Adafruit_AS73417setGainE13as7341_gain_t>
   b4116:	bf00      	nop
   b4118:	2003e690 	.word	0x2003e690
   b411c:	000b75a0 	.word	0x000b75a0

000b4120 <loop>:

void loop() {
   b4120:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b4124:	b09d      	sub	sp, #116	; 0x74
  // put your main code here, to run repeatedly:
  
uint16_t readings[12];
  float counts[12];

  if (!as7341.readAllChannels(readings)){
   b4126:	4806      	ldr	r0, [pc, #24]	; (b4140 <loop+0x20>)
   b4128:	a904      	add	r1, sp, #16
   b412a:	f001 fa9a 	bl	b5662 <_ZN15Adafruit_AS734115readAllChannelsEPt>
   b412e:	b958      	cbnz	r0, b4148 <loop+0x28>
    Serial.println("Error reading all channels!");
   b4130:	f002 f9aa 	bl	b6488 <_Z16_fetch_usbserialv>
   b4134:	4903      	ldr	r1, [pc, #12]	; (b4144 <loop+0x24>)
   b4136:	f001 fee6 	bl	b5f06 <_ZN5Print7printlnEPKc>
      .duration(60s);
SystemSleepResult result = System.sleep(config);


 
   b413a:	b01d      	add	sp, #116	; 0x74
   b413c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b4140:	2003e690 	.word	0x2003e690
   b4144:	000b75b6 	.word	0x000b75b6
  RGB.control(true);
   b4148:	2001      	movs	r0, #1
   b414a:	f001 fffc 	bl	b6146 <_ZN8RGBClass7controlEb>
  RGB.color(123,0,226);
   b414e:	22e2      	movs	r2, #226	; 0xe2
   b4150:	2100      	movs	r1, #0
   b4152:	207b      	movs	r0, #123	; 0x7b
   b4154:	f002 f807 	bl	b6166 <_ZN8RGBClass5colorEiii>

#ifdef __cplusplus
}
#endif

static inline void delay(std::chrono::milliseconds ms) { ::delay(ms.count()); }
   b4158:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   b415c:	f001 fff0 	bl	b6140 <delay>
    for(uint8_t i = 0; i < 12; i++) {
   b4160:	af04      	add	r7, sp, #16
   b4162:	ad10      	add	r5, sp, #64	; 0x40
    counts[i] = as7341.toBasicCounts(readings[i]);
   b4164:	f8df 93f0 	ldr.w	r9, [pc, #1008]	; b4558 <loop+0x438>
   b4168:	462e      	mov	r6, r5
   b416a:	46b8      	mov	r8, r7
   b416c:	24fc      	movs	r4, #252	; 0xfc
    if(i == 4 || i == 5) continue;
   b416e:	2c01      	cmp	r4, #1
   b4170:	d906      	bls.n	b4180 <loop+0x60>
    counts[i] = as7341.toBasicCounts(readings[i]);
   b4172:	f8b8 1000 	ldrh.w	r1, [r8]
   b4176:	4648      	mov	r0, r9
   b4178:	f001 f92e 	bl	b53d8 <_ZN15Adafruit_AS734113toBasicCountsEt>
   b417c:	ed86 0a00 	vstr	s0, [r6]
    for(uint8_t i = 0; i < 12; i++) {
   b4180:	3401      	adds	r4, #1
   b4182:	b2e4      	uxtb	r4, r4
   b4184:	2c08      	cmp	r4, #8
   b4186:	f108 0802 	add.w	r8, r8, #2
   b418a:	f106 0604 	add.w	r6, r6, #4
   b418e:	d1ee      	bne.n	b416e <loop+0x4e>
  Serial.print("F1 415nm : ");
   b4190:	f002 f97a 	bl	b6488 <_Z16_fetch_usbserialv>
   b4194:	49e6      	ldr	r1, [pc, #920]	; (b4530 <loop+0x410>)
    counts[i] = as7341.toBasicCounts(readings[i]);
   b4196:	f8df 93c0 	ldr.w	r9, [pc, #960]	; b4558 <loop+0x438>
  Serial.print("F1 415nm : ");
   b419a:	f001 fea1 	bl	b5ee0 <_ZN5Print5printEPKc>
  Serial.println(counts[0]);
   b419e:	f002 f973 	bl	b6488 <_Z16_fetch_usbserialv>
   b41a2:	ed9d 0a10 	vldr	s0, [sp, #64]	; 0x40
   b41a6:	2102      	movs	r1, #2
   b41a8:	f001 ffa9 	bl	b60fe <_ZN5Print7printlnEfi>
  Serial.print("F2 445nm : ");
   b41ac:	f002 f96c 	bl	b6488 <_Z16_fetch_usbserialv>
   b41b0:	49e0      	ldr	r1, [pc, #896]	; (b4534 <loop+0x414>)
   b41b2:	f001 fe95 	bl	b5ee0 <_ZN5Print5printEPKc>
  Serial.println(counts[1]);
   b41b6:	f002 f967 	bl	b6488 <_Z16_fetch_usbserialv>
   b41ba:	ed9d 0a11 	vldr	s0, [sp, #68]	; 0x44
   b41be:	2102      	movs	r1, #2
   b41c0:	f001 ff9d 	bl	b60fe <_ZN5Print7printlnEfi>
  Serial.print("F3 480nm : ");
   b41c4:	f002 f960 	bl	b6488 <_Z16_fetch_usbserialv>
   b41c8:	49db      	ldr	r1, [pc, #876]	; (b4538 <loop+0x418>)
   b41ca:	f001 fe89 	bl	b5ee0 <_ZN5Print5printEPKc>
  Serial.println(counts[2]);
   b41ce:	f002 f95b 	bl	b6488 <_Z16_fetch_usbserialv>
   b41d2:	ed9d 0a12 	vldr	s0, [sp, #72]	; 0x48
   b41d6:	2102      	movs	r1, #2
   b41d8:	f001 ff91 	bl	b60fe <_ZN5Print7printlnEfi>
  Serial.print("F4 515nm : ");
   b41dc:	f002 f954 	bl	b6488 <_Z16_fetch_usbserialv>
   b41e0:	49d6      	ldr	r1, [pc, #856]	; (b453c <loop+0x41c>)
   b41e2:	f001 fe7d 	bl	b5ee0 <_ZN5Print5printEPKc>
  Serial.println(counts[3]);
   b41e6:	f002 f94f 	bl	b6488 <_Z16_fetch_usbserialv>
   b41ea:	ed9d 0a13 	vldr	s0, [sp, #76]	; 0x4c
   b41ee:	2102      	movs	r1, #2
   b41f0:	f001 ff85 	bl	b60fe <_ZN5Print7printlnEfi>
  Serial.print("F5 555nm : ");
   b41f4:	f002 f948 	bl	b6488 <_Z16_fetch_usbserialv>
   b41f8:	49d1      	ldr	r1, [pc, #836]	; (b4540 <loop+0x420>)
   b41fa:	f001 fe71 	bl	b5ee0 <_ZN5Print5printEPKc>
  Serial.println(counts[6]);
   b41fe:	f002 f943 	bl	b6488 <_Z16_fetch_usbserialv>
   b4202:	ed9d 0a16 	vldr	s0, [sp, #88]	; 0x58
   b4206:	2102      	movs	r1, #2
   b4208:	f001 ff79 	bl	b60fe <_ZN5Print7printlnEfi>
  Serial.print("F6 590nm : ");
   b420c:	f002 f93c 	bl	b6488 <_Z16_fetch_usbserialv>
   b4210:	49cc      	ldr	r1, [pc, #816]	; (b4544 <loop+0x424>)
   b4212:	f001 fe65 	bl	b5ee0 <_ZN5Print5printEPKc>
  Serial.println(counts[7]);
   b4216:	f002 f937 	bl	b6488 <_Z16_fetch_usbserialv>
   b421a:	ed9d 0a17 	vldr	s0, [sp, #92]	; 0x5c
   b421e:	2102      	movs	r1, #2
   b4220:	f001 ff6d 	bl	b60fe <_ZN5Print7printlnEfi>
  Serial.print("F7 630nm : ");
   b4224:	f002 f930 	bl	b6488 <_Z16_fetch_usbserialv>
   b4228:	49c7      	ldr	r1, [pc, #796]	; (b4548 <loop+0x428>)
   b422a:	f001 fe59 	bl	b5ee0 <_ZN5Print5printEPKc>
  Serial.println(counts[8]);
   b422e:	f002 f92b 	bl	b6488 <_Z16_fetch_usbserialv>
   b4232:	ed9d 0a18 	vldr	s0, [sp, #96]	; 0x60
   b4236:	2102      	movs	r1, #2
   b4238:	f001 ff61 	bl	b60fe <_ZN5Print7printlnEfi>
  Serial.print("F8 680nm : ");
   b423c:	f002 f924 	bl	b6488 <_Z16_fetch_usbserialv>
   b4240:	49c2      	ldr	r1, [pc, #776]	; (b454c <loop+0x42c>)
   b4242:	f001 fe4d 	bl	b5ee0 <_ZN5Print5printEPKc>
  Serial.println(counts[9]);
   b4246:	f002 f91f 	bl	b6488 <_Z16_fetch_usbserialv>
   b424a:	ed9d 0a19 	vldr	s0, [sp, #100]	; 0x64
   b424e:	2102      	movs	r1, #2
   b4250:	f001 ff55 	bl	b60fe <_ZN5Print7printlnEfi>
  Serial.print("Clear    : ");
   b4254:	f002 f918 	bl	b6488 <_Z16_fetch_usbserialv>
   b4258:	49bd      	ldr	r1, [pc, #756]	; (b4550 <loop+0x430>)
   b425a:	f001 fe41 	bl	b5ee0 <_ZN5Print5printEPKc>
  Serial.println(counts[10]);
   b425e:	f002 f913 	bl	b6488 <_Z16_fetch_usbserialv>
   b4262:	ed9d 0a1a 	vldr	s0, [sp, #104]	; 0x68
   b4266:	2102      	movs	r1, #2
   b4268:	f001 ff49 	bl	b60fe <_ZN5Print7printlnEfi>
  Serial.print("NIR      : ");
   b426c:	f002 f90c 	bl	b6488 <_Z16_fetch_usbserialv>
   b4270:	49b8      	ldr	r1, [pc, #736]	; (b4554 <loop+0x434>)
   b4272:	f001 fe35 	bl	b5ee0 <_ZN5Print5printEPKc>
  Serial.println(counts[11]);
   b4276:	f002 f907 	bl	b6488 <_Z16_fetch_usbserialv>
   b427a:	ed9d 0a1b 	vldr	s0, [sp, #108]	; 0x6c
   b427e:	2102      	movs	r1, #2
   b4280:	f001 ff3d 	bl	b60fe <_ZN5Print7printlnEfi>
  Serial.println();
   b4284:	f002 f900 	bl	b6488 <_Z16_fetch_usbserialv>
   b4288:	f001 fe31 	bl	b5eee <_ZN5Print7printlnEv>
   b428c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   b4290:	f001 ff56 	bl	b6140 <delay>
  RGB.color(0,27,255);
   b4294:	22ff      	movs	r2, #255	; 0xff
   b4296:	211b      	movs	r1, #27
   b4298:	2000      	movs	r0, #0
   b429a:	f001 ff64 	bl	b6166 <_ZN8RGBClass5colorEiii>
   b429e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   b42a2:	f001 ff4d 	bl	b6140 <delay>
   b42a6:	462e      	mov	r6, r5
   b42a8:	f10d 0810 	add.w	r8, sp, #16
   b42ac:	24fc      	movs	r4, #252	; 0xfc
    if(i == 4 || i == 5) continue;
   b42ae:	2c01      	cmp	r4, #1
   b42b0:	d906      	bls.n	b42c0 <loop+0x1a0>
    counts[i] = as7341.toBasicCounts(readings[i]);
   b42b2:	f8b8 1000 	ldrh.w	r1, [r8]
   b42b6:	4648      	mov	r0, r9
   b42b8:	f001 f88e 	bl	b53d8 <_ZN15Adafruit_AS734113toBasicCountsEt>
   b42bc:	ed86 0a00 	vstr	s0, [r6]
    for(uint8_t i = 0; i < 12; i++) {
   b42c0:	3401      	adds	r4, #1
   b42c2:	b2e4      	uxtb	r4, r4
   b42c4:	2c08      	cmp	r4, #8
   b42c6:	f108 0802 	add.w	r8, r8, #2
   b42ca:	f106 0604 	add.w	r6, r6, #4
   b42ce:	d1ee      	bne.n	b42ae <loop+0x18e>
  Serial.print("F1 415nm : ");
   b42d0:	f002 f8da 	bl	b6488 <_Z16_fetch_usbserialv>
   b42d4:	4996      	ldr	r1, [pc, #600]	; (b4530 <loop+0x410>)
    counts[i] = as7341.toBasicCounts(readings[i]);
   b42d6:	f8df 9280 	ldr.w	r9, [pc, #640]	; b4558 <loop+0x438>
  Serial.print("F1 415nm : ");
   b42da:	f001 fe01 	bl	b5ee0 <_ZN5Print5printEPKc>
  Serial.println(counts[0]);
   b42de:	f002 f8d3 	bl	b6488 <_Z16_fetch_usbserialv>
   b42e2:	ed9d 0a10 	vldr	s0, [sp, #64]	; 0x40
   b42e6:	2102      	movs	r1, #2
   b42e8:	f001 ff09 	bl	b60fe <_ZN5Print7printlnEfi>
  Serial.print("F2 445nm : ");
   b42ec:	f002 f8cc 	bl	b6488 <_Z16_fetch_usbserialv>
   b42f0:	4990      	ldr	r1, [pc, #576]	; (b4534 <loop+0x414>)
   b42f2:	f001 fdf5 	bl	b5ee0 <_ZN5Print5printEPKc>
  Serial.println(counts[1]);
   b42f6:	f002 f8c7 	bl	b6488 <_Z16_fetch_usbserialv>
   b42fa:	ed9d 0a11 	vldr	s0, [sp, #68]	; 0x44
   b42fe:	2102      	movs	r1, #2
   b4300:	f001 fefd 	bl	b60fe <_ZN5Print7printlnEfi>
  Serial.print("F3 480nm : ");
   b4304:	f002 f8c0 	bl	b6488 <_Z16_fetch_usbserialv>
   b4308:	498b      	ldr	r1, [pc, #556]	; (b4538 <loop+0x418>)
   b430a:	f001 fde9 	bl	b5ee0 <_ZN5Print5printEPKc>
  Serial.println(counts[2]);
   b430e:	f002 f8bb 	bl	b6488 <_Z16_fetch_usbserialv>
   b4312:	ed9d 0a12 	vldr	s0, [sp, #72]	; 0x48
   b4316:	2102      	movs	r1, #2
   b4318:	f001 fef1 	bl	b60fe <_ZN5Print7printlnEfi>
  Serial.print("F4 515nm : ");
   b431c:	f002 f8b4 	bl	b6488 <_Z16_fetch_usbserialv>
   b4320:	4986      	ldr	r1, [pc, #536]	; (b453c <loop+0x41c>)
   b4322:	f001 fddd 	bl	b5ee0 <_ZN5Print5printEPKc>
  Serial.println(counts[3]);
   b4326:	f002 f8af 	bl	b6488 <_Z16_fetch_usbserialv>
   b432a:	ed9d 0a13 	vldr	s0, [sp, #76]	; 0x4c
   b432e:	2102      	movs	r1, #2
   b4330:	f001 fee5 	bl	b60fe <_ZN5Print7printlnEfi>
  Serial.print("F5 555nm : ");
   b4334:	f002 f8a8 	bl	b6488 <_Z16_fetch_usbserialv>
   b4338:	4981      	ldr	r1, [pc, #516]	; (b4540 <loop+0x420>)
   b433a:	f001 fdd1 	bl	b5ee0 <_ZN5Print5printEPKc>
  Serial.println(counts[6]);
   b433e:	f002 f8a3 	bl	b6488 <_Z16_fetch_usbserialv>
   b4342:	ed9d 0a16 	vldr	s0, [sp, #88]	; 0x58
   b4346:	2102      	movs	r1, #2
   b4348:	f001 fed9 	bl	b60fe <_ZN5Print7printlnEfi>
  Serial.print("F6 590nm : ");
   b434c:	f002 f89c 	bl	b6488 <_Z16_fetch_usbserialv>
   b4350:	497c      	ldr	r1, [pc, #496]	; (b4544 <loop+0x424>)
   b4352:	f001 fdc5 	bl	b5ee0 <_ZN5Print5printEPKc>
  Serial.println(counts[7]);
   b4356:	f002 f897 	bl	b6488 <_Z16_fetch_usbserialv>
   b435a:	ed9d 0a17 	vldr	s0, [sp, #92]	; 0x5c
   b435e:	2102      	movs	r1, #2
   b4360:	f001 fecd 	bl	b60fe <_ZN5Print7printlnEfi>
  Serial.print("F7 630nm : ");
   b4364:	f002 f890 	bl	b6488 <_Z16_fetch_usbserialv>
   b4368:	4977      	ldr	r1, [pc, #476]	; (b4548 <loop+0x428>)
   b436a:	f001 fdb9 	bl	b5ee0 <_ZN5Print5printEPKc>
  Serial.println(counts[8]);
   b436e:	f002 f88b 	bl	b6488 <_Z16_fetch_usbserialv>
   b4372:	ed9d 0a18 	vldr	s0, [sp, #96]	; 0x60
   b4376:	2102      	movs	r1, #2
   b4378:	f001 fec1 	bl	b60fe <_ZN5Print7printlnEfi>
  Serial.print("F8 680nm : ");
   b437c:	f002 f884 	bl	b6488 <_Z16_fetch_usbserialv>
   b4380:	4972      	ldr	r1, [pc, #456]	; (b454c <loop+0x42c>)
   b4382:	f001 fdad 	bl	b5ee0 <_ZN5Print5printEPKc>
  Serial.println(counts[9]);
   b4386:	f002 f87f 	bl	b6488 <_Z16_fetch_usbserialv>
   b438a:	ed9d 0a19 	vldr	s0, [sp, #100]	; 0x64
   b438e:	2102      	movs	r1, #2
   b4390:	f001 feb5 	bl	b60fe <_ZN5Print7printlnEfi>
  Serial.print("Clear    : ");
   b4394:	f002 f878 	bl	b6488 <_Z16_fetch_usbserialv>
   b4398:	496d      	ldr	r1, [pc, #436]	; (b4550 <loop+0x430>)
   b439a:	f001 fda1 	bl	b5ee0 <_ZN5Print5printEPKc>
  Serial.println(counts[10]);
   b439e:	f002 f873 	bl	b6488 <_Z16_fetch_usbserialv>
   b43a2:	ed9d 0a1a 	vldr	s0, [sp, #104]	; 0x68
   b43a6:	2102      	movs	r1, #2
   b43a8:	f001 fea9 	bl	b60fe <_ZN5Print7printlnEfi>
  Serial.print("NIR      : ");
   b43ac:	f002 f86c 	bl	b6488 <_Z16_fetch_usbserialv>
   b43b0:	4968      	ldr	r1, [pc, #416]	; (b4554 <loop+0x434>)
   b43b2:	f001 fd95 	bl	b5ee0 <_ZN5Print5printEPKc>
  Serial.println(counts[11]);
   b43b6:	f002 f867 	bl	b6488 <_Z16_fetch_usbserialv>
   b43ba:	ed9d 0a1b 	vldr	s0, [sp, #108]	; 0x6c
   b43be:	2102      	movs	r1, #2
   b43c0:	f001 fe9d 	bl	b60fe <_ZN5Print7printlnEfi>
  Serial.println();
   b43c4:	f002 f860 	bl	b6488 <_Z16_fetch_usbserialv>
   b43c8:	f001 fd91 	bl	b5eee <_ZN5Print7printlnEv>
   b43cc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   b43d0:	f001 feb6 	bl	b6140 <delay>
  RGB.color(0,255,255);
   b43d4:	22ff      	movs	r2, #255	; 0xff
   b43d6:	4611      	mov	r1, r2
   b43d8:	2000      	movs	r0, #0
   b43da:	f001 fec4 	bl	b6166 <_ZN8RGBClass5colorEiii>
   b43de:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   b43e2:	f001 fead 	bl	b6140 <delay>
   b43e6:	462e      	mov	r6, r5
   b43e8:	f10d 0810 	add.w	r8, sp, #16
   b43ec:	24fc      	movs	r4, #252	; 0xfc
    if(i == 4 || i == 5) continue;
   b43ee:	2c01      	cmp	r4, #1
   b43f0:	d906      	bls.n	b4400 <loop+0x2e0>
    counts[i] = as7341.toBasicCounts(readings[i]);
   b43f2:	f8b8 1000 	ldrh.w	r1, [r8]
   b43f6:	4648      	mov	r0, r9
   b43f8:	f000 ffee 	bl	b53d8 <_ZN15Adafruit_AS734113toBasicCountsEt>
   b43fc:	ed86 0a00 	vstr	s0, [r6]
    for(uint8_t i = 0; i < 12; i++) {
   b4400:	3401      	adds	r4, #1
   b4402:	b2e4      	uxtb	r4, r4
   b4404:	2c08      	cmp	r4, #8
   b4406:	f108 0802 	add.w	r8, r8, #2
   b440a:	f106 0604 	add.w	r6, r6, #4
   b440e:	d1ee      	bne.n	b43ee <loop+0x2ce>
  Serial.print("F1 415nm : ");
   b4410:	f002 f83a 	bl	b6488 <_Z16_fetch_usbserialv>
   b4414:	4946      	ldr	r1, [pc, #280]	; (b4530 <loop+0x410>)
    counts[i] = as7341.toBasicCounts(readings[i]);
   b4416:	f8df 9140 	ldr.w	r9, [pc, #320]	; b4558 <loop+0x438>
  Serial.print("F1 415nm : ");
   b441a:	f001 fd61 	bl	b5ee0 <_ZN5Print5printEPKc>
  Serial.println(counts[0]);
   b441e:	f002 f833 	bl	b6488 <_Z16_fetch_usbserialv>
   b4422:	ed9d 0a10 	vldr	s0, [sp, #64]	; 0x40
   b4426:	2102      	movs	r1, #2
   b4428:	f001 fe69 	bl	b60fe <_ZN5Print7printlnEfi>
  Serial.print("F2 445nm : ");
   b442c:	f002 f82c 	bl	b6488 <_Z16_fetch_usbserialv>
   b4430:	4940      	ldr	r1, [pc, #256]	; (b4534 <loop+0x414>)
   b4432:	f001 fd55 	bl	b5ee0 <_ZN5Print5printEPKc>
  Serial.println(counts[1]);
   b4436:	f002 f827 	bl	b6488 <_Z16_fetch_usbserialv>
   b443a:	ed9d 0a11 	vldr	s0, [sp, #68]	; 0x44
   b443e:	2102      	movs	r1, #2
   b4440:	f001 fe5d 	bl	b60fe <_ZN5Print7printlnEfi>
  Serial.print("F3 480nm : ");
   b4444:	f002 f820 	bl	b6488 <_Z16_fetch_usbserialv>
   b4448:	493b      	ldr	r1, [pc, #236]	; (b4538 <loop+0x418>)
   b444a:	f001 fd49 	bl	b5ee0 <_ZN5Print5printEPKc>
  Serial.println(counts[2]);
   b444e:	f002 f81b 	bl	b6488 <_Z16_fetch_usbserialv>
   b4452:	ed9d 0a12 	vldr	s0, [sp, #72]	; 0x48
   b4456:	2102      	movs	r1, #2
   b4458:	f001 fe51 	bl	b60fe <_ZN5Print7printlnEfi>
  Serial.print("F4 515nm : ");
   b445c:	f002 f814 	bl	b6488 <_Z16_fetch_usbserialv>
   b4460:	4936      	ldr	r1, [pc, #216]	; (b453c <loop+0x41c>)
   b4462:	f001 fd3d 	bl	b5ee0 <_ZN5Print5printEPKc>
  Serial.println(counts[3]);
   b4466:	f002 f80f 	bl	b6488 <_Z16_fetch_usbserialv>
   b446a:	ed9d 0a13 	vldr	s0, [sp, #76]	; 0x4c
   b446e:	2102      	movs	r1, #2
   b4470:	f001 fe45 	bl	b60fe <_ZN5Print7printlnEfi>
  Serial.print("F5 555nm : ");
   b4474:	f002 f808 	bl	b6488 <_Z16_fetch_usbserialv>
   b4478:	4931      	ldr	r1, [pc, #196]	; (b4540 <loop+0x420>)
   b447a:	f001 fd31 	bl	b5ee0 <_ZN5Print5printEPKc>
  Serial.println(counts[6]);
   b447e:	f002 f803 	bl	b6488 <_Z16_fetch_usbserialv>
   b4482:	ed9d 0a16 	vldr	s0, [sp, #88]	; 0x58
   b4486:	2102      	movs	r1, #2
   b4488:	f001 fe39 	bl	b60fe <_ZN5Print7printlnEfi>
  Serial.print("F6 590nm : ");
   b448c:	f001 fffc 	bl	b6488 <_Z16_fetch_usbserialv>
   b4490:	492c      	ldr	r1, [pc, #176]	; (b4544 <loop+0x424>)
   b4492:	f001 fd25 	bl	b5ee0 <_ZN5Print5printEPKc>
  Serial.println(counts[7]);
   b4496:	f001 fff7 	bl	b6488 <_Z16_fetch_usbserialv>
   b449a:	ed9d 0a17 	vldr	s0, [sp, #92]	; 0x5c
   b449e:	2102      	movs	r1, #2
   b44a0:	f001 fe2d 	bl	b60fe <_ZN5Print7printlnEfi>
  Serial.print("F7 630nm : ");
   b44a4:	f001 fff0 	bl	b6488 <_Z16_fetch_usbserialv>
   b44a8:	4927      	ldr	r1, [pc, #156]	; (b4548 <loop+0x428>)
   b44aa:	f001 fd19 	bl	b5ee0 <_ZN5Print5printEPKc>
  Serial.println(counts[8]);
   b44ae:	f001 ffeb 	bl	b6488 <_Z16_fetch_usbserialv>
   b44b2:	ed9d 0a18 	vldr	s0, [sp, #96]	; 0x60
   b44b6:	2102      	movs	r1, #2
   b44b8:	f001 fe21 	bl	b60fe <_ZN5Print7printlnEfi>
  Serial.print("F8 680nm : ");
   b44bc:	f001 ffe4 	bl	b6488 <_Z16_fetch_usbserialv>
   b44c0:	4922      	ldr	r1, [pc, #136]	; (b454c <loop+0x42c>)
   b44c2:	f001 fd0d 	bl	b5ee0 <_ZN5Print5printEPKc>
  Serial.println(counts[9]);
   b44c6:	f001 ffdf 	bl	b6488 <_Z16_fetch_usbserialv>
   b44ca:	ed9d 0a19 	vldr	s0, [sp, #100]	; 0x64
   b44ce:	2102      	movs	r1, #2
   b44d0:	f001 fe15 	bl	b60fe <_ZN5Print7printlnEfi>
  Serial.print("Clear    : ");
   b44d4:	f001 ffd8 	bl	b6488 <_Z16_fetch_usbserialv>
   b44d8:	491d      	ldr	r1, [pc, #116]	; (b4550 <loop+0x430>)
   b44da:	f001 fd01 	bl	b5ee0 <_ZN5Print5printEPKc>
  Serial.println(counts[10]);
   b44de:	f001 ffd3 	bl	b6488 <_Z16_fetch_usbserialv>
   b44e2:	ed9d 0a1a 	vldr	s0, [sp, #104]	; 0x68
   b44e6:	2102      	movs	r1, #2
   b44e8:	f001 fe09 	bl	b60fe <_ZN5Print7printlnEfi>
  Serial.print("NIR      : ");
   b44ec:	f001 ffcc 	bl	b6488 <_Z16_fetch_usbserialv>
   b44f0:	4918      	ldr	r1, [pc, #96]	; (b4554 <loop+0x434>)
   b44f2:	f001 fcf5 	bl	b5ee0 <_ZN5Print5printEPKc>
  Serial.println(counts[11]);
   b44f6:	f001 ffc7 	bl	b6488 <_Z16_fetch_usbserialv>
   b44fa:	ed9d 0a1b 	vldr	s0, [sp, #108]	; 0x6c
   b44fe:	2102      	movs	r1, #2
   b4500:	f001 fdfd 	bl	b60fe <_ZN5Print7printlnEfi>
  Serial.println();
   b4504:	f001 ffc0 	bl	b6488 <_Z16_fetch_usbserialv>
   b4508:	f001 fcf1 	bl	b5eee <_ZN5Print7printlnEv>
   b450c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   b4510:	f001 fe16 	bl	b6140 <delay>
  RGB.color(0,255,0);
   b4514:	2200      	movs	r2, #0
   b4516:	4610      	mov	r0, r2
   b4518:	21ff      	movs	r1, #255	; 0xff
   b451a:	f001 fe24 	bl	b6166 <_ZN8RGBClass5colorEiii>
   b451e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   b4522:	f001 fe0d 	bl	b6140 <delay>
   b4526:	462e      	mov	r6, r5
   b4528:	f10d 0810 	add.w	r8, sp, #16
   b452c:	24fc      	movs	r4, #252	; 0xfc
   b452e:	e015      	b.n	b455c <loop+0x43c>
   b4530:	000b75d2 	.word	0x000b75d2
   b4534:	000b75de 	.word	0x000b75de
   b4538:	000b75ea 	.word	0x000b75ea
   b453c:	000b75f6 	.word	0x000b75f6
   b4540:	000b7602 	.word	0x000b7602
   b4544:	000b760e 	.word	0x000b760e
   b4548:	000b761a 	.word	0x000b761a
   b454c:	000b7626 	.word	0x000b7626
   b4550:	000b7632 	.word	0x000b7632
   b4554:	000b763e 	.word	0x000b763e
   b4558:	2003e690 	.word	0x2003e690
    if(i == 4 || i == 5) continue;
   b455c:	2c01      	cmp	r4, #1
   b455e:	d906      	bls.n	b456e <loop+0x44e>
    counts[i] = as7341.toBasicCounts(readings[i]);
   b4560:	f8b8 1000 	ldrh.w	r1, [r8]
   b4564:	4648      	mov	r0, r9
   b4566:	f000 ff37 	bl	b53d8 <_ZN15Adafruit_AS734113toBasicCountsEt>
   b456a:	ed86 0a00 	vstr	s0, [r6]
    for(uint8_t i = 0; i < 12; i++) {
   b456e:	3401      	adds	r4, #1
   b4570:	b2e4      	uxtb	r4, r4
   b4572:	2c08      	cmp	r4, #8
   b4574:	f108 0802 	add.w	r8, r8, #2
   b4578:	f106 0604 	add.w	r6, r6, #4
   b457c:	d1ee      	bne.n	b455c <loop+0x43c>
  Serial.print("F1 415nm : ");
   b457e:	f001 ff83 	bl	b6488 <_Z16_fetch_usbserialv>
   b4582:	49e4      	ldr	r1, [pc, #912]	; (b4914 <loop+0x7f4>)
    counts[i] = as7341.toBasicCounts(readings[i]);
   b4584:	f8df 93b4 	ldr.w	r9, [pc, #948]	; b493c <loop+0x81c>
  Serial.print("F1 415nm : ");
   b4588:	f001 fcaa 	bl	b5ee0 <_ZN5Print5printEPKc>
  Serial.println(counts[0]);
   b458c:	f001 ff7c 	bl	b6488 <_Z16_fetch_usbserialv>
   b4590:	ed9d 0a10 	vldr	s0, [sp, #64]	; 0x40
   b4594:	2102      	movs	r1, #2
   b4596:	f001 fdb2 	bl	b60fe <_ZN5Print7printlnEfi>
  Serial.print("F2 445nm : ");
   b459a:	f001 ff75 	bl	b6488 <_Z16_fetch_usbserialv>
   b459e:	49de      	ldr	r1, [pc, #888]	; (b4918 <loop+0x7f8>)
   b45a0:	f001 fc9e 	bl	b5ee0 <_ZN5Print5printEPKc>
  Serial.println(counts[1]);
   b45a4:	f001 ff70 	bl	b6488 <_Z16_fetch_usbserialv>
   b45a8:	ed9d 0a11 	vldr	s0, [sp, #68]	; 0x44
   b45ac:	2102      	movs	r1, #2
   b45ae:	f001 fda6 	bl	b60fe <_ZN5Print7printlnEfi>
  Serial.print("F3 480nm : ");
   b45b2:	f001 ff69 	bl	b6488 <_Z16_fetch_usbserialv>
   b45b6:	49d9      	ldr	r1, [pc, #868]	; (b491c <loop+0x7fc>)
   b45b8:	f001 fc92 	bl	b5ee0 <_ZN5Print5printEPKc>
  Serial.println(counts[2]);
   b45bc:	f001 ff64 	bl	b6488 <_Z16_fetch_usbserialv>
   b45c0:	ed9d 0a12 	vldr	s0, [sp, #72]	; 0x48
   b45c4:	2102      	movs	r1, #2
   b45c6:	f001 fd9a 	bl	b60fe <_ZN5Print7printlnEfi>
  Serial.print("F4 515nm : ");
   b45ca:	f001 ff5d 	bl	b6488 <_Z16_fetch_usbserialv>
   b45ce:	49d4      	ldr	r1, [pc, #848]	; (b4920 <loop+0x800>)
   b45d0:	f001 fc86 	bl	b5ee0 <_ZN5Print5printEPKc>
  Serial.println(counts[3]);
   b45d4:	f001 ff58 	bl	b6488 <_Z16_fetch_usbserialv>
   b45d8:	ed9d 0a13 	vldr	s0, [sp, #76]	; 0x4c
   b45dc:	2102      	movs	r1, #2
   b45de:	f001 fd8e 	bl	b60fe <_ZN5Print7printlnEfi>
  Serial.print("F5 555nm : ");
   b45e2:	f001 ff51 	bl	b6488 <_Z16_fetch_usbserialv>
   b45e6:	49cf      	ldr	r1, [pc, #828]	; (b4924 <loop+0x804>)
   b45e8:	f001 fc7a 	bl	b5ee0 <_ZN5Print5printEPKc>
  Serial.println(counts[6]);
   b45ec:	f001 ff4c 	bl	b6488 <_Z16_fetch_usbserialv>
   b45f0:	ed9d 0a16 	vldr	s0, [sp, #88]	; 0x58
   b45f4:	2102      	movs	r1, #2
   b45f6:	f001 fd82 	bl	b60fe <_ZN5Print7printlnEfi>
  Serial.print("F6 590nm : ");
   b45fa:	f001 ff45 	bl	b6488 <_Z16_fetch_usbserialv>
   b45fe:	49ca      	ldr	r1, [pc, #808]	; (b4928 <loop+0x808>)
   b4600:	f001 fc6e 	bl	b5ee0 <_ZN5Print5printEPKc>
  Serial.println(counts[7]);
   b4604:	f001 ff40 	bl	b6488 <_Z16_fetch_usbserialv>
   b4608:	ed9d 0a17 	vldr	s0, [sp, #92]	; 0x5c
   b460c:	2102      	movs	r1, #2
   b460e:	f001 fd76 	bl	b60fe <_ZN5Print7printlnEfi>
  Serial.print("F7 630nm : ");
   b4612:	f001 ff39 	bl	b6488 <_Z16_fetch_usbserialv>
   b4616:	49c5      	ldr	r1, [pc, #788]	; (b492c <loop+0x80c>)
   b4618:	f001 fc62 	bl	b5ee0 <_ZN5Print5printEPKc>
  Serial.println(counts[8]);
   b461c:	f001 ff34 	bl	b6488 <_Z16_fetch_usbserialv>
   b4620:	ed9d 0a18 	vldr	s0, [sp, #96]	; 0x60
   b4624:	2102      	movs	r1, #2
   b4626:	f001 fd6a 	bl	b60fe <_ZN5Print7printlnEfi>
  Serial.print("F8 680nm : ");
   b462a:	f001 ff2d 	bl	b6488 <_Z16_fetch_usbserialv>
   b462e:	49c0      	ldr	r1, [pc, #768]	; (b4930 <loop+0x810>)
   b4630:	f001 fc56 	bl	b5ee0 <_ZN5Print5printEPKc>
  Serial.println(counts[9]);
   b4634:	f001 ff28 	bl	b6488 <_Z16_fetch_usbserialv>
   b4638:	ed9d 0a19 	vldr	s0, [sp, #100]	; 0x64
   b463c:	2102      	movs	r1, #2
   b463e:	f001 fd5e 	bl	b60fe <_ZN5Print7printlnEfi>
  Serial.print("Clear    : ");
   b4642:	f001 ff21 	bl	b6488 <_Z16_fetch_usbserialv>
   b4646:	49bb      	ldr	r1, [pc, #748]	; (b4934 <loop+0x814>)
   b4648:	f001 fc4a 	bl	b5ee0 <_ZN5Print5printEPKc>
  Serial.println(counts[10]);
   b464c:	f001 ff1c 	bl	b6488 <_Z16_fetch_usbserialv>
   b4650:	ed9d 0a1a 	vldr	s0, [sp, #104]	; 0x68
   b4654:	2102      	movs	r1, #2
   b4656:	f001 fd52 	bl	b60fe <_ZN5Print7printlnEfi>
  Serial.print("NIR      : ");
   b465a:	f001 ff15 	bl	b6488 <_Z16_fetch_usbserialv>
   b465e:	49b6      	ldr	r1, [pc, #728]	; (b4938 <loop+0x818>)
   b4660:	f001 fc3e 	bl	b5ee0 <_ZN5Print5printEPKc>
  Serial.println(counts[11]);
   b4664:	f001 ff10 	bl	b6488 <_Z16_fetch_usbserialv>
   b4668:	ed9d 0a1b 	vldr	s0, [sp, #108]	; 0x6c
   b466c:	2102      	movs	r1, #2
   b466e:	f001 fd46 	bl	b60fe <_ZN5Print7printlnEfi>
  Serial.println();
   b4672:	f001 ff09 	bl	b6488 <_Z16_fetch_usbserialv>
   b4676:	f001 fc3a 	bl	b5eee <_ZN5Print7printlnEv>
   b467a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   b467e:	f001 fd5f 	bl	b6140 <delay>
  RGB.color(179,255,0);
   b4682:	2200      	movs	r2, #0
   b4684:	21ff      	movs	r1, #255	; 0xff
   b4686:	20b3      	movs	r0, #179	; 0xb3
   b4688:	f001 fd6d 	bl	b6166 <_ZN8RGBClass5colorEiii>
   b468c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   b4690:	f001 fd56 	bl	b6140 <delay>
   b4694:	462e      	mov	r6, r5
   b4696:	f10d 0810 	add.w	r8, sp, #16
   b469a:	24fc      	movs	r4, #252	; 0xfc
    if(i == 4 || i == 5) continue;
   b469c:	2c01      	cmp	r4, #1
   b469e:	d906      	bls.n	b46ae <loop+0x58e>
    counts[i] = as7341.toBasicCounts(readings[i]);
   b46a0:	f8b8 1000 	ldrh.w	r1, [r8]
   b46a4:	4648      	mov	r0, r9
   b46a6:	f000 fe97 	bl	b53d8 <_ZN15Adafruit_AS734113toBasicCountsEt>
   b46aa:	ed86 0a00 	vstr	s0, [r6]
    for(uint8_t i = 0; i < 12; i++) {
   b46ae:	3401      	adds	r4, #1
   b46b0:	b2e4      	uxtb	r4, r4
   b46b2:	2c08      	cmp	r4, #8
   b46b4:	f108 0802 	add.w	r8, r8, #2
   b46b8:	f106 0604 	add.w	r6, r6, #4
   b46bc:	d1ee      	bne.n	b469c <loop+0x57c>
  Serial.print("F1 415nm : ");
   b46be:	f001 fee3 	bl	b6488 <_Z16_fetch_usbserialv>
   b46c2:	4994      	ldr	r1, [pc, #592]	; (b4914 <loop+0x7f4>)
    counts[i] = as7341.toBasicCounts(readings[i]);
   b46c4:	f8df 9274 	ldr.w	r9, [pc, #628]	; b493c <loop+0x81c>
  Serial.print("F1 415nm : ");
   b46c8:	f001 fc0a 	bl	b5ee0 <_ZN5Print5printEPKc>
  Serial.println(counts[0]);
   b46cc:	f001 fedc 	bl	b6488 <_Z16_fetch_usbserialv>
   b46d0:	ed9d 0a10 	vldr	s0, [sp, #64]	; 0x40
   b46d4:	2102      	movs	r1, #2
   b46d6:	f001 fd12 	bl	b60fe <_ZN5Print7printlnEfi>
  Serial.print("F2 445nm : ");
   b46da:	f001 fed5 	bl	b6488 <_Z16_fetch_usbserialv>
   b46de:	498e      	ldr	r1, [pc, #568]	; (b4918 <loop+0x7f8>)
   b46e0:	f001 fbfe 	bl	b5ee0 <_ZN5Print5printEPKc>
  Serial.println(counts[1]);
   b46e4:	f001 fed0 	bl	b6488 <_Z16_fetch_usbserialv>
   b46e8:	ed9d 0a11 	vldr	s0, [sp, #68]	; 0x44
   b46ec:	2102      	movs	r1, #2
   b46ee:	f001 fd06 	bl	b60fe <_ZN5Print7printlnEfi>
  Serial.print("F3 480nm : ");
   b46f2:	f001 fec9 	bl	b6488 <_Z16_fetch_usbserialv>
   b46f6:	4989      	ldr	r1, [pc, #548]	; (b491c <loop+0x7fc>)
   b46f8:	f001 fbf2 	bl	b5ee0 <_ZN5Print5printEPKc>
  Serial.println(counts[2]);
   b46fc:	f001 fec4 	bl	b6488 <_Z16_fetch_usbserialv>
   b4700:	ed9d 0a12 	vldr	s0, [sp, #72]	; 0x48
   b4704:	2102      	movs	r1, #2
   b4706:	f001 fcfa 	bl	b60fe <_ZN5Print7printlnEfi>
  Serial.print("F4 515nm : ");
   b470a:	f001 febd 	bl	b6488 <_Z16_fetch_usbserialv>
   b470e:	4984      	ldr	r1, [pc, #528]	; (b4920 <loop+0x800>)
   b4710:	f001 fbe6 	bl	b5ee0 <_ZN5Print5printEPKc>
  Serial.println(counts[3]);
   b4714:	f001 feb8 	bl	b6488 <_Z16_fetch_usbserialv>
   b4718:	ed9d 0a13 	vldr	s0, [sp, #76]	; 0x4c
   b471c:	2102      	movs	r1, #2
   b471e:	f001 fcee 	bl	b60fe <_ZN5Print7printlnEfi>
  Serial.print("F5 555nm : ");
   b4722:	f001 feb1 	bl	b6488 <_Z16_fetch_usbserialv>
   b4726:	497f      	ldr	r1, [pc, #508]	; (b4924 <loop+0x804>)
   b4728:	f001 fbda 	bl	b5ee0 <_ZN5Print5printEPKc>
  Serial.println(counts[6]);
   b472c:	f001 feac 	bl	b6488 <_Z16_fetch_usbserialv>
   b4730:	ed9d 0a16 	vldr	s0, [sp, #88]	; 0x58
   b4734:	2102      	movs	r1, #2
   b4736:	f001 fce2 	bl	b60fe <_ZN5Print7printlnEfi>
  Serial.print("F6 590nm : ");
   b473a:	f001 fea5 	bl	b6488 <_Z16_fetch_usbserialv>
   b473e:	497a      	ldr	r1, [pc, #488]	; (b4928 <loop+0x808>)
   b4740:	f001 fbce 	bl	b5ee0 <_ZN5Print5printEPKc>
  Serial.println(counts[7]);
   b4744:	f001 fea0 	bl	b6488 <_Z16_fetch_usbserialv>
   b4748:	ed9d 0a17 	vldr	s0, [sp, #92]	; 0x5c
   b474c:	2102      	movs	r1, #2
   b474e:	f001 fcd6 	bl	b60fe <_ZN5Print7printlnEfi>
  Serial.print("F7 630nm : ");
   b4752:	f001 fe99 	bl	b6488 <_Z16_fetch_usbserialv>
   b4756:	4975      	ldr	r1, [pc, #468]	; (b492c <loop+0x80c>)
   b4758:	f001 fbc2 	bl	b5ee0 <_ZN5Print5printEPKc>
  Serial.println(counts[8]);
   b475c:	f001 fe94 	bl	b6488 <_Z16_fetch_usbserialv>
   b4760:	ed9d 0a18 	vldr	s0, [sp, #96]	; 0x60
   b4764:	2102      	movs	r1, #2
   b4766:	f001 fcca 	bl	b60fe <_ZN5Print7printlnEfi>
  Serial.print("F8 680nm : ");
   b476a:	f001 fe8d 	bl	b6488 <_Z16_fetch_usbserialv>
   b476e:	4970      	ldr	r1, [pc, #448]	; (b4930 <loop+0x810>)
   b4770:	f001 fbb6 	bl	b5ee0 <_ZN5Print5printEPKc>
  Serial.println(counts[9]);
   b4774:	f001 fe88 	bl	b6488 <_Z16_fetch_usbserialv>
   b4778:	ed9d 0a19 	vldr	s0, [sp, #100]	; 0x64
   b477c:	2102      	movs	r1, #2
   b477e:	f001 fcbe 	bl	b60fe <_ZN5Print7printlnEfi>
  Serial.print("Clear    : ");
   b4782:	f001 fe81 	bl	b6488 <_Z16_fetch_usbserialv>
   b4786:	496b      	ldr	r1, [pc, #428]	; (b4934 <loop+0x814>)
   b4788:	f001 fbaa 	bl	b5ee0 <_ZN5Print5printEPKc>
  Serial.println(counts[10]);
   b478c:	f001 fe7c 	bl	b6488 <_Z16_fetch_usbserialv>
   b4790:	ed9d 0a1a 	vldr	s0, [sp, #104]	; 0x68
   b4794:	2102      	movs	r1, #2
   b4796:	f001 fcb2 	bl	b60fe <_ZN5Print7printlnEfi>
  Serial.print("NIR      : ");
   b479a:	f001 fe75 	bl	b6488 <_Z16_fetch_usbserialv>
   b479e:	4966      	ldr	r1, [pc, #408]	; (b4938 <loop+0x818>)
   b47a0:	f001 fb9e 	bl	b5ee0 <_ZN5Print5printEPKc>
  Serial.println(counts[11]);
   b47a4:	f001 fe70 	bl	b6488 <_Z16_fetch_usbserialv>
   b47a8:	ed9d 0a1b 	vldr	s0, [sp, #108]	; 0x6c
   b47ac:	2102      	movs	r1, #2
   b47ae:	f001 fca6 	bl	b60fe <_ZN5Print7printlnEfi>
  Serial.println();
   b47b2:	f001 fe69 	bl	b6488 <_Z16_fetch_usbserialv>
   b47b6:	f001 fb9a 	bl	b5eee <_ZN5Print7printlnEv>
   b47ba:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   b47be:	f001 fcbf 	bl	b6140 <delay>
  RGB.color(255,0,0);
   b47c2:	2200      	movs	r2, #0
   b47c4:	4611      	mov	r1, r2
   b47c6:	20ff      	movs	r0, #255	; 0xff
   b47c8:	f001 fccd 	bl	b6166 <_ZN8RGBClass5colorEiii>
   b47cc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   b47d0:	f001 fcb6 	bl	b6140 <delay>
   b47d4:	46a8      	mov	r8, r5
   b47d6:	ac04      	add	r4, sp, #16
   b47d8:	26fc      	movs	r6, #252	; 0xfc
    if(i == 4 || i == 5) continue;
   b47da:	2e01      	cmp	r6, #1
   b47dc:	d905      	bls.n	b47ea <loop+0x6ca>
    counts[i] = as7341.toBasicCounts(readings[i]);
   b47de:	8821      	ldrh	r1, [r4, #0]
   b47e0:	4648      	mov	r0, r9
   b47e2:	f000 fdf9 	bl	b53d8 <_ZN15Adafruit_AS734113toBasicCountsEt>
   b47e6:	ed88 0a00 	vstr	s0, [r8]
    for(uint8_t i = 0; i < 12; i++) {
   b47ea:	3601      	adds	r6, #1
   b47ec:	b2f6      	uxtb	r6, r6
   b47ee:	2e08      	cmp	r6, #8
   b47f0:	f104 0402 	add.w	r4, r4, #2
   b47f4:	f108 0804 	add.w	r8, r8, #4
   b47f8:	d1ef      	bne.n	b47da <loop+0x6ba>
  Serial.print("F1 415nm : ");
   b47fa:	f001 fe45 	bl	b6488 <_Z16_fetch_usbserialv>
   b47fe:	4945      	ldr	r1, [pc, #276]	; (b4914 <loop+0x7f4>)
    counts[i] = as7341.toBasicCounts(readings[i]);
   b4800:	4e4e      	ldr	r6, [pc, #312]	; (b493c <loop+0x81c>)
  Serial.print("F1 415nm : ");
   b4802:	f001 fb6d 	bl	b5ee0 <_ZN5Print5printEPKc>
  Serial.println(counts[0]);
   b4806:	f001 fe3f 	bl	b6488 <_Z16_fetch_usbserialv>
   b480a:	ed9d 0a10 	vldr	s0, [sp, #64]	; 0x40
   b480e:	2102      	movs	r1, #2
   b4810:	f001 fc75 	bl	b60fe <_ZN5Print7printlnEfi>
  Serial.print("F2 445nm : ");
   b4814:	f001 fe38 	bl	b6488 <_Z16_fetch_usbserialv>
   b4818:	493f      	ldr	r1, [pc, #252]	; (b4918 <loop+0x7f8>)
   b481a:	f001 fb61 	bl	b5ee0 <_ZN5Print5printEPKc>
  Serial.println(counts[1]);
   b481e:	f001 fe33 	bl	b6488 <_Z16_fetch_usbserialv>
   b4822:	ed9d 0a11 	vldr	s0, [sp, #68]	; 0x44
   b4826:	2102      	movs	r1, #2
   b4828:	f001 fc69 	bl	b60fe <_ZN5Print7printlnEfi>
  Serial.print("F3 480nm : ");
   b482c:	f001 fe2c 	bl	b6488 <_Z16_fetch_usbserialv>
   b4830:	493a      	ldr	r1, [pc, #232]	; (b491c <loop+0x7fc>)
   b4832:	f001 fb55 	bl	b5ee0 <_ZN5Print5printEPKc>
  Serial.println(counts[2]);
   b4836:	f001 fe27 	bl	b6488 <_Z16_fetch_usbserialv>
   b483a:	ed9d 0a12 	vldr	s0, [sp, #72]	; 0x48
   b483e:	2102      	movs	r1, #2
   b4840:	f001 fc5d 	bl	b60fe <_ZN5Print7printlnEfi>
  Serial.print("F4 515nm : ");
   b4844:	f001 fe20 	bl	b6488 <_Z16_fetch_usbserialv>
   b4848:	4935      	ldr	r1, [pc, #212]	; (b4920 <loop+0x800>)
   b484a:	f001 fb49 	bl	b5ee0 <_ZN5Print5printEPKc>
  Serial.println(counts[3]);
   b484e:	f001 fe1b 	bl	b6488 <_Z16_fetch_usbserialv>
   b4852:	ed9d 0a13 	vldr	s0, [sp, #76]	; 0x4c
   b4856:	2102      	movs	r1, #2
   b4858:	f001 fc51 	bl	b60fe <_ZN5Print7printlnEfi>
  Serial.print("F5 555nm : ");
   b485c:	f001 fe14 	bl	b6488 <_Z16_fetch_usbserialv>
   b4860:	4930      	ldr	r1, [pc, #192]	; (b4924 <loop+0x804>)
   b4862:	f001 fb3d 	bl	b5ee0 <_ZN5Print5printEPKc>
  Serial.println(counts[6]);
   b4866:	f001 fe0f 	bl	b6488 <_Z16_fetch_usbserialv>
   b486a:	ed9d 0a16 	vldr	s0, [sp, #88]	; 0x58
   b486e:	2102      	movs	r1, #2
   b4870:	f001 fc45 	bl	b60fe <_ZN5Print7printlnEfi>
  Serial.print("F6 590nm : ");
   b4874:	f001 fe08 	bl	b6488 <_Z16_fetch_usbserialv>
   b4878:	492b      	ldr	r1, [pc, #172]	; (b4928 <loop+0x808>)
   b487a:	f001 fb31 	bl	b5ee0 <_ZN5Print5printEPKc>
  Serial.println(counts[7]);
   b487e:	f001 fe03 	bl	b6488 <_Z16_fetch_usbserialv>
   b4882:	ed9d 0a17 	vldr	s0, [sp, #92]	; 0x5c
   b4886:	2102      	movs	r1, #2
   b4888:	f001 fc39 	bl	b60fe <_ZN5Print7printlnEfi>
  Serial.print("F7 630nm : ");
   b488c:	f001 fdfc 	bl	b6488 <_Z16_fetch_usbserialv>
   b4890:	4926      	ldr	r1, [pc, #152]	; (b492c <loop+0x80c>)
   b4892:	f001 fb25 	bl	b5ee0 <_ZN5Print5printEPKc>
  Serial.println(counts[8]);
   b4896:	f001 fdf7 	bl	b6488 <_Z16_fetch_usbserialv>
   b489a:	ed9d 0a18 	vldr	s0, [sp, #96]	; 0x60
   b489e:	2102      	movs	r1, #2
   b48a0:	f001 fc2d 	bl	b60fe <_ZN5Print7printlnEfi>
  Serial.print("F8 680nm : ");
   b48a4:	f001 fdf0 	bl	b6488 <_Z16_fetch_usbserialv>
   b48a8:	4921      	ldr	r1, [pc, #132]	; (b4930 <loop+0x810>)
   b48aa:	f001 fb19 	bl	b5ee0 <_ZN5Print5printEPKc>
  Serial.println(counts[9]);
   b48ae:	f001 fdeb 	bl	b6488 <_Z16_fetch_usbserialv>
   b48b2:	ed9d 0a19 	vldr	s0, [sp, #100]	; 0x64
   b48b6:	2102      	movs	r1, #2
   b48b8:	f001 fc21 	bl	b60fe <_ZN5Print7printlnEfi>
  Serial.print("Clear    : ");
   b48bc:	f001 fde4 	bl	b6488 <_Z16_fetch_usbserialv>
   b48c0:	491c      	ldr	r1, [pc, #112]	; (b4934 <loop+0x814>)
   b48c2:	f001 fb0d 	bl	b5ee0 <_ZN5Print5printEPKc>
  Serial.println(counts[10]);
   b48c6:	f001 fddf 	bl	b6488 <_Z16_fetch_usbserialv>
   b48ca:	ed9d 0a1a 	vldr	s0, [sp, #104]	; 0x68
   b48ce:	2102      	movs	r1, #2
   b48d0:	f001 fc15 	bl	b60fe <_ZN5Print7printlnEfi>
  Serial.print("NIR      : ");
   b48d4:	f001 fdd8 	bl	b6488 <_Z16_fetch_usbserialv>
   b48d8:	4917      	ldr	r1, [pc, #92]	; (b4938 <loop+0x818>)
   b48da:	f001 fb01 	bl	b5ee0 <_ZN5Print5printEPKc>
  Serial.println(counts[11]);
   b48de:	f001 fdd3 	bl	b6488 <_Z16_fetch_usbserialv>
   b48e2:	ed9d 0a1b 	vldr	s0, [sp, #108]	; 0x6c
   b48e6:	2102      	movs	r1, #2
   b48e8:	f001 fc09 	bl	b60fe <_ZN5Print7printlnEfi>
  Serial.println();
   b48ec:	f001 fdcc 	bl	b6488 <_Z16_fetch_usbserialv>
   b48f0:	f001 fafd 	bl	b5eee <_ZN5Print7printlnEv>
   b48f4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   b48f8:	f001 fc22 	bl	b6140 <delay>
  RGB.color(161,0,0);
   b48fc:	2200      	movs	r2, #0
   b48fe:	4611      	mov	r1, r2
   b4900:	20a1      	movs	r0, #161	; 0xa1
   b4902:	f001 fc30 	bl	b6166 <_ZN8RGBClass5colorEiii>
   b4906:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   b490a:	f001 fc19 	bl	b6140 <delay>
   b490e:	24fc      	movs	r4, #252	; 0xfc
   b4910:	e016      	b.n	b4940 <loop+0x820>
   b4912:	bf00      	nop
   b4914:	000b75d2 	.word	0x000b75d2
   b4918:	000b75de 	.word	0x000b75de
   b491c:	000b75ea 	.word	0x000b75ea
   b4920:	000b75f6 	.word	0x000b75f6
   b4924:	000b7602 	.word	0x000b7602
   b4928:	000b760e 	.word	0x000b760e
   b492c:	000b761a 	.word	0x000b761a
   b4930:	000b7626 	.word	0x000b7626
   b4934:	000b7632 	.word	0x000b7632
   b4938:	000b763e 	.word	0x000b763e
   b493c:	2003e690 	.word	0x2003e690
    if(i == 4 || i == 5) continue;
   b4940:	2c01      	cmp	r4, #1
   b4942:	d905      	bls.n	b4950 <loop+0x830>
    counts[i] = as7341.toBasicCounts(readings[i]);
   b4944:	8839      	ldrh	r1, [r7, #0]
   b4946:	4630      	mov	r0, r6
   b4948:	f000 fd46 	bl	b53d8 <_ZN15Adafruit_AS734113toBasicCountsEt>
   b494c:	ed85 0a00 	vstr	s0, [r5]
    for(uint8_t i = 0; i < 12; i++) {
   b4950:	3401      	adds	r4, #1
   b4952:	b2e4      	uxtb	r4, r4
   b4954:	2c08      	cmp	r4, #8
   b4956:	f107 0702 	add.w	r7, r7, #2
   b495a:	f105 0504 	add.w	r5, r5, #4
   b495e:	d1ef      	bne.n	b4940 <loop+0x820>
  Serial.print("F1 415nm : ");
   b4960:	f001 fd92 	bl	b6488 <_Z16_fetch_usbserialv>
   b4964:	4971      	ldr	r1, [pc, #452]	; (b4b2c <loop+0xa0c>)
   b4966:	f001 fabb 	bl	b5ee0 <_ZN5Print5printEPKc>
  Serial.println(counts[0]);
   b496a:	f001 fd8d 	bl	b6488 <_Z16_fetch_usbserialv>
   b496e:	ed9d 0a10 	vldr	s0, [sp, #64]	; 0x40
   b4972:	2102      	movs	r1, #2
   b4974:	f001 fbc3 	bl	b60fe <_ZN5Print7printlnEfi>
  Serial.print("F2 445nm : ");
   b4978:	f001 fd86 	bl	b6488 <_Z16_fetch_usbserialv>
   b497c:	496c      	ldr	r1, [pc, #432]	; (b4b30 <loop+0xa10>)
   b497e:	f001 faaf 	bl	b5ee0 <_ZN5Print5printEPKc>
  Serial.println(counts[1]);
   b4982:	f001 fd81 	bl	b6488 <_Z16_fetch_usbserialv>
   b4986:	ed9d 0a11 	vldr	s0, [sp, #68]	; 0x44
   b498a:	2102      	movs	r1, #2
   b498c:	f001 fbb7 	bl	b60fe <_ZN5Print7printlnEfi>
  Serial.print("F3 480nm : ");
   b4990:	f001 fd7a 	bl	b6488 <_Z16_fetch_usbserialv>
   b4994:	4967      	ldr	r1, [pc, #412]	; (b4b34 <loop+0xa14>)
   b4996:	f001 faa3 	bl	b5ee0 <_ZN5Print5printEPKc>
  Serial.println(counts[2]);
   b499a:	f001 fd75 	bl	b6488 <_Z16_fetch_usbserialv>
   b499e:	ed9d 0a12 	vldr	s0, [sp, #72]	; 0x48
   b49a2:	2102      	movs	r1, #2
   b49a4:	f001 fbab 	bl	b60fe <_ZN5Print7printlnEfi>
  Serial.print("F4 515nm : ");
   b49a8:	f001 fd6e 	bl	b6488 <_Z16_fetch_usbserialv>
   b49ac:	4962      	ldr	r1, [pc, #392]	; (b4b38 <loop+0xa18>)
   b49ae:	f001 fa97 	bl	b5ee0 <_ZN5Print5printEPKc>
  Serial.println(counts[3]);
   b49b2:	f001 fd69 	bl	b6488 <_Z16_fetch_usbserialv>
   b49b6:	ed9d 0a13 	vldr	s0, [sp, #76]	; 0x4c
   b49ba:	2102      	movs	r1, #2
   b49bc:	f001 fb9f 	bl	b60fe <_ZN5Print7printlnEfi>
  Serial.print("F5 555nm : ");
   b49c0:	f001 fd62 	bl	b6488 <_Z16_fetch_usbserialv>
   b49c4:	495d      	ldr	r1, [pc, #372]	; (b4b3c <loop+0xa1c>)
   b49c6:	f001 fa8b 	bl	b5ee0 <_ZN5Print5printEPKc>
  Serial.println(counts[6]);
   b49ca:	f001 fd5d 	bl	b6488 <_Z16_fetch_usbserialv>
   b49ce:	ed9d 0a16 	vldr	s0, [sp, #88]	; 0x58
   b49d2:	2102      	movs	r1, #2
   b49d4:	f001 fb93 	bl	b60fe <_ZN5Print7printlnEfi>
  Serial.print("F6 590nm : ");
   b49d8:	f001 fd56 	bl	b6488 <_Z16_fetch_usbserialv>
   b49dc:	4958      	ldr	r1, [pc, #352]	; (b4b40 <loop+0xa20>)
   b49de:	f001 fa7f 	bl	b5ee0 <_ZN5Print5printEPKc>
  Serial.println(counts[7]);
   b49e2:	f001 fd51 	bl	b6488 <_Z16_fetch_usbserialv>
   b49e6:	ed9d 0a17 	vldr	s0, [sp, #92]	; 0x5c
   b49ea:	2102      	movs	r1, #2
   b49ec:	f001 fb87 	bl	b60fe <_ZN5Print7printlnEfi>
  Serial.print("F7 630nm : ");
   b49f0:	f001 fd4a 	bl	b6488 <_Z16_fetch_usbserialv>
   b49f4:	4953      	ldr	r1, [pc, #332]	; (b4b44 <loop+0xa24>)
   b49f6:	f001 fa73 	bl	b5ee0 <_ZN5Print5printEPKc>
  Serial.println(counts[8]);
   b49fa:	f001 fd45 	bl	b6488 <_Z16_fetch_usbserialv>
   b49fe:	ed9d 0a18 	vldr	s0, [sp, #96]	; 0x60
   b4a02:	2102      	movs	r1, #2
   b4a04:	f001 fb7b 	bl	b60fe <_ZN5Print7printlnEfi>
  Serial.print("F8 680nm : ");
   b4a08:	f001 fd3e 	bl	b6488 <_Z16_fetch_usbserialv>
   b4a0c:	494e      	ldr	r1, [pc, #312]	; (b4b48 <loop+0xa28>)
   b4a0e:	f001 fa67 	bl	b5ee0 <_ZN5Print5printEPKc>
  Serial.println(counts[9]);
   b4a12:	f001 fd39 	bl	b6488 <_Z16_fetch_usbserialv>
   b4a16:	ed9d 0a19 	vldr	s0, [sp, #100]	; 0x64
   b4a1a:	2102      	movs	r1, #2
   b4a1c:	f001 fb6f 	bl	b60fe <_ZN5Print7printlnEfi>
  Serial.print("Clear    : ");
   b4a20:	f001 fd32 	bl	b6488 <_Z16_fetch_usbserialv>
   b4a24:	4949      	ldr	r1, [pc, #292]	; (b4b4c <loop+0xa2c>)
   b4a26:	f001 fa5b 	bl	b5ee0 <_ZN5Print5printEPKc>
  Serial.println(counts[10]);
   b4a2a:	f001 fd2d 	bl	b6488 <_Z16_fetch_usbserialv>
   b4a2e:	ed9d 0a1a 	vldr	s0, [sp, #104]	; 0x68
   b4a32:	2102      	movs	r1, #2
   b4a34:	f001 fb63 	bl	b60fe <_ZN5Print7printlnEfi>
  Serial.print("NIR      : ");
   b4a38:	f001 fd26 	bl	b6488 <_Z16_fetch_usbserialv>
   b4a3c:	4944      	ldr	r1, [pc, #272]	; (b4b50 <loop+0xa30>)
   b4a3e:	f001 fa4f 	bl	b5ee0 <_ZN5Print5printEPKc>
  Serial.println(counts[11]);
   b4a42:	f001 fd21 	bl	b6488 <_Z16_fetch_usbserialv>
   b4a46:	ed9d 0a1b 	vldr	s0, [sp, #108]	; 0x6c
   b4a4a:	2102      	movs	r1, #2
   b4a4c:	f001 fb57 	bl	b60fe <_ZN5Print7printlnEfi>
  Serial.println();
   b4a50:	f001 fd1a 	bl	b6488 <_Z16_fetch_usbserialv>
   b4a54:	f001 fa4b 	bl	b5eee <_ZN5Print7printlnEv>
   b4a58:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   b4a5c:	f001 fb70 	bl	b6140 <delay>
  RGB.control(false);
   b4a60:	2000      	movs	r0, #0
   b4a62:	f001 fb70 	bl	b6146 <_ZN8RGBClass7controlEb>
   b4a66:	f640 30b8 	movw	r0, #3000	; 0xbb8
   b4a6a:	f001 fb69 	bl	b6140 <delay>
    // Constructor
    SystemSleepConfiguration()
            : SystemSleepConfigurationHelper(&config_),
              config_(),
              valid_(true) {
        config_.size = sizeof(hal_sleep_config_t);
   b4a6e:	2210      	movs	r2, #16
        : config_(config) {
   b4a70:	ab0b      	add	r3, sp, #44	; 0x2c
   b4a72:	930a      	str	r3, [sp, #40]	; 0x28
              valid_(true) {
   b4a74:	2600      	movs	r6, #0
   b4a76:	2501      	movs	r5, #1
        config_.version = HAL_SLEEP_VERSION;
   b4a78:	2303      	movs	r3, #3
                    return *this;
                }
                wakeup = wakeupSourceFeatured(HAL_WAKEUP_SOURCE_TYPE_GPIO, wakeup->next);
            }
            // Otherwise, configure this pin as wakeup source.
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_gpio_t();
   b4a7a:	4936      	ldr	r1, [pc, #216]	; (b4b54 <loop+0xa34>)
              valid_(true) {
   b4a7c:	960e      	str	r6, [sp, #56]	; 0x38
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_gpio_t();
   b4a7e:	4610      	mov	r0, r2
              valid_(true) {
   b4a80:	e9cd 660c 	strd	r6, r6, [sp, #48]	; 0x30
   b4a84:	f88d 503c 	strb.w	r5, [sp, #60]	; 0x3c
        config_.size = sizeof(hal_sleep_config_t);
   b4a88:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
        config_.version = HAL_SLEEP_VERSION;
   b4a8c:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
            config_.mode = static_cast<hal_sleep_mode_t>(mode);
   b4a90:	f88d 5030 	strb.w	r5, [sp, #48]	; 0x30
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_gpio_t();
   b4a94:	f001 ffba 	bl	b6a0c <_ZnwjRKSt9nothrow_t>
   b4a98:	4604      	mov	r4, r0
   b4a9a:	2800      	cmp	r0, #0
   b4a9c:	d03d      	beq.n	b4b1a <loop+0x9fa>
   b4a9e:	2210      	movs	r2, #16
   b4aa0:	4631      	mov	r1, r6
   b4aa2:	f002 fccf 	bl	b7444 <memset>
            if (!wakeupSource) {
                valid_ = false;
                return *this;
            }
            wakeupSource->base.size = sizeof(hal_wakeup_source_gpio_t);
   b4aa6:	4b2c      	ldr	r3, [pc, #176]	; (b4b58 <loop+0xa38>)
   b4aa8:	6023      	str	r3, [r4, #0]
            wakeupSource->base.version = HAL_SLEEP_VERSION;
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_GPIO;
            wakeupSource->base.next = config_.wakeup_sources;
   b4aaa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   b4aac:	60a3      	str	r3, [r4, #8]
            wakeupSource->pin = pin;
   b4aae:	2302      	movs	r3, #2
   b4ab0:	81a3      	strh	r3, [r4, #12]
        }
        return *this;
    }

    SystemSleepConfiguration& duration(system_tick_t ms) {
        if (valid_) {
   b4ab2:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_GPIO;
   b4ab6:	80a5      	strh	r5, [r4, #4]
            wakeupSource->mode = mode;
   b4ab8:	73a5      	strb	r5, [r4, #14]
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
   b4aba:	940e      	str	r4, [sp, #56]	; 0x38
        if (valid_) {
   b4abc:	b1db      	cbz	r3, b4af6 <loop+0x9d6>
        return wakeupSourceFeatured(type, config_->wakeup_sources);
   b4abe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b4ac0:	68db      	ldr	r3, [r3, #12]
        if (!start) {
   b4ac2:	b123      	cbz	r3, b4ace <loop+0x9ae>
            if (start->type == type) {
   b4ac4:	889a      	ldrh	r2, [r3, #4]
   b4ac6:	2a04      	cmp	r2, #4
   b4ac8:	d02b      	beq.n	b4b22 <loop+0xa02>
            start = start->next;
   b4aca:	689b      	ldr	r3, [r3, #8]
        while (start) {
   b4acc:	e7f9      	b.n	b4ac2 <loop+0x9a2>
            if (wakeup) {
                reinterpret_cast<hal_wakeup_source_rtc_t*>(wakeup)->ms = ms;
                return *this;
            }
            // Otherwise, configure RTC as wakeup source.
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_rtc_t();
   b4ace:	4921      	ldr	r1, [pc, #132]	; (b4b54 <loop+0xa34>)
   b4ad0:	2010      	movs	r0, #16
   b4ad2:	f001 ff9b 	bl	b6a0c <_ZnwjRKSt9nothrow_t>
   b4ad6:	4604      	mov	r4, r0
   b4ad8:	b1f8      	cbz	r0, b4b1a <loop+0x9fa>
   b4ada:	2210      	movs	r2, #16
   b4adc:	2100      	movs	r1, #0
   b4ade:	f002 fcb1 	bl	b7444 <memset>
            if (!wakeupSource) {
                valid_ = false;
                return *this;
            }
            wakeupSource->base.size = sizeof(hal_wakeup_source_rtc_t);
   b4ae2:	4b1d      	ldr	r3, [pc, #116]	; (b4b58 <loop+0xa38>)
   b4ae4:	6023      	str	r3, [r4, #0]
            wakeupSource->base.version = HAL_SLEEP_VERSION;
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_RTC;
   b4ae6:	2304      	movs	r3, #4
   b4ae8:	80a3      	strh	r3, [r4, #4]
            wakeupSource->base.next = config_.wakeup_sources;
   b4aea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   b4aec:	60a3      	str	r3, [r4, #8]
            wakeupSource->ms = ms;
   b4aee:	f64e 2360 	movw	r3, #60000	; 0xea60
   b4af2:	60e3      	str	r3, [r4, #12]
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
   b4af4:	940e      	str	r4, [sp, #56]	; 0x38
SystemSleepResult result = System.sleep(config);
   b4af6:	a801      	add	r0, sp, #4
   b4af8:	a90a      	add	r1, sp, #40	; 0x28
   b4afa:	f001 f94f 	bl	b5d9c <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE>
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
        if (wakeupSource_) {
   b4afe:	9801      	ldr	r0, [sp, #4]
   b4b00:	b108      	cbz	r0, b4b06 <loop+0x9e6>
            free(wakeupSource_);
   b4b02:	f001 f81b 	bl	b5b3c <free>
        auto wakeupSource = config_.wakeup_sources;
   b4b06:	980e      	ldr	r0, [sp, #56]	; 0x38
        while (wakeupSource) {
   b4b08:	2800      	cmp	r0, #0
   b4b0a:	f43f ab16 	beq.w	b413a <loop+0x1a>
            auto next = wakeupSource->next;
   b4b0e:	6884      	ldr	r4, [r0, #8]
            delete wakeupSource;
   b4b10:	210c      	movs	r1, #12
   b4b12:	f7ff fac4 	bl	b409e <_ZdlPvj>
            wakeupSource = next;
   b4b16:	4620      	mov	r0, r4
        while (wakeupSource) {
   b4b18:	e7f6      	b.n	b4b08 <loop+0x9e8>
                valid_ = false;
   b4b1a:	2300      	movs	r3, #0
   b4b1c:	f88d 303c 	strb.w	r3, [sp, #60]	; 0x3c
                return *this;
   b4b20:	e7e9      	b.n	b4af6 <loop+0x9d6>
                reinterpret_cast<hal_wakeup_source_rtc_t*>(wakeup)->ms = ms;
   b4b22:	f64e 2260 	movw	r2, #60000	; 0xea60
   b4b26:	60da      	str	r2, [r3, #12]
                return *this;
   b4b28:	e7e5      	b.n	b4af6 <loop+0x9d6>
   b4b2a:	bf00      	nop
   b4b2c:	000b75d2 	.word	0x000b75d2
   b4b30:	000b75de 	.word	0x000b75de
   b4b34:	000b75ea 	.word	0x000b75ea
   b4b38:	000b75f6 	.word	0x000b75f6
   b4b3c:	000b7602 	.word	0x000b7602
   b4b40:	000b760e 	.word	0x000b760e
   b4b44:	000b761a 	.word	0x000b761a
   b4b48:	000b7626 	.word	0x000b7626
   b4b4c:	000b7632 	.word	0x000b7632
   b4b50:	000b763e 	.word	0x000b763e
   b4b54:	000b7838 	.word	0x000b7838
   b4b58:	00030010 	.word	0x00030010

000b4b5c <_GLOBAL__sub_I_as7341>:
   b4b5c:	b508      	push	{r3, lr}
Adafruit_AS7341 as7341;
   b4b5e:	4809      	ldr	r0, [pc, #36]	; (b4b84 <_GLOBAL__sub_I_as7341+0x28>)
   b4b60:	f000 fae8 	bl	b5134 <_ZN15Adafruit_AS7341C1Ev>
SYSTEM_THREAD(ENABLED);
   b4b64:	2001      	movs	r0, #1
   b4b66:	2100      	movs	r1, #0
   b4b68:	f000 ff52 	bl	b5a10 <system_thread_set_state>
              error_(SYSTEM_ERROR_NONE) {
   b4b6c:	4b06      	ldr	r3, [pc, #24]	; (b4b88 <_GLOBAL__sub_I_as7341+0x2c>)
   b4b6e:	2200      	movs	r2, #0
   b4b70:	e9c3 2200 	strd	r2, r2, [r3]
    SleepResult() {}
   b4b74:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
   b4b78:	609a      	str	r2, [r3, #8]
   b4b7a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b4b7e:	2002      	movs	r0, #2
   b4b80:	f000 bf36 	b.w	b59f0 <set_system_mode>
   b4b84:	2003e690 	.word	0x2003e690
   b4b88:	2003e684 	.word	0x2003e684

000b4b8c <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>:
 *    @param  byteorder The byte order of the register (used when width is > 1),
 * defaults to LSBFIRST
 *    @param  address_width The width of the register address itself, defaults
 * to 1 byte
 */
Adafruit_BusIO_Register::Adafruit_BusIO_Register(Adafruit_I2CDevice *i2cdevice,
   b4b8c:	b530      	push	{r4, r5, lr}
                                                 uint16_t reg_addr,
                                                 uint8_t width,
                                                 uint8_t byteorder,
                                                 uint8_t address_width) {
   b4b8e:	2500      	movs	r5, #0
  _i2cdevice = i2cdevice;
  _spidevice = nullptr;
   b4b90:	e9c0 1500 	strd	r1, r5, [r0]
  _addrwidth = address_width;
  _address = reg_addr;
   b4b94:	8142      	strh	r2, [r0, #10]
  _addrwidth = address_width;
   b4b96:	f89d 1010 	ldrb.w	r1, [sp, #16]
  _byteorder = byteorder;
   b4b9a:	f89d 200c 	ldrb.w	r2, [sp, #12]
                                                 uint8_t address_width) {
   b4b9e:	6145      	str	r5, [r0, #20]
  _addrwidth = address_width;
   b4ba0:	7341      	strb	r1, [r0, #13]
  _byteorder = byteorder;
   b4ba2:	7382      	strb	r2, [r0, #14]
  _width = width;
   b4ba4:	7303      	strb	r3, [r0, #12]
}
   b4ba6:	bd30      	pop	{r4, r5, pc}

000b4ba8 <_ZN23Adafruit_BusIO_Register5writeEPhh>:
 *    @param  buffer Pointer to data to write
 *    @param  len Number of bytes to write
 *    @return True on successful write (only really useful for I2C as SPI is
 * uncheckable)
 */
bool Adafruit_BusIO_Register::write(uint8_t *buffer, uint8_t len) {
   b4ba8:	b5f0      	push	{r4, r5, r6, r7, lr}

  uint8_t addrbuffer[2] = {(uint8_t)(_address & 0xFF),
   b4baa:	8945      	ldrh	r5, [r0, #10]
                           (uint8_t)(_address >> 8)};
   b4bac:	7a84      	ldrb	r4, [r0, #10]
bool Adafruit_BusIO_Register::write(uint8_t *buffer, uint8_t len) {
   b4bae:	b085      	sub	sp, #20
   b4bb0:	4603      	mov	r3, r0

  if (_i2cdevice) {
   b4bb2:	6800      	ldr	r0, [r0, #0]
                           (uint8_t)(_address >> 8)};
   b4bb4:	f88d 400c 	strb.w	r4, [sp, #12]
   b4bb8:	0a2d      	lsrs	r5, r5, #8
bool Adafruit_BusIO_Register::write(uint8_t *buffer, uint8_t len) {
   b4bba:	460e      	mov	r6, r1
   b4bbc:	4617      	mov	r7, r2
                           (uint8_t)(_address >> 8)};
   b4bbe:	f88d 500d 	strb.w	r5, [sp, #13]
  if (_i2cdevice) {
   b4bc2:	b140      	cbz	r0, b4bd6 <_ZN23Adafruit_BusIO_Register5writeEPhh+0x2e>
    return _i2cdevice->write(buffer, len, true, addrbuffer, _addrwidth);
   b4bc4:	7b5b      	ldrb	r3, [r3, #13]
   b4bc6:	9301      	str	r3, [sp, #4]
   b4bc8:	ab03      	add	r3, sp, #12
   b4bca:	9300      	str	r3, [sp, #0]
   b4bcc:	2301      	movs	r3, #1
   b4bce:	f000 fa2c 	bl	b502a <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>
      addrbuffer[0] |= 0x40;
    }
    return _spidevice->write(buffer, len, addrbuffer, _addrwidth);
  }
  return false;
}
   b4bd2:	b005      	add	sp, #20
   b4bd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (_spidevice) {
   b4bd6:	6858      	ldr	r0, [r3, #4]
   b4bd8:	2800      	cmp	r0, #0
   b4bda:	d0fa      	beq.n	b4bd2 <_ZN23Adafruit_BusIO_Register5writeEPhh+0x2a>
    if (_spiregtype == ADDRESSED_OPCODE_BIT0_LOW_TO_WRITE) {
   b4bdc:	f893 e008 	ldrb.w	lr, [r3, #8]
    return _i2cdevice->write(buffer, len, true, addrbuffer, _addrwidth);
   b4be0:	f893 c00d 	ldrb.w	ip, [r3, #13]
    if (_spiregtype == ADDRESSED_OPCODE_BIT0_LOW_TO_WRITE) {
   b4be4:	f1be 0f03 	cmp.w	lr, #3
   b4be8:	d10c      	bne.n	b4c04 <_ZN23Adafruit_BusIO_Register5writeEPhh+0x5c>
      return _spidevice->write(buffer, len, addrbuffer, _addrwidth + 1);
   b4bea:	f10c 0301 	add.w	r3, ip, #1
          (uint8_t)(_address >> 8) & ~0x01; // set bottom bit low to write
   b4bee:	f025 0501 	bic.w	r5, r5, #1
      return _spidevice->write(buffer, len, addrbuffer, _addrwidth + 1);
   b4bf2:	9300      	str	r3, [sp, #0]
      addrbuffer[0] =
   b4bf4:	f88d 500c 	strb.w	r5, [sp, #12]
      addrbuffer[1] = (uint8_t)(_address & 0xFF);
   b4bf8:	f88d 400d 	strb.w	r4, [sp, #13]
      return _spidevice->write(buffer, len, addrbuffer, _addrwidth + 1);
   b4bfc:	ab03      	add	r3, sp, #12
    return _spidevice->write(buffer, len, addrbuffer, _addrwidth);
   b4bfe:	f000 f9a3 	bl	b4f48 <_ZN18Adafruit_SPIDevice5writeEPKhjS1_j>
   b4c02:	e7e6      	b.n	b4bd2 <_ZN23Adafruit_BusIO_Register5writeEPhh+0x2a>
    if (_spiregtype == ADDRBIT8_HIGH_TOREAD) {
   b4c04:	f1be 0f00 	cmp.w	lr, #0
   b4c08:	d109      	bne.n	b4c1e <_ZN23Adafruit_BusIO_Register5writeEPhh+0x76>
      addrbuffer[0] &= ~0x80;
   b4c0a:	f004 047f 	and.w	r4, r4, #127	; 0x7f
      addrbuffer[0] |= 0x80;
   b4c0e:	f88d 400c 	strb.w	r4, [sp, #12]
    return _spidevice->write(buffer, len, addrbuffer, _addrwidth);
   b4c12:	f8cd c000 	str.w	ip, [sp]
   b4c16:	ab03      	add	r3, sp, #12
   b4c18:	463a      	mov	r2, r7
   b4c1a:	4631      	mov	r1, r6
   b4c1c:	e7ef      	b.n	b4bfe <_ZN23Adafruit_BusIO_Register5writeEPhh+0x56>
    if (_spiregtype == ADDRBIT8_HIGH_TOWRITE) {
   b4c1e:	f1be 0f02 	cmp.w	lr, #2
   b4c22:	d102      	bne.n	b4c2a <_ZN23Adafruit_BusIO_Register5writeEPhh+0x82>
      addrbuffer[0] |= 0x80;
   b4c24:	f064 047f 	orn	r4, r4, #127	; 0x7f
   b4c28:	e7f1      	b.n	b4c0e <_ZN23Adafruit_BusIO_Register5writeEPhh+0x66>
    if (_spiregtype == AD8_HIGH_TOREAD_AD7_HIGH_TOINC) {
   b4c2a:	f1be 0f01 	cmp.w	lr, #1
      addrbuffer[0] &= ~0x80;
   b4c2e:	bf01      	itttt	eq
   b4c30:	f89d 300c 	ldrbeq.w	r3, [sp, #12]
   b4c34:	f003 037f 	andeq.w	r3, r3, #127	; 0x7f
      addrbuffer[0] |= 0x40;
   b4c38:	f043 0340 	orreq.w	r3, r3, #64	; 0x40
   b4c3c:	f88d 300c 	strbeq.w	r3, [sp, #12]
   b4c40:	e7e7      	b.n	b4c12 <_ZN23Adafruit_BusIO_Register5writeEPhh+0x6a>

000b4c42 <_ZN23Adafruit_BusIO_Register5writeEmh>:
 *    @param  value Data to write
 *    @param  numbytes How many bytes from 'value' to write
 *    @return True on successful write (only really useful for I2C as SPI is
 * uncheckable)
 */
bool Adafruit_BusIO_Register::write(uint32_t value, uint8_t numbytes) {
   b4c42:	b4f0      	push	{r4, r5, r6, r7}
   b4c44:	460b      	mov	r3, r1
  if (numbytes == 0) {
   b4c46:	b902      	cbnz	r2, b4c4a <_ZN23Adafruit_BusIO_Register5writeEmh+0x8>
    numbytes = _width;
   b4c48:	7b02      	ldrb	r2, [r0, #12]
  }
  if (numbytes > 4) {
   b4c4a:	2a04      	cmp	r2, #4
   b4c4c:	d814      	bhi.n	b4c78 <_ZN23Adafruit_BusIO_Register5writeEmh+0x36>
    return false;
  }

  // store a copy
  _cached = value;
   b4c4e:	f100 050f 	add.w	r5, r0, #15
   b4c52:	6143      	str	r3, [r0, #20]

  for (int i = 0; i < numbytes; i++) {
   b4c54:	1884      	adds	r4, r0, r2
   b4c56:	4629      	mov	r1, r5
   b4c58:	4284      	cmp	r4, r0
   b4c5a:	d009      	beq.n	b4c70 <_ZN23Adafruit_BusIO_Register5writeEmh+0x2e>
    if (_byteorder == LSBFIRST) {
   b4c5c:	7b87      	ldrb	r7, [r0, #14]
      _buffer[i] = value & 0xFF;
   b4c5e:	b2de      	uxtb	r6, r3
    if (_byteorder == LSBFIRST) {
   b4c60:	b927      	cbnz	r7, b4c6c <_ZN23Adafruit_BusIO_Register5writeEmh+0x2a>
      _buffer[i] = value & 0xFF;
   b4c62:	702e      	strb	r6, [r5, #0]
    } else {
      _buffer[numbytes - i - 1] = value & 0xFF;
    }
    value >>= 8;
   b4c64:	0a1b      	lsrs	r3, r3, #8
  for (int i = 0; i < numbytes; i++) {
   b4c66:	3501      	adds	r5, #1
   b4c68:	3c01      	subs	r4, #1
   b4c6a:	e7f5      	b.n	b4c58 <_ZN23Adafruit_BusIO_Register5writeEmh+0x16>
      _buffer[numbytes - i - 1] = value & 0xFF;
   b4c6c:	73a6      	strb	r6, [r4, #14]
   b4c6e:	e7f9      	b.n	b4c64 <_ZN23Adafruit_BusIO_Register5writeEmh+0x22>
  }
  return write(_buffer, numbytes);
   b4c70:	4620      	mov	r0, r4
}
   b4c72:	bcf0      	pop	{r4, r5, r6, r7}
  return write(_buffer, numbytes);
   b4c74:	f7ff bf98 	b.w	b4ba8 <_ZN23Adafruit_BusIO_Register5writeEPhh>
}
   b4c78:	2000      	movs	r0, #0
   b4c7a:	bcf0      	pop	{r4, r5, r6, r7}
   b4c7c:	4770      	bx	lr

000b4c7e <_ZN23Adafruit_BusIO_Register4readEPhh>:
 *    @param  buffer Pointer to data to read into
 *    @param  len Number of bytes to read
 *    @return True on successful write (only really useful for I2C as SPI is
 * uncheckable)
 */
bool Adafruit_BusIO_Register::read(uint8_t *buffer, uint8_t len) {
   b4c7e:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  uint8_t addrbuffer[2] = {(uint8_t)(_address & 0xFF),
   b4c80:	8946      	ldrh	r6, [r0, #10]
                           (uint8_t)(_address >> 8)};
   b4c82:	7a85      	ldrb	r5, [r0, #10]
   b4c84:	f88d 500c 	strb.w	r5, [sp, #12]
bool Adafruit_BusIO_Register::read(uint8_t *buffer, uint8_t len) {
   b4c88:	4604      	mov	r4, r0

  if (_i2cdevice) {
   b4c8a:	6800      	ldr	r0, [r0, #0]
                           (uint8_t)(_address >> 8)};
   b4c8c:	0a36      	lsrs	r6, r6, #8
bool Adafruit_BusIO_Register::read(uint8_t *buffer, uint8_t len) {
   b4c8e:	460b      	mov	r3, r1
                           (uint8_t)(_address >> 8)};
   b4c90:	f88d 600d 	strb.w	r6, [sp, #13]
  if (_i2cdevice) {
   b4c94:	b140      	cbz	r0, b4ca8 <_ZN23Adafruit_BusIO_Register4readEPhh+0x2a>
    return _i2cdevice->write_then_read(addrbuffer, _addrwidth, buffer, len);
   b4c96:	2100      	movs	r1, #0
   b4c98:	e9cd 2100 	strd	r2, r1, [sp]
   b4c9c:	a903      	add	r1, sp, #12
   b4c9e:	7b62      	ldrb	r2, [r4, #13]
   b4ca0:	f000 fa31 	bl	b5106 <_ZN18Adafruit_I2CDevice15write_then_readEPKhjPhjb>
      addrbuffer[0] |= 0x80 | 0x40;
    }
    return _spidevice->write_then_read(addrbuffer, _addrwidth, buffer, len);
  }
  return false;
}
   b4ca4:	b004      	add	sp, #16
   b4ca6:	bd70      	pop	{r4, r5, r6, pc}
  if (_spidevice) {
   b4ca8:	6860      	ldr	r0, [r4, #4]
   b4caa:	2800      	cmp	r0, #0
   b4cac:	d0fa      	beq.n	b4ca4 <_ZN23Adafruit_BusIO_Register4readEPhh+0x26>
    if (_spiregtype == ADDRESSED_OPCODE_BIT0_LOW_TO_WRITE) {
   b4cae:	7a21      	ldrb	r1, [r4, #8]
    return _i2cdevice->write_then_read(addrbuffer, _addrwidth, buffer, len);
   b4cb0:	7b64      	ldrb	r4, [r4, #13]
    if (_spiregtype == ADDRESSED_OPCODE_BIT0_LOW_TO_WRITE) {
   b4cb2:	2903      	cmp	r1, #3
   b4cb4:	d10d      	bne.n	b4cd2 <_ZN23Adafruit_BusIO_Register4readEPhh+0x54>
          (uint8_t)(_address >> 8) | 0x01; // set bottom bit high to read
   b4cb6:	f046 0601 	orr.w	r6, r6, #1
      return _spidevice->write_then_read(addrbuffer, _addrwidth + 1, buffer,
   b4cba:	21ff      	movs	r1, #255	; 0xff
   b4cbc:	e9cd 2100 	strd	r2, r1, [sp]
      addrbuffer[0] =
   b4cc0:	f88d 600c 	strb.w	r6, [sp, #12]
      addrbuffer[1] = (uint8_t)(_address & 0xFF);
   b4cc4:	f88d 500d 	strb.w	r5, [sp, #13]
      return _spidevice->write_then_read(addrbuffer, _addrwidth + 1, buffer,
   b4cc8:	1c62      	adds	r2, r4, #1
    return _spidevice->write_then_read(addrbuffer, _addrwidth, buffer, len);
   b4cca:	a903      	add	r1, sp, #12
   b4ccc:	f000 f95e 	bl	b4f8c <_ZN18Adafruit_SPIDevice15write_then_readEPKhjPhjh>
   b4cd0:	e7e8      	b.n	b4ca4 <_ZN23Adafruit_BusIO_Register4readEPhh+0x26>
    if (_spiregtype == ADDRBIT8_HIGH_TOREAD) {
   b4cd2:	b941      	cbnz	r1, b4ce6 <_ZN23Adafruit_BusIO_Register4readEPhh+0x68>
      addrbuffer[0] |= 0x80;
   b4cd4:	f065 057f 	orn	r5, r5, #127	; 0x7f
      addrbuffer[0] &= ~0x80;
   b4cd8:	f88d 500c 	strb.w	r5, [sp, #12]
    return _spidevice->write_then_read(addrbuffer, _addrwidth, buffer, len);
   b4cdc:	21ff      	movs	r1, #255	; 0xff
   b4cde:	e9cd 2100 	strd	r2, r1, [sp]
   b4ce2:	4622      	mov	r2, r4
   b4ce4:	e7f1      	b.n	b4cca <_ZN23Adafruit_BusIO_Register4readEPhh+0x4c>
    if (_spiregtype == ADDRBIT8_HIGH_TOWRITE) {
   b4ce6:	2902      	cmp	r1, #2
   b4ce8:	d102      	bne.n	b4cf0 <_ZN23Adafruit_BusIO_Register4readEPhh+0x72>
      addrbuffer[0] &= ~0x80;
   b4cea:	f005 057f 	and.w	r5, r5, #127	; 0x7f
   b4cee:	e7f3      	b.n	b4cd8 <_ZN23Adafruit_BusIO_Register4readEPhh+0x5a>
    if (_spiregtype == AD8_HIGH_TOREAD_AD7_HIGH_TOINC) {
   b4cf0:	2901      	cmp	r1, #1
      addrbuffer[0] |= 0x80 | 0x40;
   b4cf2:	bf02      	ittt	eq
   b4cf4:	f89d 100c 	ldrbeq.w	r1, [sp, #12]
   b4cf8:	f061 013f 	orneq	r1, r1, #63	; 0x3f
   b4cfc:	f88d 100c 	strbeq.w	r1, [sp, #12]
   b4d00:	e7ec      	b.n	b4cdc <_ZN23Adafruit_BusIO_Register4readEPhh+0x5e>

000b4d02 <_ZN23Adafruit_BusIO_Register4readEv>:
uint32_t Adafruit_BusIO_Register::read(void) {
   b4d02:	b538      	push	{r3, r4, r5, lr}
  if (!read(_buffer, _width)) {
   b4d04:	f100 050f 	add.w	r5, r0, #15
   b4d08:	7b02      	ldrb	r2, [r0, #12]
   b4d0a:	4629      	mov	r1, r5
uint32_t Adafruit_BusIO_Register::read(void) {
   b4d0c:	4604      	mov	r4, r0
  if (!read(_buffer, _width)) {
   b4d0e:	f7ff ffb6 	bl	b4c7e <_ZN23Adafruit_BusIO_Register4readEPhh>
   b4d12:	b178      	cbz	r0, b4d34 <_ZN23Adafruit_BusIO_Register4readEv+0x32>
   b4d14:	7b22      	ldrb	r2, [r4, #12]
   b4d16:	4629      	mov	r1, r5
   b4d18:	4422      	add	r2, r4
  uint32_t value = 0;
   b4d1a:	2000      	movs	r0, #0
  for (int i = 0; i < _width; i++) {
   b4d1c:	42a2      	cmp	r2, r4
   b4d1e:	d00b      	beq.n	b4d38 <_ZN23Adafruit_BusIO_Register4readEv+0x36>
    value <<= 8;
   b4d20:	0203      	lsls	r3, r0, #8
    if (_byteorder == LSBFIRST) {
   b4d22:	7ba0      	ldrb	r0, [r4, #14]
   b4d24:	b920      	cbnz	r0, b4d30 <_ZN23Adafruit_BusIO_Register4readEv+0x2e>
      value |= _buffer[_width - i - 1];
   b4d26:	7b90      	ldrb	r0, [r2, #14]
      value |= _buffer[i];
   b4d28:	4318      	orrs	r0, r3
  for (int i = 0; i < _width; i++) {
   b4d2a:	3a01      	subs	r2, #1
   b4d2c:	3101      	adds	r1, #1
   b4d2e:	e7f5      	b.n	b4d1c <_ZN23Adafruit_BusIO_Register4readEv+0x1a>
      value |= _buffer[i];
   b4d30:	7808      	ldrb	r0, [r1, #0]
   b4d32:	e7f9      	b.n	b4d28 <_ZN23Adafruit_BusIO_Register4readEv+0x26>
    return -1;
   b4d34:	f04f 30ff 	mov.w	r0, #4294967295
}
   b4d38:	bd38      	pop	{r3, r4, r5, pc}

000b4d3a <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>:
 * touching other bits
 *    @param  reg The Adafruit_BusIO_Register which defines the bus/register
 *    @param  bits The number of bits wide we are slicing
 *    @param  shift The number of bits that our bit-slice is shifted from LSB
 */
Adafruit_BusIO_RegisterBits::Adafruit_BusIO_RegisterBits(
   b4d3a:	b510      	push	{r4, lr}
    Adafruit_BusIO_Register *reg, uint8_t bits, uint8_t shift) {
  _register = reg;
   b4d3c:	6001      	str	r1, [r0, #0]
  _bits = bits;
   b4d3e:	7102      	strb	r2, [r0, #4]
  _shift = shift;
   b4d40:	7143      	strb	r3, [r0, #5]
}
   b4d42:	bd10      	pop	{r4, pc}

000b4d44 <_ZN27Adafruit_BusIO_RegisterBits4readEv>:

/*!
 *    @brief  Read 4 bytes of data from the register
 *    @return  data The 4 bytes to read
 */
uint32_t Adafruit_BusIO_RegisterBits::read(void) {
   b4d44:	b510      	push	{r4, lr}
   b4d46:	4604      	mov	r4, r0
  uint32_t val = _register->read();
   b4d48:	6800      	ldr	r0, [r0, #0]
   b4d4a:	f7ff ffda 	bl	b4d02 <_ZN23Adafruit_BusIO_Register4readEv>
  val >>= _shift;
  return val & ((1 << (_bits)) - 1);
   b4d4e:	7922      	ldrb	r2, [r4, #4]
   b4d50:	2301      	movs	r3, #1
   b4d52:	4093      	lsls	r3, r2
  val >>= _shift;
   b4d54:	7962      	ldrb	r2, [r4, #5]
  return val & ((1 << (_bits)) - 1);
   b4d56:	3b01      	subs	r3, #1
  val >>= _shift;
   b4d58:	40d0      	lsrs	r0, r2
}
   b4d5a:	4018      	ands	r0, r3
   b4d5c:	bd10      	pop	{r4, pc}

000b4d5e <_ZN27Adafruit_BusIO_RegisterBits5writeEm>:
 *    @brief  Write 4 bytes of data to the register
 *    @param  data The 4 bytes to write
 *    @return True on successful write (only really useful for I2C as SPI is
 * uncheckable)
 */
bool Adafruit_BusIO_RegisterBits::write(uint32_t data) {
   b4d5e:	b570      	push	{r4, r5, r6, lr}
   b4d60:	4604      	mov	r4, r0
  uint32_t val = _register->read();
   b4d62:	6800      	ldr	r0, [r0, #0]
bool Adafruit_BusIO_RegisterBits::write(uint32_t data) {
   b4d64:	460e      	mov	r6, r1
  uint32_t val = _register->read();
   b4d66:	f7ff ffcc 	bl	b4d02 <_ZN23Adafruit_BusIO_Register4readEv>

  // mask off the data before writing
  uint32_t mask = (1 << (_bits)) - 1;
   b4d6a:	7923      	ldrb	r3, [r4, #4]
  data &= mask;

  mask <<= _shift;
   b4d6c:	7961      	ldrb	r1, [r4, #5]
  uint32_t mask = (1 << (_bits)) - 1;
   b4d6e:	2201      	movs	r2, #1
   b4d70:	409a      	lsls	r2, r3
   b4d72:	1e53      	subs	r3, r2, #1
  mask <<= _shift;
   b4d74:	fa03 f501 	lsl.w	r5, r3, r1
  val &= ~mask;          // remove the current data at that spot
   b4d78:	ea20 0505 	bic.w	r5, r0, r5
  data &= mask;
   b4d7c:	4033      	ands	r3, r6
  val |= data << _shift; // and add in the new data

  return _register->write(val, _register->width());
   b4d7e:	6820      	ldr	r0, [r4, #0]
  val |= data << _shift; // and add in the new data
   b4d80:	fa03 f101 	lsl.w	r1, r3, r1
  return _register->write(val, _register->width());
   b4d84:	4329      	orrs	r1, r5
   b4d86:	7b02      	ldrb	r2, [r0, #12]
}
   b4d88:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  return _register->write(val, _register->width());
   b4d8c:	f7ff bf59 	b.w	b4c42 <_ZN23Adafruit_BusIO_Register5writeEmh>

000b4d90 <_ZN18Adafruit_SPIDevice8transferEPhj>:
 *    @brief  Transfer (send/receive) a buffer over hard/soft SPI, without
 * transaction management
 *    @param  buffer The buffer to send and receive at the same time
 *    @param  len    The number of bytes to transfer
 */
void Adafruit_SPIDevice::transfer(uint8_t *buffer, size_t len) {
   b4d90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b4d94:	4604      	mov	r4, r0
  //
  // HARDWARE SPI
  //
  if (_spi) {
   b4d96:	6800      	ldr	r0, [r0, #0]
void Adafruit_SPIDevice::transfer(uint8_t *buffer, size_t len) {
   b4d98:	b085      	sub	sp, #20
   b4d9a:	460d      	mov	r5, r1
  if (_spi) {
   b4d9c:	b140      	cbz	r0, b4db0 <_ZN18Adafruit_SPIDevice8transferEPhj+0x20>
#ifdef BUSIO_HAS_HW_SPI
#if defined(SPARK)
    _spi->transfer(buffer, buffer, len, nullptr);
   b4d9e:	2300      	movs	r3, #0
   b4da0:	9300      	str	r3, [sp, #0]
   b4da2:	4613      	mov	r3, r2
   b4da4:	460a      	mov	r2, r1
   b4da6:	f000 ffb7 	bl	b5d18 <_ZN8SPIClass8transferEPKvPvjPFvvE>
        buffer[i] = reply;
      }
    }
  }
  return;
}
   b4daa:	b005      	add	sp, #20
   b4dac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (_dataOrder == SPI_BITORDER_LSBFIRST) {
   b4db0:	7b23      	ldrb	r3, [r4, #12]
  uint8_t bitdelay_us = (1000000 / _freq) / 2;
   b4db2:	68a0      	ldr	r0, [r4, #8]
   b4db4:	4f48      	ldr	r7, [pc, #288]	; (b4ed8 <_ZN18Adafruit_SPIDevice8transferEPhj+0x148>)
   b4db6:	fbb7 f7f0 	udiv	r7, r7, r0
    startbit = 0x80;
   b4dba:	2b00      	cmp	r3, #0
  bool towrite, lastmosi = !(buffer[0] & startbit);
   b4dbc:	780b      	ldrb	r3, [r1, #0]
    startbit = 0x80;
   b4dbe:	bf0c      	ite	eq
   b4dc0:	f04f 0b01 	moveq.w	fp, #1
   b4dc4:	f04f 0b80 	movne.w	fp, #128	; 0x80
  bool towrite, lastmosi = !(buffer[0] & startbit);
   b4dc8:	ea1b 0f03 	tst.w	fp, r3
   b4dcc:	eb01 0302 	add.w	r3, r1, r2
   b4dd0:	bf0c      	ite	eq
   b4dd2:	f04f 0901 	moveq.w	r9, #1
   b4dd6:	f04f 0900 	movne.w	r9, #0
  uint8_t bitdelay_us = (1000000 / _freq) / 2;
   b4dda:	b2ff      	uxtb	r7, r7
  for (size_t i = 0; i < len; i++) {
   b4ddc:	9303      	str	r3, [sp, #12]
   b4dde:	9b03      	ldr	r3, [sp, #12]
   b4de0:	42ab      	cmp	r3, r5
   b4de2:	d0e2      	beq.n	b4daa <_ZN18Adafruit_SPIDevice8transferEPhj+0x1a>
    uint8_t send = buffer[i];
   b4de4:	f895 a000 	ldrb.w	sl, [r5]
    for (uint8_t b = startbit; b != 0;
   b4de8:	465e      	mov	r6, fp
    uint8_t reply = 0;
   b4dea:	f04f 0800 	mov.w	r8, #0
      if (bitdelay_us) {
   b4dee:	b117      	cbz	r7, b4df6 <_ZN18Adafruit_SPIDevice8transferEPhj+0x66>
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   b4df0:	4638      	mov	r0, r7
   b4df2:	f000 fc95 	bl	b5720 <HAL_Delay_Microseconds>
      if (_dataMode == SPI_MODE0 || _dataMode == SPI_MODE2) {
   b4df6:	7b63      	ldrb	r3, [r4, #13]
   b4df8:	f013 0ffd 	tst.w	r3, #253	; 0xfd
   b4dfc:	d141      	bne.n	b4e82 <_ZN18Adafruit_SPIDevice8transferEPhj+0xf2>
        if ((_mosi != -1) && (lastmosi != towrite)) {
   b4dfe:	f994 3010 	ldrsb.w	r3, [r4, #16]
   b4e02:	1c5a      	adds	r2, r3, #1
   b4e04:	d00f      	beq.n	b4e26 <_ZN18Adafruit_SPIDevice8transferEPhj+0x96>
        towrite = send & b;
   b4e06:	ea1a 0106 	ands.w	r1, sl, r6
        if ((_mosi != -1) && (lastmosi != towrite)) {
   b4e0a:	bf14      	ite	ne
   b4e0c:	2301      	movne	r3, #1
   b4e0e:	2300      	moveq	r3, #0
   b4e10:	454b      	cmp	r3, r9
   b4e12:	d008      	beq.n	b4e26 <_ZN18Adafruit_SPIDevice8transferEPhj+0x96>
            *mosiPort |= mosiPinMask;
   b4e14:	6963      	ldr	r3, [r4, #20]
   b4e16:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b4e18:	681a      	ldr	r2, [r3, #0]
          if (towrite)
   b4e1a:	2900      	cmp	r1, #0
   b4e1c:	d02c      	beq.n	b4e78 <_ZN18Adafruit_SPIDevice8transferEPhj+0xe8>
            *mosiPort |= mosiPinMask;
   b4e1e:	4302      	orrs	r2, r0
   b4e20:	601a      	str	r2, [r3, #0]
   b4e22:	f04f 0901 	mov.w	r9, #1
        *clkPort |= clkPinMask; // Clock high
   b4e26:	69a1      	ldr	r1, [r4, #24]
   b4e28:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   b4e2a:	680a      	ldr	r2, [r1, #0]
   b4e2c:	4313      	orrs	r3, r2
   b4e2e:	600b      	str	r3, [r1, #0]
        if (bitdelay_us) {
   b4e30:	b117      	cbz	r7, b4e38 <_ZN18Adafruit_SPIDevice8transferEPhj+0xa8>
   b4e32:	4638      	mov	r0, r7
   b4e34:	f000 fc74 	bl	b5720 <HAL_Delay_Microseconds>
        if (_miso != -1) {
   b4e38:	f994 3011 	ldrsb.w	r3, [r4, #17]
   b4e3c:	3301      	adds	r3, #1
   b4e3e:	d006      	beq.n	b4e4e <_ZN18Adafruit_SPIDevice8transferEPhj+0xbe>
          if (*misoPort & misoPinMask) {
   b4e40:	69e3      	ldr	r3, [r4, #28]
   b4e42:	681a      	ldr	r2, [r3, #0]
   b4e44:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   b4e46:	421a      	tst	r2, r3
            reply |= b;
   b4e48:	bf18      	it	ne
   b4e4a:	ea46 0808 	orrne.w	r8, r6, r8
        *clkPort &= ~clkPinMask; // Clock low
   b4e4e:	69a1      	ldr	r1, [r4, #24]
   b4e50:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   b4e52:	680a      	ldr	r2, [r1, #0]
   b4e54:	ea22 0303 	bic.w	r3, r2, r3
   b4e58:	600b      	str	r3, [r1, #0]
      if (_miso != -1) {
   b4e5a:	f994 3011 	ldrsb.w	r3, [r4, #17]
   b4e5e:	3301      	adds	r3, #1
        buffer[i] = reply;
   b4e60:	bf18      	it	ne
   b4e62:	f885 8000 	strbne.w	r8, [r5]
    for (uint8_t b = startbit; b != 0;
   b4e66:	7b23      	ldrb	r3, [r4, #12]
   b4e68:	2b00      	cmp	r3, #0
   b4e6a:	d132      	bne.n	b4ed2 <_ZN18Adafruit_SPIDevice8transferEPhj+0x142>
   b4e6c:	0076      	lsls	r6, r6, #1
   b4e6e:	b2f6      	uxtb	r6, r6
   b4e70:	2e00      	cmp	r6, #0
   b4e72:	d1bc      	bne.n	b4dee <_ZN18Adafruit_SPIDevice8transferEPhj+0x5e>
  for (size_t i = 0; i < len; i++) {
   b4e74:	3501      	adds	r5, #1
   b4e76:	e7b2      	b.n	b4dde <_ZN18Adafruit_SPIDevice8transferEPhj+0x4e>
            *mosiPort &= ~mosiPinMask;
   b4e78:	ea22 0200 	bic.w	r2, r2, r0
   b4e7c:	601a      	str	r2, [r3, #0]
   b4e7e:	4689      	mov	r9, r1
   b4e80:	e7d1      	b.n	b4e26 <_ZN18Adafruit_SPIDevice8transferEPhj+0x96>
        *clkPort |= clkPinMask; // Clock high
   b4e82:	69a1      	ldr	r1, [r4, #24]
   b4e84:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   b4e86:	680a      	ldr	r2, [r1, #0]
   b4e88:	4313      	orrs	r3, r2
   b4e8a:	600b      	str	r3, [r1, #0]
        if (bitdelay_us) {
   b4e8c:	b117      	cbz	r7, b4e94 <_ZN18Adafruit_SPIDevice8transferEPhj+0x104>
   b4e8e:	4638      	mov	r0, r7
   b4e90:	f000 fc46 	bl	b5720 <HAL_Delay_Microseconds>
        if (_mosi != -1) {
   b4e94:	f994 3010 	ldrsb.w	r3, [r4, #16]
   b4e98:	3301      	adds	r3, #1
   b4e9a:	d008      	beq.n	b4eae <_ZN18Adafruit_SPIDevice8transferEPhj+0x11e>
            *mosiPort |= mosiPinMask;
   b4e9c:	6963      	ldr	r3, [r4, #20]
   b4e9e:	6a61      	ldr	r1, [r4, #36]	; 0x24
   b4ea0:	681a      	ldr	r2, [r3, #0]
          if (send & b)
   b4ea2:	ea1a 0f06 	tst.w	sl, r6
            *mosiPort |= mosiPinMask;
   b4ea6:	bf14      	ite	ne
   b4ea8:	430a      	orrne	r2, r1
            *mosiPort &= ~mosiPinMask;
   b4eaa:	438a      	biceq	r2, r1
   b4eac:	601a      	str	r2, [r3, #0]
        *clkPort &= ~clkPinMask; // Clock low
   b4eae:	69a1      	ldr	r1, [r4, #24]
   b4eb0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   b4eb2:	680a      	ldr	r2, [r1, #0]
   b4eb4:	ea22 0303 	bic.w	r3, r2, r3
   b4eb8:	600b      	str	r3, [r1, #0]
        if (_miso != -1) {
   b4eba:	f994 3011 	ldrsb.w	r3, [r4, #17]
   b4ebe:	3301      	adds	r3, #1
   b4ec0:	d0cb      	beq.n	b4e5a <_ZN18Adafruit_SPIDevice8transferEPhj+0xca>
          if (*misoPort & misoPinMask) {
   b4ec2:	69e3      	ldr	r3, [r4, #28]
   b4ec4:	681a      	ldr	r2, [r3, #0]
   b4ec6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   b4ec8:	421a      	tst	r2, r3
            reply |= b;
   b4eca:	bf18      	it	ne
   b4ecc:	ea46 0808 	orrne.w	r8, r6, r8
   b4ed0:	e7c3      	b.n	b4e5a <_ZN18Adafruit_SPIDevice8transferEPhj+0xca>
    for (uint8_t b = startbit; b != 0;
   b4ed2:	0876      	lsrs	r6, r6, #1
   b4ed4:	e7cc      	b.n	b4e70 <_ZN18Adafruit_SPIDevice8transferEPhj+0xe0>
   b4ed6:	bf00      	nop
   b4ed8:	0007a120 	.word	0x0007a120

000b4edc <_ZN18Adafruit_SPIDevice8transferEh>:
 *    @brief  Transfer (send/receive) one byte over hard/soft SPI, without
 * transaction management
 *    @param  send The byte to send
 *    @return The byte received while transmitting
 */
uint8_t Adafruit_SPIDevice::transfer(uint8_t send) {
   b4edc:	b507      	push	{r0, r1, r2, lr}
  uint8_t data = send;
  transfer(&data, 1);
   b4ede:	2201      	movs	r2, #1
  uint8_t data = send;
   b4ee0:	f88d 1007 	strb.w	r1, [sp, #7]
  transfer(&data, 1);
   b4ee4:	f10d 0107 	add.w	r1, sp, #7
   b4ee8:	f7ff ff52 	bl	b4d90 <_ZN18Adafruit_SPIDevice8transferEPhj>
  return data;
}
   b4eec:	f89d 0007 	ldrb.w	r0, [sp, #7]
   b4ef0:	b003      	add	sp, #12
   b4ef2:	f85d fb04 	ldr.w	pc, [sp], #4

000b4ef6 <_ZN18Adafruit_SPIDevice16beginTransactionEv>:
/*!
 *    @brief  Manually begin a transaction (calls beginTransaction if hardware
 * SPI)
 */
void Adafruit_SPIDevice::beginTransaction(void) {
  if (_spi) {
   b4ef6:	6803      	ldr	r3, [r0, #0]
   b4ef8:	b11b      	cbz	r3, b4f02 <_ZN18Adafruit_SPIDevice16beginTransactionEv+0xc>
#ifdef BUSIO_HAS_HW_SPI
    _spi->beginTransaction(*_spiSetting);
   b4efa:	6841      	ldr	r1, [r0, #4]
   b4efc:	4618      	mov	r0, r3
   b4efe:	f000 be9d 	b.w	b5c3c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
#endif
  }
}
   b4f02:	4770      	bx	lr

000b4f04 <_ZN18Adafruit_SPIDevice14endTransactionEv>:

/*!
 *    @brief  Manually end a transaction (calls endTransaction if hardware SPI)
 */
void Adafruit_SPIDevice::endTransaction(void) {
  if (_spi) {
   b4f04:	6800      	ldr	r0, [r0, #0]
   b4f06:	b108      	cbz	r0, b4f0c <_ZN18Adafruit_SPIDevice14endTransactionEv+0x8>
#ifdef BUSIO_HAS_HW_SPI
    _spi->endTransaction();
   b4f08:	f000 be7e 	b.w	b5c08 <_ZN8SPIClass14endTransactionEv>
#endif
  }
}
   b4f0c:	4770      	bx	lr

000b4f0e <_ZN18Adafruit_SPIDevice13setChipSelectEi>:
/*!
 *    @brief  Assert/Deassert the CS pin if it is defined
 *    @param  value The state the CS is set to
 */
void Adafruit_SPIDevice::setChipSelect(int value) {
  if (_cs != -1) {
   b4f0e:	f990 000e 	ldrsb.w	r0, [r0, #14]
   b4f12:	1c43      	adds	r3, r0, #1
   b4f14:	d003      	beq.n	b4f1e <_ZN18Adafruit_SPIDevice13setChipSelectEi+0x10>
    digitalWrite(_cs, value);
   b4f16:	b2c9      	uxtb	r1, r1
   b4f18:	b280      	uxth	r0, r0
   b4f1a:	f001 bcdf 	b.w	b68dc <digitalWrite>
  }
}
   b4f1e:	4770      	bx	lr

000b4f20 <_ZN18Adafruit_SPIDevice31beginTransactionWithAssertingCSEv>:
 *    @brief  Write a buffer or two to the SPI device, with transaction
 * management.
 *    @brief  Manually begin a transaction (calls beginTransaction if hardware
 *            SPI) with asserting the CS pin
 */
void Adafruit_SPIDevice::beginTransactionWithAssertingCS() {
   b4f20:	b510      	push	{r4, lr}
   b4f22:	4604      	mov	r4, r0
  beginTransaction();
   b4f24:	f7ff ffe7 	bl	b4ef6 <_ZN18Adafruit_SPIDevice16beginTransactionEv>
  setChipSelect(LOW);
   b4f28:	4620      	mov	r0, r4
   b4f2a:	2100      	movs	r1, #0
}
   b4f2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  setChipSelect(LOW);
   b4f30:	f7ff bfed 	b.w	b4f0e <_ZN18Adafruit_SPIDevice13setChipSelectEi>

000b4f34 <_ZN18Adafruit_SPIDevice31endTransactionWithDeassertingCSEv>:

/*!
 *    @brief  Manually end a transaction (calls endTransaction if hardware SPI)
 *            with deasserting the CS pin
 */
void Adafruit_SPIDevice::endTransactionWithDeassertingCS() {
   b4f34:	b510      	push	{r4, lr}
  setChipSelect(HIGH);
   b4f36:	2101      	movs	r1, #1
void Adafruit_SPIDevice::endTransactionWithDeassertingCS() {
   b4f38:	4604      	mov	r4, r0
  setChipSelect(HIGH);
   b4f3a:	f7ff ffe8 	bl	b4f0e <_ZN18Adafruit_SPIDevice13setChipSelectEi>
  endTransaction();
   b4f3e:	4620      	mov	r0, r4
}
   b4f40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  endTransaction();
   b4f44:	f7ff bfde 	b.w	b4f04 <_ZN18Adafruit_SPIDevice14endTransactionEv>

000b4f48 <_ZN18Adafruit_SPIDevice5writeEPKhjS1_j>:
 *    @return Always returns true because there's no way to test success of SPI
 * writes
 */
bool Adafruit_SPIDevice::write(const uint8_t *buffer, size_t len,
                               const uint8_t *prefix_buffer,
                               size_t prefix_len) {
   b4f48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b4f4c:	461c      	mov	r4, r3
   b4f4e:	4606      	mov	r6, r0
   b4f50:	460d      	mov	r5, r1
   b4f52:	4617      	mov	r7, r2
  beginTransactionWithAssertingCS();
   b4f54:	f7ff ffe4 	bl	b4f20 <_ZN18Adafruit_SPIDevice31beginTransactionWithAssertingCSEv>
      _spi->transferBytes(buffer, nullptr, len);
    }
  } else
#endif
  {
    for (size_t i = 0; i < prefix_len; i++) {
   b4f58:	9b06      	ldr	r3, [sp, #24]
   b4f5a:	eb04 0803 	add.w	r8, r4, r3
   b4f5e:	4544      	cmp	r4, r8
   b4f60:	d108      	bne.n	b4f74 <_ZN18Adafruit_SPIDevice5writeEPKhjS1_j+0x2c>
   b4f62:	442f      	add	r7, r5
      transfer(prefix_buffer[i]);
    }
    for (size_t i = 0; i < len; i++) {
   b4f64:	42bd      	cmp	r5, r7
   b4f66:	d00b      	beq.n	b4f80 <_ZN18Adafruit_SPIDevice5writeEPKhjS1_j+0x38>
      transfer(buffer[i]);
   b4f68:	f815 1b01 	ldrb.w	r1, [r5], #1
   b4f6c:	4630      	mov	r0, r6
   b4f6e:	f7ff ffb5 	bl	b4edc <_ZN18Adafruit_SPIDevice8transferEh>
    for (size_t i = 0; i < len; i++) {
   b4f72:	e7f7      	b.n	b4f64 <_ZN18Adafruit_SPIDevice5writeEPKhjS1_j+0x1c>
      transfer(prefix_buffer[i]);
   b4f74:	f814 1b01 	ldrb.w	r1, [r4], #1
   b4f78:	4630      	mov	r0, r6
   b4f7a:	f7ff ffaf 	bl	b4edc <_ZN18Adafruit_SPIDevice8transferEh>
    for (size_t i = 0; i < prefix_len; i++) {
   b4f7e:	e7ee      	b.n	b4f5e <_ZN18Adafruit_SPIDevice5writeEPKhjS1_j+0x16>
    }
  }
  endTransactionWithDeassertingCS();
   b4f80:	4630      	mov	r0, r6
   b4f82:	f7ff ffd7 	bl	b4f34 <_ZN18Adafruit_SPIDevice31endTransactionWithDeassertingCSEv>
  }
  DEBUG_SERIAL.println();
#endif

  return true;
}
   b4f86:	2001      	movs	r0, #1
   b4f88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b4f8c <_ZN18Adafruit_SPIDevice15write_then_readEPKhjPhjh>:
 *    @return Always returns true because there's no way to test success of SPI
 * writes
 */
bool Adafruit_SPIDevice::write_then_read(const uint8_t *write_buffer,
                                         size_t write_len, uint8_t *read_buffer,
                                         size_t read_len, uint8_t sendvalue) {
   b4f8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b4f90:	460d      	mov	r5, r1
   b4f92:	4617      	mov	r7, r2
   b4f94:	f89d 801c 	ldrb.w	r8, [sp, #28]
   b4f98:	4606      	mov	r6, r0
   b4f9a:	461c      	mov	r4, r3
  beginTransactionWithAssertingCS();
   b4f9c:	f7ff ffc0 	bl	b4f20 <_ZN18Adafruit_SPIDevice31beginTransactionWithAssertingCSEv>
      _spi->transferBytes(write_buffer, nullptr, write_len);
    }
  } else
#endif
  {
    for (size_t i = 0; i < write_len; i++) {
   b4fa0:	442f      	add	r7, r5
   b4fa2:	42bd      	cmp	r5, r7
   b4fa4:	d10a      	bne.n	b4fbc <_ZN18Adafruit_SPIDevice15write_then_readEPKhjPhjh+0x30>
   b4fa6:	9b06      	ldr	r3, [sp, #24]
   b4fa8:	18e5      	adds	r5, r4, r3
  }
  DEBUG_SERIAL.println();
#endif

  // do the reading
  for (size_t i = 0; i < read_len; i++) {
   b4faa:	42ac      	cmp	r4, r5
   b4fac:	d00c      	beq.n	b4fc8 <_ZN18Adafruit_SPIDevice15write_then_readEPKhjPhjh+0x3c>
    read_buffer[i] = transfer(sendvalue);
   b4fae:	4641      	mov	r1, r8
   b4fb0:	4630      	mov	r0, r6
   b4fb2:	f7ff ff93 	bl	b4edc <_ZN18Adafruit_SPIDevice8transferEh>
   b4fb6:	f804 0b01 	strb.w	r0, [r4], #1
  for (size_t i = 0; i < read_len; i++) {
   b4fba:	e7f6      	b.n	b4faa <_ZN18Adafruit_SPIDevice15write_then_readEPKhjPhjh+0x1e>
      transfer(write_buffer[i]);
   b4fbc:	f815 1b01 	ldrb.w	r1, [r5], #1
   b4fc0:	4630      	mov	r0, r6
   b4fc2:	f7ff ff8b 	bl	b4edc <_ZN18Adafruit_SPIDevice8transferEh>
    for (size_t i = 0; i < write_len; i++) {
   b4fc6:	e7ec      	b.n	b4fa2 <_ZN18Adafruit_SPIDevice15write_then_readEPKhjPhjh+0x16>
    }
  }
  DEBUG_SERIAL.println();
#endif

  endTransactionWithDeassertingCS();
   b4fc8:	4630      	mov	r0, r6
   b4fca:	f7ff ffb3 	bl	b4f34 <_ZN18Adafruit_SPIDevice31endTransactionWithDeassertingCSEv>

  return true;
}
   b4fce:	2001      	movs	r0, #1
   b4fd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b4fd4 <_ZN18Adafruit_I2CDeviceC1EhP7TwoWire>:
 *    @param  addr The 7-bit I2C address for the device
 *    @param  theWire The I2C bus to use, defaults to &Wire
 */
Adafruit_I2CDevice::Adafruit_I2CDevice(uint8_t addr, TwoWire *theWire) {
  _addr = addr;
  _wire = theWire;
   b4fd4:	6042      	str	r2, [r0, #4]
  _begun = false;
   b4fd6:	2200      	movs	r2, #0
   b4fd8:	7202      	strb	r2, [r0, #8]
#ifdef ARDUINO_ARCH_SAMD
  _maxBufferSize = 250; // as defined in Wire.h's RingBuffer
#elif defined(ESP32)
  _maxBufferSize = I2C_BUFFER_LENGTH;
#else
  _maxBufferSize = 32;
   b4fda:	2220      	movs	r2, #32
  _addr = addr;
   b4fdc:	7001      	strb	r1, [r0, #0]
  _maxBufferSize = 32;
   b4fde:	60c2      	str	r2, [r0, #12]
#endif
}
   b4fe0:	4770      	bx	lr

000b4fe2 <_ZN18Adafruit_I2CDevice8detectedEv>:
/*!
 *    @brief  Scans I2C for the address - note will give a false-positive
 *    if there's no pullups on I2C
 *    @return True if I2C initialized and a device with the addr found
 */
bool Adafruit_I2CDevice::detected(void) {
   b4fe2:	b510      	push	{r4, lr}
  // Init I2C if not done yet
  if (!_begun && !begin()) {
   b4fe4:	7a03      	ldrb	r3, [r0, #8]
bool Adafruit_I2CDevice::detected(void) {
   b4fe6:	4604      	mov	r4, r0
  if (!_begun && !begin()) {
   b4fe8:	b153      	cbz	r3, b5000 <_ZN18Adafruit_I2CDevice8detectedEv+0x1e>
    return false;
  }

  // A basic scanner, see if it ACK's
  _wire->beginTransmission(_addr);
   b4fea:	7821      	ldrb	r1, [r4, #0]
   b4fec:	6860      	ldr	r0, [r4, #4]
   b4fee:	f001 fb3c 	bl	b666a <_ZN7TwoWire17beginTransmissionEh>
  if (_wire->endTransmission() == 0) {
   b4ff2:	6860      	ldr	r0, [r4, #4]
   b4ff4:	f001 fb41 	bl	b667a <_ZN7TwoWire15endTransmissionEv>
   b4ff8:	fab0 f080 	clz	r0, r0
   b4ffc:	0940      	lsrs	r0, r0, #5
  }
#ifdef DEBUG_SERIAL
  DEBUG_SERIAL.println(F("Not detected"));
#endif
  return false;
}
   b4ffe:	bd10      	pop	{r4, pc}
  if (!_begun && !begin()) {
   b5000:	2101      	movs	r1, #1
   b5002:	f000 f803 	bl	b500c <_ZN18Adafruit_I2CDevice5beginEb>
   b5006:	2800      	cmp	r0, #0
   b5008:	d1ef      	bne.n	b4fea <_ZN18Adafruit_I2CDevice8detectedEv+0x8>
   b500a:	e7f8      	b.n	b4ffe <_ZN18Adafruit_I2CDevice8detectedEv+0x1c>

000b500c <_ZN18Adafruit_I2CDevice5beginEb>:
bool Adafruit_I2CDevice::begin(bool addr_detect) {
   b500c:	b538      	push	{r3, r4, r5, lr}
   b500e:	4604      	mov	r4, r0
  _wire->begin();
   b5010:	6840      	ldr	r0, [r0, #4]
bool Adafruit_I2CDevice::begin(bool addr_detect) {
   b5012:	460d      	mov	r5, r1
  _wire->begin();
   b5014:	f001 fafa 	bl	b660c <_ZN7TwoWire5beginEv>
  _begun = true;
   b5018:	2001      	movs	r0, #1
   b501a:	7220      	strb	r0, [r4, #8]
  if (addr_detect) {
   b501c:	b125      	cbz	r5, b5028 <_ZN18Adafruit_I2CDevice5beginEb+0x1c>
    return detected();
   b501e:	4620      	mov	r0, r4
}
   b5020:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return detected();
   b5024:	f7ff bfdd 	b.w	b4fe2 <_ZN18Adafruit_I2CDevice8detectedEv>
}
   b5028:	bd38      	pop	{r3, r4, r5, pc}

000b502a <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>:
 *    @param  stop Whether to send an I2C STOP signal on write
 *    @return True if write was successful, otherwise false.
 */
bool Adafruit_I2CDevice::write(const uint8_t *buffer, size_t len, bool stop,
                               const uint8_t *prefix_buffer,
                               size_t prefix_len) {
   b502a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b502e:	e9dd 9608 	ldrd	r9, r6, [sp, #32]
   b5032:	461f      	mov	r7, r3
  if ((len + prefix_len) > maxBufferSize()) {
   b5034:	68c3      	ldr	r3, [r0, #12]
                               size_t prefix_len) {
   b5036:	4615      	mov	r5, r2
  if ((len + prefix_len) > maxBufferSize()) {
   b5038:	4432      	add	r2, r6
   b503a:	429a      	cmp	r2, r3
                               size_t prefix_len) {
   b503c:	4604      	mov	r4, r0
   b503e:	4688      	mov	r8, r1
  if ((len + prefix_len) > maxBufferSize()) {
   b5040:	d902      	bls.n	b5048 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x1e>
    // we will need to find out if some platforms have larger
    // I2C buffer sizes :/
#ifdef DEBUG_SERIAL
    DEBUG_SERIAL.println(F("\tI2CDevice could not write such a large buffer"));
#endif
    return false;
   b5042:	2000      	movs	r0, #0
#ifdef DEBUG_SERIAL
    DEBUG_SERIAL.println("\tFailed to send!");
#endif
    return false;
  }
}
   b5044:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  _wire->beginTransmission(_addr);
   b5048:	7801      	ldrb	r1, [r0, #0]
   b504a:	6840      	ldr	r0, [r0, #4]
   b504c:	f001 fb0d 	bl	b666a <_ZN7TwoWire17beginTransmissionEh>
  if ((prefix_len != 0) && (prefix_buffer != nullptr)) {
   b5050:	b97e      	cbnz	r6, b5072 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x48>
  if (_wire->write(buffer, len) != len) {
   b5052:	6860      	ldr	r0, [r4, #4]
   b5054:	6803      	ldr	r3, [r0, #0]
   b5056:	462a      	mov	r2, r5
   b5058:	68db      	ldr	r3, [r3, #12]
   b505a:	4641      	mov	r1, r8
   b505c:	4798      	blx	r3
   b505e:	4285      	cmp	r5, r0
   b5060:	d1ef      	bne.n	b5042 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x18>
  if (_wire->endTransmission(stop) == 0) {
   b5062:	6860      	ldr	r0, [r4, #4]
   b5064:	4639      	mov	r1, r7
   b5066:	f001 fb04 	bl	b6672 <_ZN7TwoWire15endTransmissionEh>
   b506a:	fab0 f080 	clz	r0, r0
   b506e:	0940      	lsrs	r0, r0, #5
   b5070:	e7e8      	b.n	b5044 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x1a>
  if ((prefix_len != 0) && (prefix_buffer != nullptr)) {
   b5072:	f1b9 0f00 	cmp.w	r9, #0
   b5076:	d0ec      	beq.n	b5052 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x28>
    if (_wire->write(prefix_buffer, prefix_len) != prefix_len) {
   b5078:	6860      	ldr	r0, [r4, #4]
   b507a:	6803      	ldr	r3, [r0, #0]
   b507c:	4632      	mov	r2, r6
   b507e:	68db      	ldr	r3, [r3, #12]
   b5080:	4649      	mov	r1, r9
   b5082:	4798      	blx	r3
   b5084:	4286      	cmp	r6, r0
   b5086:	d1dc      	bne.n	b5042 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x18>
   b5088:	e7e3      	b.n	b5052 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x28>

000b508a <_ZN18Adafruit_I2CDevice5_readEPhjb>:
    pos += read_len;
  }
  return true;
}

bool Adafruit_I2CDevice::_read(uint8_t *buffer, size_t len, bool stop) {
   b508a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b508e:	4615      	mov	r5, r2
   b5090:	4604      	mov	r4, r0
   b5092:	460e      	mov	r6, r1
#if defined(TinyWireM_h)
  size_t recv = _wire->requestFrom((uint8_t)_addr, (uint8_t)len);
#elif defined(ARDUINO_ARCH_MEGAAVR)
  size_t recv = _wire->requestFrom(_addr, len, stop);
#else
  size_t recv = _wire->requestFrom((uint8_t)_addr, (uint8_t)len, (uint8_t)stop);
   b5094:	b2d2      	uxtb	r2, r2
   b5096:	7801      	ldrb	r1, [r0, #0]
   b5098:	6840      	ldr	r0, [r0, #4]
   b509a:	f001 fad4 	bl	b6646 <_ZN7TwoWire11requestFromEhjh>
#endif

  if (recv != len) {
   b509e:	4285      	cmp	r5, r0
   b50a0:	d10d      	bne.n	b50be <_ZN18Adafruit_I2CDevice5_readEPhjb+0x34>
   b50a2:	2700      	movs	r7, #0
    DEBUG_SERIAL.println(recv);
#endif
    return false;
  }

  for (uint16_t i = 0; i < len; i++) {
   b50a4:	fa1f f887 	uxth.w	r8, r7
   b50a8:	45a8      	cmp	r8, r5
   b50aa:	f107 0701 	add.w	r7, r7, #1
   b50ae:	d209      	bcs.n	b50c4 <_ZN18Adafruit_I2CDevice5_readEPhjb+0x3a>
    buffer[i] = _wire->read();
   b50b0:	6860      	ldr	r0, [r4, #4]
   b50b2:	6803      	ldr	r3, [r0, #0]
   b50b4:	695b      	ldr	r3, [r3, #20]
   b50b6:	4798      	blx	r3
   b50b8:	f806 0008 	strb.w	r0, [r6, r8]
  for (uint16_t i = 0; i < len; i++) {
   b50bc:	e7f2      	b.n	b50a4 <_ZN18Adafruit_I2CDevice5_readEPhjb+0x1a>
    return false;
   b50be:	2000      	movs	r0, #0
  }
  DEBUG_SERIAL.println();
#endif

  return true;
}
   b50c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b50c4:	2001      	movs	r0, #1
   b50c6:	e7fb      	b.n	b50c0 <_ZN18Adafruit_I2CDevice5_readEPhjb+0x36>

000b50c8 <_ZN18Adafruit_I2CDevice4readEPhjb>:
bool Adafruit_I2CDevice::read(uint8_t *buffer, size_t len, bool stop) {
   b50c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b50cc:	4607      	mov	r7, r0
   b50ce:	4688      	mov	r8, r1
   b50d0:	4616      	mov	r6, r2
   b50d2:	4699      	mov	r9, r3
  size_t pos = 0;
   b50d4:	2500      	movs	r5, #0
  while (pos < len) {
   b50d6:	42b5      	cmp	r5, r6
   b50d8:	d212      	bcs.n	b5100 <_ZN18Adafruit_I2CDevice4readEPhjb+0x38>
                       bool stop = false);
  bool setSpeed(uint32_t desiredclk);

  /*!   @brief  How many bytes we can read in a transaction
   *    @return The size of the Wire receive/transmit buffer */
  size_t maxBufferSize() { return _maxBufferSize; }
   b50da:	68fa      	ldr	r2, [r7, #12]
        ((len - pos) > maxBufferSize()) ? maxBufferSize() : (len - pos);
   b50dc:	1b74      	subs	r4, r6, r5
   b50de:	4294      	cmp	r4, r2
   b50e0:	bf28      	it	cs
   b50e2:	4614      	movcs	r4, r2
    bool read_stop = (pos < (len - read_len)) ? false : stop;
   b50e4:	1b33      	subs	r3, r6, r4
    if (!_read(buffer + pos, read_len, read_stop))
   b50e6:	42ab      	cmp	r3, r5
   b50e8:	bf94      	ite	ls
   b50ea:	464b      	movls	r3, r9
   b50ec:	2300      	movhi	r3, #0
   b50ee:	4622      	mov	r2, r4
   b50f0:	eb08 0105 	add.w	r1, r8, r5
   b50f4:	4638      	mov	r0, r7
   b50f6:	f7ff ffc8 	bl	b508a <_ZN18Adafruit_I2CDevice5_readEPhjb>
   b50fa:	b110      	cbz	r0, b5102 <_ZN18Adafruit_I2CDevice4readEPhjb+0x3a>
    pos += read_len;
   b50fc:	4425      	add	r5, r4
  while (pos < len) {
   b50fe:	e7ea      	b.n	b50d6 <_ZN18Adafruit_I2CDevice4readEPhjb+0xe>
  return true;
   b5100:	2001      	movs	r0, #1
}
   b5102:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000b5106 <_ZN18Adafruit_I2CDevice15write_then_readEPKhjPhjb>:
 *    @param  stop Whether to send an I2C STOP signal between the write and read
 *    @return True if write & read was successful, otherwise false.
 */
bool Adafruit_I2CDevice::write_then_read(const uint8_t *write_buffer,
                                         size_t write_len, uint8_t *read_buffer,
                                         size_t read_len, bool stop) {
   b5106:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b5108:	461d      	mov	r5, r3
  if (!write(write_buffer, write_len, stop)) {
   b510a:	2300      	movs	r3, #0
   b510c:	e9cd 3300 	strd	r3, r3, [sp]
   b5110:	f89d 301c 	ldrb.w	r3, [sp, #28]
                                         size_t read_len, bool stop) {
   b5114:	9e06      	ldr	r6, [sp, #24]
   b5116:	4604      	mov	r4, r0
  if (!write(write_buffer, write_len, stop)) {
   b5118:	f7ff ff87 	bl	b502a <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>
   b511c:	b140      	cbz	r0, b5130 <_ZN18Adafruit_I2CDevice15write_then_readEPKhjPhjb+0x2a>
    return false;
  }

  return read(read_buffer, read_len);
   b511e:	2301      	movs	r3, #1
   b5120:	4632      	mov	r2, r6
   b5122:	4629      	mov	r1, r5
   b5124:	4620      	mov	r0, r4
}
   b5126:	b002      	add	sp, #8
   b5128:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  return read(read_buffer, read_len);
   b512c:	f7ff bfcc 	b.w	b50c8 <_ZN18Adafruit_I2CDevice4readEPhjb>
}
   b5130:	b002      	add	sp, #8
   b5132:	bd70      	pop	{r4, r5, r6, pc}

000b5134 <_ZN15Adafruit_AS7341C1Ev>:

/**
 * @brief Construct a new Adafruit_AS7341::Adafruit_AS7341 object
 *
 */
Adafruit_AS7341::Adafruit_AS7341(void) {}
   b5134:	4a02      	ldr	r2, [pc, #8]	; (b5140 <_ZN15Adafruit_AS7341C1Ev+0xc>)
   b5136:	6002      	str	r2, [r0, #0]
   b5138:	2200      	movs	r2, #0
   b513a:	7102      	strb	r2, [r0, #4]
   b513c:	6082      	str	r2, [r0, #8]
   b513e:	4770      	bx	lr
   b5140:	000b7680 	.word	0x000b7680

000b5144 <_ZN15Adafruit_AS73415beginEhP7TwoWirel>:
 *    @param  sensor_id
 *            The unique ID to differentiate the sensors from others
 *    @return True if initialization was successful, otherwise false.
 */
bool Adafruit_AS7341::begin(uint8_t i2c_address, TwoWire *wire,
                            int32_t sensor_id) {
   b5144:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b5148:	4604      	mov	r4, r0
  if (i2c_dev) {
   b514a:	6880      	ldr	r0, [r0, #8]
                            int32_t sensor_id) {
   b514c:	460f      	mov	r7, r1
   b514e:	4690      	mov	r8, r2
   b5150:	461e      	mov	r6, r3
  if (i2c_dev) {
   b5152:	b110      	cbz	r0, b515a <_ZN15Adafruit_AS73415beginEhP7TwoWirel+0x16>
    delete i2c_dev; // remove old interface
   b5154:	2110      	movs	r1, #16
   b5156:	f7fe ffa2 	bl	b409e <_ZdlPvj>
  }

  i2c_dev = new Adafruit_I2CDevice(i2c_address, wire);
   b515a:	2010      	movs	r0, #16
   b515c:	f7fe ff9b 	bl	b4096 <_Znwj>
   b5160:	4605      	mov	r5, r0
   b5162:	b118      	cbz	r0, b516c <_ZN15Adafruit_AS73415beginEhP7TwoWirel+0x28>
   b5164:	4642      	mov	r2, r8
   b5166:	4639      	mov	r1, r7
   b5168:	f7ff ff34 	bl	b4fd4 <_ZN18Adafruit_I2CDeviceC1EhP7TwoWire>
   b516c:	60a5      	str	r5, [r4, #8]

  if (!i2c_dev->begin()) {
   b516e:	2101      	movs	r1, #1
   b5170:	4628      	mov	r0, r5
   b5172:	f7ff ff4b 	bl	b500c <_ZN18Adafruit_I2CDevice5beginEb>
   b5176:	b130      	cbz	r0, b5186 <_ZN15Adafruit_AS73415beginEhP7TwoWirel+0x42>
    return false;
  }

  return _init(sensor_id);
   b5178:	6823      	ldr	r3, [r4, #0]
   b517a:	4631      	mov	r1, r6
   b517c:	4620      	mov	r0, r4
   b517e:	681b      	ldr	r3, [r3, #0]
}
   b5180:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  return _init(sensor_id);
   b5184:	4718      	bx	r3
}
   b5186:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b518a <_ZN15Adafruit_AS734111powerEnableEb>:
/**
 * @brief Sets the power state of the sensor
 *
 * @param enable_power true: on false: off
 */
void Adafruit_AS7341::powerEnable(bool enable_power) {
   b518a:	b570      	push	{r4, r5, r6, lr}
  Adafruit_BusIO_Register enable_reg =
      Adafruit_BusIO_Register(i2c_dev, AS7341_ENABLE);
   b518c:	2501      	movs	r5, #1
void Adafruit_AS7341::powerEnable(bool enable_power) {
   b518e:	b08a      	sub	sp, #40	; 0x28
      Adafruit_BusIO_Register(i2c_dev, AS7341_ENABLE);
   b5190:	2600      	movs	r6, #0
   b5192:	e9cd 6500 	strd	r6, r5, [sp]
void Adafruit_AS7341::powerEnable(bool enable_power) {
   b5196:	460c      	mov	r4, r1
      Adafruit_BusIO_Register(i2c_dev, AS7341_ENABLE);
   b5198:	462b      	mov	r3, r5
   b519a:	6881      	ldr	r1, [r0, #8]
   b519c:	2280      	movs	r2, #128	; 0x80
   b519e:	a804      	add	r0, sp, #16
   b51a0:	f7ff fcf4 	bl	b4b8c <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>
  Adafruit_BusIO_RegisterBits pon_en =
      Adafruit_BusIO_RegisterBits(&enable_reg, 1, 0);
   b51a4:	4633      	mov	r3, r6
   b51a6:	462a      	mov	r2, r5
   b51a8:	a904      	add	r1, sp, #16
   b51aa:	a802      	add	r0, sp, #8
   b51ac:	f7ff fdc5 	bl	b4d3a <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>
  pon_en.write(enable_power);
   b51b0:	4621      	mov	r1, r4
   b51b2:	a802      	add	r0, sp, #8
   b51b4:	f7ff fdd3 	bl	b4d5e <_ZN27Adafruit_BusIO_RegisterBits5writeEm>
}
   b51b8:	b00a      	add	sp, #40	; 0x28
   b51ba:	bd70      	pop	{r4, r5, r6, pc}

000b51bc <_ZN15Adafruit_AS73415_initEl>:
bool Adafruit_AS7341::_init(int32_t sensor_id) {
   b51bc:	b570      	push	{r4, r5, r6, lr}
      Adafruit_BusIO_Register(i2c_dev, AS7341_WHOAMI);
   b51be:	2501      	movs	r5, #1
bool Adafruit_AS7341::_init(int32_t sensor_id) {
   b51c0:	b088      	sub	sp, #32
      Adafruit_BusIO_Register(i2c_dev, AS7341_WHOAMI);
   b51c2:	2400      	movs	r4, #0
   b51c4:	e9cd 4500 	strd	r4, r5, [sp]
   b51c8:	462b      	mov	r3, r5
   b51ca:	6881      	ldr	r1, [r0, #8]
   b51cc:	2292      	movs	r2, #146	; 0x92
bool Adafruit_AS7341::_init(int32_t sensor_id) {
   b51ce:	4606      	mov	r6, r0
      Adafruit_BusIO_Register(i2c_dev, AS7341_WHOAMI);
   b51d0:	a802      	add	r0, sp, #8
   b51d2:	f7ff fcdb 	bl	b4b8c <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>
  if (chip_id.read() & 0xFC != AS7341_CHIP_ID << 2) {
   b51d6:	a802      	add	r0, sp, #8
   b51d8:	f7ff fd93 	bl	b4d02 <_ZN23Adafruit_BusIO_Register4readEv>
   b51dc:	07c3      	lsls	r3, r0, #31
   b51de:	d406      	bmi.n	b51ee <_ZN15Adafruit_AS73415_initEl+0x32>
  powerEnable(true);
   b51e0:	4630      	mov	r0, r6
   b51e2:	4629      	mov	r1, r5
   b51e4:	f7ff ffd1 	bl	b518a <_ZN15Adafruit_AS734111powerEnableEb>
  return true;
   b51e8:	4628      	mov	r0, r5
}
   b51ea:	b008      	add	sp, #32
   b51ec:	bd70      	pop	{r4, r5, r6, pc}
    return false;
   b51ee:	4620      	mov	r0, r4
   b51f0:	e7fb      	b.n	b51ea <_ZN15Adafruit_AS73415_initEl+0x2e>

000b51f2 <_ZN15Adafruit_AS734125enableSpectralMeasurementEb>:
 * @brief Enables measurement of spectral data
 *
 * @param enable_measurement true: enabled false: disabled
 * @return true: success false: failure
 */
bool Adafruit_AS7341::enableSpectralMeasurement(bool enable_measurement) {
   b51f2:	b510      	push	{r4, lr}

  Adafruit_BusIO_Register enable_reg =
      Adafruit_BusIO_Register(i2c_dev, AS7341_ENABLE);
   b51f4:	2301      	movs	r3, #1
bool Adafruit_AS7341::enableSpectralMeasurement(bool enable_measurement) {
   b51f6:	b08a      	sub	sp, #40	; 0x28
      Adafruit_BusIO_Register(i2c_dev, AS7341_ENABLE);
   b51f8:	2200      	movs	r2, #0
   b51fa:	e9cd 2300 	strd	r2, r3, [sp]
bool Adafruit_AS7341::enableSpectralMeasurement(bool enable_measurement) {
   b51fe:	460c      	mov	r4, r1
      Adafruit_BusIO_Register(i2c_dev, AS7341_ENABLE);
   b5200:	2280      	movs	r2, #128	; 0x80
   b5202:	6881      	ldr	r1, [r0, #8]
   b5204:	a804      	add	r0, sp, #16
   b5206:	f7ff fcc1 	bl	b4b8c <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>

  Adafruit_BusIO_RegisterBits spec_enable_bit =
      Adafruit_BusIO_RegisterBits(&enable_reg, 1, 1);
   b520a:	2301      	movs	r3, #1
   b520c:	461a      	mov	r2, r3
   b520e:	a904      	add	r1, sp, #16
   b5210:	a802      	add	r0, sp, #8
   b5212:	f7ff fd92 	bl	b4d3a <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>
  return spec_enable_bit.write(enable_measurement);
   b5216:	4621      	mov	r1, r4
   b5218:	a802      	add	r0, sp, #8
   b521a:	f7ff fda0 	bl	b4d5e <_ZN27Adafruit_BusIO_RegisterBits5writeEm>
}
   b521e:	b00a      	add	sp, #40	; 0x28
   b5220:	bd10      	pop	{r4, pc}

000b5222 <_ZN15Adafruit_AS734110enableSMUXEv>:

bool Adafruit_AS7341::enableSMUX(void) {
   b5222:	b530      	push	{r4, r5, lr}

  Adafruit_BusIO_Register enable_reg =
      Adafruit_BusIO_Register(i2c_dev, AS7341_ENABLE);
   b5224:	2501      	movs	r5, #1
bool Adafruit_AS7341::enableSMUX(void) {
   b5226:	b08b      	sub	sp, #44	; 0x2c
      Adafruit_BusIO_Register(i2c_dev, AS7341_ENABLE);
   b5228:	2400      	movs	r4, #0
   b522a:	e9cd 4500 	strd	r4, r5, [sp]
   b522e:	462b      	mov	r3, r5
   b5230:	6881      	ldr	r1, [r0, #8]
   b5232:	2280      	movs	r2, #128	; 0x80
   b5234:	a804      	add	r0, sp, #16
   b5236:	f7ff fca9 	bl	b4b8c <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>
  Adafruit_BusIO_RegisterBits smux_enable_bit =
      Adafruit_BusIO_RegisterBits(&enable_reg, 1, 4);
   b523a:	462a      	mov	r2, r5
   b523c:	2304      	movs	r3, #4
   b523e:	a904      	add	r1, sp, #16
   b5240:	a802      	add	r0, sp, #8
   b5242:	f7ff fd7a 	bl	b4d3a <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>
  bool success = smux_enable_bit.write(true);
   b5246:	4629      	mov	r1, r5
   b5248:	a802      	add	r0, sp, #8
   b524a:	f7ff fd88 	bl	b4d5e <_ZN27Adafruit_BusIO_RegisterBits5writeEm>
   b524e:	4605      	mov	r5, r0

  int timeOut = 1000; // Arbitrary value, but if it takes 1000 milliseconds then
                      // something is wrong
  int count = 0;
  while (smux_enable_bit.read() && count < timeOut) {
   b5250:	a802      	add	r0, sp, #8
   b5252:	f7ff fd77 	bl	b4d44 <_ZN27Adafruit_BusIO_RegisterBits4readEv>
   b5256:	b138      	cbz	r0, b5268 <_ZN15Adafruit_AS734110enableSMUXEv+0x46>
   b5258:	f5b4 7f7a 	cmp.w	r4, #1000	; 0x3e8
   b525c:	d00b      	beq.n	b5276 <_ZN15Adafruit_AS734110enableSMUXEv+0x54>
    delay(1);
   b525e:	2001      	movs	r0, #1
   b5260:	f000 ff6e 	bl	b6140 <delay>
    count++;
   b5264:	3401      	adds	r4, #1
  while (smux_enable_bit.read() && count < timeOut) {
   b5266:	e7f3      	b.n	b5250 <_ZN15Adafruit_AS734110enableSMUXEv+0x2e>
  }
  if (count >= timeOut)
    return false;
   b5268:	f5b4 7f7a 	cmp.w	r4, #1000	; 0x3e8
   b526c:	bf08      	it	eq
   b526e:	2500      	moveq	r5, #0
  else
    return success;
}
   b5270:	4628      	mov	r0, r5
   b5272:	b00b      	add	sp, #44	; 0x2c
   b5274:	bd30      	pop	{r4, r5, pc}
    return false;
   b5276:	2500      	movs	r5, #0
   b5278:	e7fa      	b.n	b5270 <_ZN15Adafruit_AS734110enableSMUXEv+0x4e>

000b527a <_ZN15Adafruit_AS734114setSMUXCommandE17as7341_smux_cmd_t>:
      Adafruit_BusIO_RegisterBits(&gpio2_reg, 1, 1);

  return gpio_output_value_bit.write(gpio_high);
}

bool Adafruit_AS7341::setSMUXCommand(as7341_smux_cmd_t command) {
   b527a:	b510      	push	{r4, lr}
  Adafruit_BusIO_Register cfg6_reg =
      Adafruit_BusIO_Register(i2c_dev, AS7341_CFG6);
   b527c:	2301      	movs	r3, #1
bool Adafruit_AS7341::setSMUXCommand(as7341_smux_cmd_t command) {
   b527e:	b08a      	sub	sp, #40	; 0x28
      Adafruit_BusIO_Register(i2c_dev, AS7341_CFG6);
   b5280:	2200      	movs	r2, #0
   b5282:	e9cd 2300 	strd	r2, r3, [sp]
bool Adafruit_AS7341::setSMUXCommand(as7341_smux_cmd_t command) {
   b5286:	460c      	mov	r4, r1
      Adafruit_BusIO_Register(i2c_dev, AS7341_CFG6);
   b5288:	22af      	movs	r2, #175	; 0xaf
   b528a:	6881      	ldr	r1, [r0, #8]
   b528c:	a804      	add	r0, sp, #16
   b528e:	f7ff fc7d 	bl	b4b8c <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>
  Adafruit_BusIO_RegisterBits smux_command_bits =
      Adafruit_BusIO_RegisterBits(&cfg6_reg, 2, 3);
   b5292:	2303      	movs	r3, #3
   b5294:	2202      	movs	r2, #2
   b5296:	a904      	add	r1, sp, #16
   b5298:	a802      	add	r0, sp, #8
   b529a:	f7ff fd4e 	bl	b4d3a <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>

  return smux_command_bits.write(command);
   b529e:	4621      	mov	r1, r4
   b52a0:	a802      	add	r0, sp, #8
   b52a2:	f7ff fd5c 	bl	b4d5e <_ZN27Adafruit_BusIO_RegisterBits5writeEm>
}
   b52a6:	b00a      	add	sp, #40	; 0x28
   b52a8:	bd10      	pop	{r4, pc}

000b52aa <_ZN15Adafruit_AS734114getIsDataReadyEv>:
/**
 * @brief
 *
 * @return true: success false: failure
 */
bool Adafruit_AS7341::getIsDataReady() {
   b52aa:	b510      	push	{r4, lr}
  Adafruit_BusIO_Register status2_reg =
      Adafruit_BusIO_Register(i2c_dev, AS7341_STATUS2);
   b52ac:	2300      	movs	r3, #0
bool Adafruit_AS7341::getIsDataReady() {
   b52ae:	b08a      	sub	sp, #40	; 0x28
      Adafruit_BusIO_Register(i2c_dev, AS7341_STATUS2);
   b52b0:	2401      	movs	r4, #1
   b52b2:	e9cd 3400 	strd	r3, r4, [sp]
   b52b6:	22a3      	movs	r2, #163	; 0xa3
   b52b8:	6881      	ldr	r1, [r0, #8]
   b52ba:	4623      	mov	r3, r4
   b52bc:	a804      	add	r0, sp, #16
   b52be:	f7ff fc65 	bl	b4b8c <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>
  Adafruit_BusIO_RegisterBits avalid_bit =
      Adafruit_BusIO_RegisterBits(&status2_reg, 1, 6);
   b52c2:	2306      	movs	r3, #6
   b52c4:	4622      	mov	r2, r4
   b52c6:	a904      	add	r1, sp, #16
   b52c8:	a802      	add	r0, sp, #8
   b52ca:	f7ff fd36 	bl	b4d3a <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>

  return avalid_bit.read();
   b52ce:	a802      	add	r0, sp, #8
   b52d0:	f7ff fd38 	bl	b4d44 <_ZN27Adafruit_BusIO_RegisterBits4readEv>
}
   b52d4:	3800      	subs	r0, #0
   b52d6:	bf18      	it	ne
   b52d8:	2001      	movne	r0, #1
   b52da:	b00a      	add	sp, #40	; 0x28
   b52dc:	bd10      	pop	{r4, pc}

000b52de <_ZN15Adafruit_AS734112delayForDataEi.part.0>:
void Adafruit_AS7341::delayForData(int waitTime) {
   b52de:	b510      	push	{r4, lr}
   b52e0:	4604      	mov	r4, r0
    while (!getIsDataReady()) {
   b52e2:	4620      	mov	r0, r4
   b52e4:	f7ff ffe1 	bl	b52aa <_ZN15Adafruit_AS734114getIsDataReadyEv>
   b52e8:	b918      	cbnz	r0, b52f2 <_ZN15Adafruit_AS734112delayForDataEi.part.0+0x14>
      delay(1);
   b52ea:	2001      	movs	r0, #1
   b52ec:	f000 ff28 	bl	b6140 <delay>
    while (!getIsDataReady()) {
   b52f0:	e7f7      	b.n	b52e2 <_ZN15Adafruit_AS734112delayForDataEi.part.0+0x4>
}
   b52f2:	bd10      	pop	{r4, pc}

000b52f4 <_ZN15Adafruit_AS73418setATIMEEh>:
 * Total integration time will be `(ATIME + 1) * (ASTEP + 1) * 2.78µS`
 *
 * @param atime_value The integration time step count
 * @return true: success false: failure
 */
bool Adafruit_AS7341::setATIME(uint8_t atime_value) {
   b52f4:	b530      	push	{r4, r5, lr}
  Adafruit_BusIO_Register atime_reg =
      Adafruit_BusIO_Register(i2c_dev, AS7341_ATIME);
   b52f6:	2301      	movs	r3, #1
bool Adafruit_AS7341::setATIME(uint8_t atime_value) {
   b52f8:	b089      	sub	sp, #36	; 0x24
      Adafruit_BusIO_Register(i2c_dev, AS7341_ATIME);
   b52fa:	2500      	movs	r5, #0
   b52fc:	e9cd 5300 	strd	r5, r3, [sp]
bool Adafruit_AS7341::setATIME(uint8_t atime_value) {
   b5300:	460c      	mov	r4, r1
      Adafruit_BusIO_Register(i2c_dev, AS7341_ATIME);
   b5302:	2281      	movs	r2, #129	; 0x81
   b5304:	6881      	ldr	r1, [r0, #8]
   b5306:	a802      	add	r0, sp, #8
   b5308:	f7ff fc40 	bl	b4b8c <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>
  return atime_reg.write(atime_value);
   b530c:	462a      	mov	r2, r5
   b530e:	4621      	mov	r1, r4
   b5310:	a802      	add	r0, sp, #8
   b5312:	f7ff fc96 	bl	b4c42 <_ZN23Adafruit_BusIO_Register5writeEmh>
}
   b5316:	b009      	add	sp, #36	; 0x24
   b5318:	bd30      	pop	{r4, r5, pc}

000b531a <_ZN15Adafruit_AS73418getATIMEEv>:
 *
 * Total integration time will be `(ATIME + 1) * (ASTEP + 1) * 2.78µS`
 *
 * @return uint8_t The current integration time step count
 */
uint8_t Adafruit_AS7341::getATIME() {
   b531a:	b500      	push	{lr}
  Adafruit_BusIO_Register atime_reg =
      Adafruit_BusIO_Register(i2c_dev, AS7341_ATIME);
   b531c:	2301      	movs	r3, #1
uint8_t Adafruit_AS7341::getATIME() {
   b531e:	b089      	sub	sp, #36	; 0x24
      Adafruit_BusIO_Register(i2c_dev, AS7341_ATIME);
   b5320:	2200      	movs	r2, #0
   b5322:	e9cd 2300 	strd	r2, r3, [sp]
   b5326:	2281      	movs	r2, #129	; 0x81
   b5328:	6881      	ldr	r1, [r0, #8]
   b532a:	a802      	add	r0, sp, #8
   b532c:	f7ff fc2e 	bl	b4b8c <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>
  return atime_reg.read();
   b5330:	a802      	add	r0, sp, #8
   b5332:	f7ff fce6 	bl	b4d02 <_ZN23Adafruit_BusIO_Register4readEv>
}
   b5336:	b2c0      	uxtb	r0, r0
   b5338:	b009      	add	sp, #36	; 0x24
   b533a:	f85d fb04 	ldr.w	pc, [sp], #4

000b533e <_ZN15Adafruit_AS73418setASTEPEt>:
 *
 * @param astep_value Integration time step size in 2.78 microsecon increments
 * Step size is `(astep_value+1) * 2.78 uS`
 * @return true: success false: failure
 */
bool Adafruit_AS7341::setASTEP(uint16_t astep_value) {
   b533e:	b530      	push	{r4, r5, lr}
  Adafruit_BusIO_Register astep_reg =
      Adafruit_BusIO_Register(i2c_dev, AS7341_ASTEP_L, 2, LSBFIRST);
   b5340:	2301      	movs	r3, #1
bool Adafruit_AS7341::setASTEP(uint16_t astep_value) {
   b5342:	b089      	sub	sp, #36	; 0x24
      Adafruit_BusIO_Register(i2c_dev, AS7341_ASTEP_L, 2, LSBFIRST);
   b5344:	2500      	movs	r5, #0
   b5346:	e9cd 5300 	strd	r5, r3, [sp]
bool Adafruit_AS7341::setASTEP(uint16_t astep_value) {
   b534a:	460c      	mov	r4, r1
      Adafruit_BusIO_Register(i2c_dev, AS7341_ASTEP_L, 2, LSBFIRST);
   b534c:	2302      	movs	r3, #2
   b534e:	6881      	ldr	r1, [r0, #8]
   b5350:	22ca      	movs	r2, #202	; 0xca
   b5352:	a802      	add	r0, sp, #8
   b5354:	f7ff fc1a 	bl	b4b8c <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>
  return astep_reg.write(astep_value);
   b5358:	462a      	mov	r2, r5
   b535a:	4621      	mov	r1, r4
   b535c:	a802      	add	r0, sp, #8
   b535e:	f7ff fc70 	bl	b4c42 <_ZN23Adafruit_BusIO_Register5writeEmh>
}
   b5362:	b009      	add	sp, #36	; 0x24
   b5364:	bd30      	pop	{r4, r5, pc}

000b5366 <_ZN15Adafruit_AS73418getASTEPEv>:
 *
 * Step size is `(astep_value+1) * 2.78 uS`
 *
 * @return uint16_t The current integration time step size
 */
uint16_t Adafruit_AS7341::getASTEP() {
   b5366:	b500      	push	{lr}
  Adafruit_BusIO_Register astep_reg =
      Adafruit_BusIO_Register(i2c_dev, AS7341_ASTEP_L, 2, LSBFIRST);
   b5368:	2300      	movs	r3, #0
uint16_t Adafruit_AS7341::getASTEP() {
   b536a:	b089      	sub	sp, #36	; 0x24
      Adafruit_BusIO_Register(i2c_dev, AS7341_ASTEP_L, 2, LSBFIRST);
   b536c:	2201      	movs	r2, #1
   b536e:	e9cd 3200 	strd	r3, r2, [sp]
   b5372:	2302      	movs	r3, #2
   b5374:	6881      	ldr	r1, [r0, #8]
   b5376:	22ca      	movs	r2, #202	; 0xca
   b5378:	a802      	add	r0, sp, #8
   b537a:	f7ff fc07 	bl	b4b8c <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>
  return astep_reg.read();
   b537e:	a802      	add	r0, sp, #8
   b5380:	f7ff fcbf 	bl	b4d02 <_ZN23Adafruit_BusIO_Register4readEv>
}
   b5384:	b280      	uxth	r0, r0
   b5386:	b009      	add	sp, #36	; 0x24
   b5388:	f85d fb04 	ldr.w	pc, [sp], #4

000b538c <_ZN15Adafruit_AS73417setGainE13as7341_gain_t>:
 * @brief Sets the ADC gain multiplier
 *
 * @param gain_value The gain amount. must be an `as7341_gain_t`
 * @return true: success false: failure
 */
bool Adafruit_AS7341::setGain(as7341_gain_t gain_value) {
   b538c:	b530      	push	{r4, r5, lr}
  Adafruit_BusIO_Register cfg1_reg =
      Adafruit_BusIO_Register(i2c_dev, AS7341_CFG1);
   b538e:	2301      	movs	r3, #1
bool Adafruit_AS7341::setGain(as7341_gain_t gain_value) {
   b5390:	b089      	sub	sp, #36	; 0x24
      Adafruit_BusIO_Register(i2c_dev, AS7341_CFG1);
   b5392:	2500      	movs	r5, #0
   b5394:	e9cd 5300 	strd	r5, r3, [sp]
bool Adafruit_AS7341::setGain(as7341_gain_t gain_value) {
   b5398:	460c      	mov	r4, r1
      Adafruit_BusIO_Register(i2c_dev, AS7341_CFG1);
   b539a:	22aa      	movs	r2, #170	; 0xaa
   b539c:	6881      	ldr	r1, [r0, #8]
   b539e:	a802      	add	r0, sp, #8
   b53a0:	f7ff fbf4 	bl	b4b8c <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>
  return cfg1_reg.write(gain_value);
   b53a4:	462a      	mov	r2, r5
   b53a6:	4621      	mov	r1, r4
   b53a8:	a802      	add	r0, sp, #8
   b53aa:	f7ff fc4a 	bl	b4c42 <_ZN23Adafruit_BusIO_Register5writeEmh>
  // AGAIN bitfield is only[0:4] but the rest is empty
}
   b53ae:	b009      	add	sp, #36	; 0x24
   b53b0:	bd30      	pop	{r4, r5, pc}

000b53b2 <_ZN15Adafruit_AS73417getGainEv>:
/**
 * @brief Returns the ADC gain multiplier
 *
 * @return as7341_gain_t The current ADC gain multiplier
 */
as7341_gain_t Adafruit_AS7341::getGain() {
   b53b2:	b500      	push	{lr}
  Adafruit_BusIO_Register cfg1_reg =
      Adafruit_BusIO_Register(i2c_dev, AS7341_CFG1);
   b53b4:	2301      	movs	r3, #1
as7341_gain_t Adafruit_AS7341::getGain() {
   b53b6:	b089      	sub	sp, #36	; 0x24
      Adafruit_BusIO_Register(i2c_dev, AS7341_CFG1);
   b53b8:	2200      	movs	r2, #0
   b53ba:	e9cd 2300 	strd	r2, r3, [sp]
   b53be:	22aa      	movs	r2, #170	; 0xaa
   b53c0:	6881      	ldr	r1, [r0, #8]
   b53c2:	a802      	add	r0, sp, #8
   b53c4:	f7ff fbe2 	bl	b4b8c <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>
  return (as7341_gain_t)cfg1_reg.read();
   b53c8:	a802      	add	r0, sp, #8
   b53ca:	f7ff fc9a 	bl	b4d02 <_ZN23Adafruit_BusIO_Register4readEv>
}
   b53ce:	b2c0      	uxtb	r0, r0
   b53d0:	b009      	add	sp, #36	; 0x24
   b53d2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b53d8 <_ZN15Adafruit_AS734113toBasicCountsEt>:
 *
 * @param raw The raw ADC values to convert
 *
 * @return float The basic counts
 */
float Adafruit_AS7341::toBasicCounts(uint16_t raw) {
   b53d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b53da:	ed2d 8b02 	vpush	{d8}
   b53de:	460d      	mov	r5, r1
   b53e0:	4604      	mov	r4, r0
  float gain_val = 0;
  as7341_gain_t gain = getGain();
   b53e2:	f7ff ffe6 	bl	b53b2 <_ZN15Adafruit_AS73417getGainEv>
  switch (gain) {
   b53e6:	280a      	cmp	r0, #10
   b53e8:	bf97      	itett	ls
   b53ea:	4b1f      	ldrls	r3, [pc, #124]	; (b5468 <_ZN15Adafruit_AS734113toBasicCountsEt+0x90>)
  as7341_gain_t gain = getGain();
   b53ec:	eddf 8a1f 	vldrhi	s17, [pc, #124]	; b546c <_ZN15Adafruit_AS734113toBasicCountsEt+0x94>
   b53f0:	eb03 0080 	addls.w	r0, r3, r0, lsl #2
   b53f4:	edd0 8a00 	vldrls	s17, [r0]
    break;
  case AS7341_GAIN_512X:
    gain_val = 512;
    break;
  }
  return raw / (gain_val * (getATIME() + 1) * (getASTEP() + 1) * 2.78 / 1000);
   b53f8:	4620      	mov	r0, r4
   b53fa:	f7ff ff8e 	bl	b531a <_ZN15Adafruit_AS73418getATIMEEv>
   b53fe:	1c43      	adds	r3, r0, #1
   b5400:	4620      	mov	r0, r4
   b5402:	ee08 3a10 	vmov	s16, r3
   b5406:	f7ff ffae 	bl	b5366 <_ZN15Adafruit_AS73418getASTEPEv>
   b540a:	4604      	mov	r4, r0
   b540c:	3401      	adds	r4, #1
   b540e:	4628      	mov	r0, r5
   b5410:	f001 fc52 	bl	b6cb8 <__aeabi_i2d>
   b5414:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
   b5418:	ee07 4a90 	vmov	s15, r4
   b541c:	ee28 8a28 	vmul.f32	s16, s16, s17
   b5420:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b5424:	4606      	mov	r6, r0
   b5426:	ee67 7a88 	vmul.f32	s15, s15, s16
   b542a:	460f      	mov	r7, r1
   b542c:	ee17 0a90 	vmov	r0, s15
   b5430:	f001 fc54 	bl	b6cdc <__aeabi_f2d>
   b5434:	a30a      	add	r3, pc, #40	; (adr r3, b5460 <_ZN15Adafruit_AS734113toBasicCountsEt+0x88>)
   b5436:	e9d3 2300 	ldrd	r2, r3, [r3]
   b543a:	f001 fca7 	bl	b6d8c <__aeabi_dmul>
   b543e:	4b0c      	ldr	r3, [pc, #48]	; (b5470 <_ZN15Adafruit_AS734113toBasicCountsEt+0x98>)
   b5440:	2200      	movs	r2, #0
   b5442:	f001 fdcd 	bl	b6fe0 <__aeabi_ddiv>
   b5446:	4602      	mov	r2, r0
   b5448:	460b      	mov	r3, r1
   b544a:	4630      	mov	r0, r6
   b544c:	4639      	mov	r1, r7
   b544e:	f001 fdc7 	bl	b6fe0 <__aeabi_ddiv>
   b5452:	f001 ff93 	bl	b737c <__aeabi_d2f>
}
   b5456:	ecbd 8b02 	vpop	{d8}
   b545a:	ee00 0a10 	vmov	s0, r0
   b545e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b5460:	a3d70a3d 	.word	0xa3d70a3d
   b5464:	40063d70 	.word	0x40063d70
   b5468:	000b764c 	.word	0x000b764c
   b546c:	00000000 	.word	0x00000000
   b5470:	408f4000 	.word	0x408f4000

000b5474 <_ZN15Adafruit_AS734113writeRegisterEhh>:
 * @brief Write a byte to the given register
 *
 * @param addr Register address
 * @param val The value to set the register to
 */
void Adafruit_AS7341::writeRegister(byte addr, byte val) {
   b5474:	b530      	push	{r4, r5, lr}
  Adafruit_BusIO_Register reg = Adafruit_BusIO_Register(i2c_dev, addr);
   b5476:	2301      	movs	r3, #1
void Adafruit_AS7341::writeRegister(byte addr, byte val) {
   b5478:	b089      	sub	sp, #36	; 0x24
  Adafruit_BusIO_Register reg = Adafruit_BusIO_Register(i2c_dev, addr);
   b547a:	2500      	movs	r5, #0
   b547c:	e9cd 5300 	strd	r5, r3, [sp]
void Adafruit_AS7341::writeRegister(byte addr, byte val) {
   b5480:	4614      	mov	r4, r2
  Adafruit_BusIO_Register reg = Adafruit_BusIO_Register(i2c_dev, addr);
   b5482:	460a      	mov	r2, r1
   b5484:	6881      	ldr	r1, [r0, #8]
   b5486:	a802      	add	r0, sp, #8
   b5488:	f7ff fb80 	bl	b4b8c <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>
  reg.write(val);
   b548c:	462a      	mov	r2, r5
   b548e:	4621      	mov	r1, r4
   b5490:	a802      	add	r0, sp, #8
   b5492:	f7ff fbd6 	bl	b4c42 <_ZN23Adafruit_BusIO_Register5writeEmh>
   b5496:	b009      	add	sp, #36	; 0x24
   b5498:	bd30      	pop	{r4, r5, pc}

000b549a <_ZN15Adafruit_AS734120setup_F1F4_Clear_NIREv>:
void Adafruit_AS7341::setup_F1F4_Clear_NIR() {
   b549a:	b510      	push	{r4, lr}
  writeRegister(byte(0x00), byte(0x30)); // F3 left set to ADC2
   b549c:	2230      	movs	r2, #48	; 0x30
   b549e:	2100      	movs	r1, #0
void Adafruit_AS7341::setup_F1F4_Clear_NIR() {
   b54a0:	4604      	mov	r4, r0
  writeRegister(byte(0x00), byte(0x30)); // F3 left set to ADC2
   b54a2:	f7ff ffe7 	bl	b5474 <_ZN15Adafruit_AS734113writeRegisterEhh>
  writeRegister(byte(0x01), byte(0x01)); // F1 left set to ADC0
   b54a6:	2201      	movs	r2, #1
   b54a8:	4611      	mov	r1, r2
   b54aa:	4620      	mov	r0, r4
   b54ac:	f7ff ffe2 	bl	b5474 <_ZN15Adafruit_AS734113writeRegisterEhh>
  writeRegister(byte(0x02), byte(0x00)); // Reserved or disabled
   b54b0:	4620      	mov	r0, r4
   b54b2:	2200      	movs	r2, #0
   b54b4:	2102      	movs	r1, #2
   b54b6:	f7ff ffdd 	bl	b5474 <_ZN15Adafruit_AS734113writeRegisterEhh>
  writeRegister(byte(0x03), byte(0x00)); // F8 left disabled
   b54ba:	4620      	mov	r0, r4
   b54bc:	2200      	movs	r2, #0
   b54be:	2103      	movs	r1, #3
   b54c0:	f7ff ffd8 	bl	b5474 <_ZN15Adafruit_AS734113writeRegisterEhh>
  writeRegister(byte(0x04), byte(0x00)); // F6 left disabled
   b54c4:	4620      	mov	r0, r4
   b54c6:	2200      	movs	r2, #0
   b54c8:	2104      	movs	r1, #4
   b54ca:	f7ff ffd3 	bl	b5474 <_ZN15Adafruit_AS734113writeRegisterEhh>
  writeRegister(
   b54ce:	4620      	mov	r0, r4
   b54d0:	2242      	movs	r2, #66	; 0x42
   b54d2:	2105      	movs	r1, #5
   b54d4:	f7ff ffce 	bl	b5474 <_ZN15Adafruit_AS734113writeRegisterEhh>
  writeRegister(byte(0x06), byte(0x00)); // F5 left disbled
   b54d8:	4620      	mov	r0, r4
   b54da:	2200      	movs	r2, #0
   b54dc:	2106      	movs	r1, #6
   b54de:	f7ff ffc9 	bl	b5474 <_ZN15Adafruit_AS734113writeRegisterEhh>
  writeRegister(byte(0x07), byte(0x00)); // F7 left disbled
   b54e2:	4620      	mov	r0, r4
   b54e4:	2200      	movs	r2, #0
   b54e6:	2107      	movs	r1, #7
   b54e8:	f7ff ffc4 	bl	b5474 <_ZN15Adafruit_AS734113writeRegisterEhh>
  writeRegister(byte(0x08), byte(0x50)); // CLEAR connected to ADC4
   b54ec:	4620      	mov	r0, r4
   b54ee:	2250      	movs	r2, #80	; 0x50
   b54f0:	2108      	movs	r1, #8
   b54f2:	f7ff ffbf 	bl	b5474 <_ZN15Adafruit_AS734113writeRegisterEhh>
  writeRegister(byte(0x09), byte(0x00)); // F5 right disabled
   b54f6:	4620      	mov	r0, r4
   b54f8:	2200      	movs	r2, #0
   b54fa:	2109      	movs	r1, #9
   b54fc:	f7ff ffba 	bl	b5474 <_ZN15Adafruit_AS734113writeRegisterEhh>
  writeRegister(byte(0x0A), byte(0x00)); // F7 right disabled
   b5500:	4620      	mov	r0, r4
   b5502:	2200      	movs	r2, #0
   b5504:	210a      	movs	r1, #10
   b5506:	f7ff ffb5 	bl	b5474 <_ZN15Adafruit_AS734113writeRegisterEhh>
  writeRegister(byte(0x0B), byte(0x00)); // Reserved or disabled
   b550a:	4620      	mov	r0, r4
   b550c:	2200      	movs	r2, #0
   b550e:	210b      	movs	r1, #11
   b5510:	f7ff ffb0 	bl	b5474 <_ZN15Adafruit_AS734113writeRegisterEhh>
  writeRegister(byte(0x0C), byte(0x20)); // F2 right connected to ADC1
   b5514:	4620      	mov	r0, r4
   b5516:	2220      	movs	r2, #32
   b5518:	210c      	movs	r1, #12
   b551a:	f7ff ffab 	bl	b5474 <_ZN15Adafruit_AS734113writeRegisterEhh>
  writeRegister(byte(0x0D), byte(0x04)); // F4 right connected to ADC3
   b551e:	4620      	mov	r0, r4
   b5520:	2204      	movs	r2, #4
   b5522:	210d      	movs	r1, #13
   b5524:	f7ff ffa6 	bl	b5474 <_ZN15Adafruit_AS734113writeRegisterEhh>
  writeRegister(byte(0x0E), byte(0x00)); // F6/F8 right disabled
   b5528:	4620      	mov	r0, r4
   b552a:	2200      	movs	r2, #0
   b552c:	210e      	movs	r1, #14
   b552e:	f7ff ffa1 	bl	b5474 <_ZN15Adafruit_AS734113writeRegisterEhh>
  writeRegister(byte(0x0F), byte(0x30)); // F3 right connected to AD2
   b5532:	4620      	mov	r0, r4
   b5534:	2230      	movs	r2, #48	; 0x30
   b5536:	210f      	movs	r1, #15
   b5538:	f7ff ff9c 	bl	b5474 <_ZN15Adafruit_AS734113writeRegisterEhh>
  writeRegister(byte(0x10), byte(0x01)); // F1 right connected to AD0
   b553c:	4620      	mov	r0, r4
   b553e:	2201      	movs	r2, #1
   b5540:	2110      	movs	r1, #16
   b5542:	f7ff ff97 	bl	b5474 <_ZN15Adafruit_AS734113writeRegisterEhh>
  writeRegister(byte(0x11), byte(0x50)); // CLEAR right connected to AD4
   b5546:	4620      	mov	r0, r4
   b5548:	2250      	movs	r2, #80	; 0x50
   b554a:	2111      	movs	r1, #17
   b554c:	f7ff ff92 	bl	b5474 <_ZN15Adafruit_AS734113writeRegisterEhh>
  writeRegister(byte(0x12), byte(0x00)); // Reserved or disabled
   b5550:	4620      	mov	r0, r4
   b5552:	2200      	movs	r2, #0
   b5554:	2112      	movs	r1, #18
   b5556:	f7ff ff8d 	bl	b5474 <_ZN15Adafruit_AS734113writeRegisterEhh>
  writeRegister(byte(0x13), byte(0x06)); // NIR connected to ADC5
   b555a:	4620      	mov	r0, r4
   b555c:	2206      	movs	r2, #6
}
   b555e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  writeRegister(byte(0x13), byte(0x06)); // NIR connected to ADC5
   b5562:	2113      	movs	r1, #19
   b5564:	f7ff bf86 	b.w	b5474 <_ZN15Adafruit_AS734113writeRegisterEhh>

000b5568 <_ZN15Adafruit_AS734120setup_F5F8_Clear_NIREv>:
  writeRegister(byte(0x00), byte(0x00)); // F3 left disable
   b5568:	2200      	movs	r2, #0
void Adafruit_AS7341::setup_F5F8_Clear_NIR() {
   b556a:	b510      	push	{r4, lr}
  writeRegister(byte(0x00), byte(0x00)); // F3 left disable
   b556c:	4611      	mov	r1, r2
void Adafruit_AS7341::setup_F5F8_Clear_NIR() {
   b556e:	4604      	mov	r4, r0
  writeRegister(byte(0x00), byte(0x00)); // F3 left disable
   b5570:	f7ff ff80 	bl	b5474 <_ZN15Adafruit_AS734113writeRegisterEhh>
  writeRegister(byte(0x01), byte(0x00)); // F1 left disable
   b5574:	4620      	mov	r0, r4
   b5576:	2200      	movs	r2, #0
   b5578:	2101      	movs	r1, #1
   b557a:	f7ff ff7b 	bl	b5474 <_ZN15Adafruit_AS734113writeRegisterEhh>
  writeRegister(byte(0x02), byte(0x00)); // reserved/disable
   b557e:	4620      	mov	r0, r4
   b5580:	2200      	movs	r2, #0
   b5582:	2102      	movs	r1, #2
   b5584:	f7ff ff76 	bl	b5474 <_ZN15Adafruit_AS734113writeRegisterEhh>
  writeRegister(byte(0x03), byte(0x40)); // F8 left connected to ADC3
   b5588:	4620      	mov	r0, r4
   b558a:	2240      	movs	r2, #64	; 0x40
   b558c:	2103      	movs	r1, #3
   b558e:	f7ff ff71 	bl	b5474 <_ZN15Adafruit_AS734113writeRegisterEhh>
  writeRegister(byte(0x04), byte(0x02)); // F6 left connected to ADC1
   b5592:	4620      	mov	r0, r4
   b5594:	2202      	movs	r2, #2
   b5596:	2104      	movs	r1, #4
   b5598:	f7ff ff6c 	bl	b5474 <_ZN15Adafruit_AS734113writeRegisterEhh>
  writeRegister(byte(0x05), byte(0x00)); // F4/ F2 disabled
   b559c:	4620      	mov	r0, r4
   b559e:	2200      	movs	r2, #0
   b55a0:	2105      	movs	r1, #5
   b55a2:	f7ff ff67 	bl	b5474 <_ZN15Adafruit_AS734113writeRegisterEhh>
  writeRegister(byte(0x06), byte(0x10)); // F5 left connected to ADC0
   b55a6:	4620      	mov	r0, r4
   b55a8:	2210      	movs	r2, #16
   b55aa:	2106      	movs	r1, #6
   b55ac:	f7ff ff62 	bl	b5474 <_ZN15Adafruit_AS734113writeRegisterEhh>
  writeRegister(byte(0x07), byte(0x03)); // F7 left connected to ADC2
   b55b0:	4620      	mov	r0, r4
   b55b2:	2203      	movs	r2, #3
   b55b4:	2107      	movs	r1, #7
   b55b6:	f7ff ff5d 	bl	b5474 <_ZN15Adafruit_AS734113writeRegisterEhh>
  writeRegister(byte(0x08), byte(0x50)); // CLEAR Connected to ADC4
   b55ba:	4620      	mov	r0, r4
   b55bc:	2250      	movs	r2, #80	; 0x50
   b55be:	2108      	movs	r1, #8
   b55c0:	f7ff ff58 	bl	b5474 <_ZN15Adafruit_AS734113writeRegisterEhh>
  writeRegister(byte(0x09), byte(0x10)); // F5 right connected to ADC0
   b55c4:	4620      	mov	r0, r4
   b55c6:	2210      	movs	r2, #16
   b55c8:	2109      	movs	r1, #9
   b55ca:	f7ff ff53 	bl	b5474 <_ZN15Adafruit_AS734113writeRegisterEhh>
  writeRegister(byte(0x0A), byte(0x03)); // F7 right connected to ADC2
   b55ce:	4620      	mov	r0, r4
   b55d0:	2203      	movs	r2, #3
   b55d2:	210a      	movs	r1, #10
   b55d4:	f7ff ff4e 	bl	b5474 <_ZN15Adafruit_AS734113writeRegisterEhh>
  writeRegister(byte(0x0B), byte(0x00)); // Reserved or disabled
   b55d8:	4620      	mov	r0, r4
   b55da:	2200      	movs	r2, #0
   b55dc:	210b      	movs	r1, #11
   b55de:	f7ff ff49 	bl	b5474 <_ZN15Adafruit_AS734113writeRegisterEhh>
  writeRegister(byte(0x0C), byte(0x00)); // F2 right disabled
   b55e2:	4620      	mov	r0, r4
   b55e4:	2200      	movs	r2, #0
   b55e6:	210c      	movs	r1, #12
   b55e8:	f7ff ff44 	bl	b5474 <_ZN15Adafruit_AS734113writeRegisterEhh>
  writeRegister(byte(0x0D), byte(0x00)); // F4 right disabled
   b55ec:	4620      	mov	r0, r4
   b55ee:	2200      	movs	r2, #0
   b55f0:	210d      	movs	r1, #13
   b55f2:	f7ff ff3f 	bl	b5474 <_ZN15Adafruit_AS734113writeRegisterEhh>
  writeRegister(
   b55f6:	4620      	mov	r0, r4
   b55f8:	2224      	movs	r2, #36	; 0x24
   b55fa:	210e      	movs	r1, #14
   b55fc:	f7ff ff3a 	bl	b5474 <_ZN15Adafruit_AS734113writeRegisterEhh>
  writeRegister(byte(0x0F), byte(0x00)); // F3 right disabled
   b5600:	4620      	mov	r0, r4
   b5602:	2200      	movs	r2, #0
   b5604:	210f      	movs	r1, #15
   b5606:	f7ff ff35 	bl	b5474 <_ZN15Adafruit_AS734113writeRegisterEhh>
  writeRegister(byte(0x10), byte(0x00)); // F1 right disabled
   b560a:	4620      	mov	r0, r4
   b560c:	2200      	movs	r2, #0
   b560e:	2110      	movs	r1, #16
   b5610:	f7ff ff30 	bl	b5474 <_ZN15Adafruit_AS734113writeRegisterEhh>
  writeRegister(byte(0x11), byte(0x50)); // CLEAR right connected to AD4
   b5614:	4620      	mov	r0, r4
   b5616:	2250      	movs	r2, #80	; 0x50
   b5618:	2111      	movs	r1, #17
   b561a:	f7ff ff2b 	bl	b5474 <_ZN15Adafruit_AS734113writeRegisterEhh>
  writeRegister(byte(0x12), byte(0x00)); // Reserved or disabled
   b561e:	4620      	mov	r0, r4
   b5620:	2200      	movs	r2, #0
   b5622:	2112      	movs	r1, #18
   b5624:	f7ff ff26 	bl	b5474 <_ZN15Adafruit_AS734113writeRegisterEhh>
  writeRegister(byte(0x13), byte(0x06)); // NIR connected to ADC5
   b5628:	4620      	mov	r0, r4
   b562a:	2206      	movs	r2, #6
}
   b562c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  writeRegister(byte(0x13), byte(0x06)); // NIR connected to ADC5
   b5630:	2113      	movs	r1, #19
   b5632:	f7ff bf1f 	b.w	b5474 <_ZN15Adafruit_AS734113writeRegisterEhh>

000b5636 <_ZN15Adafruit_AS734118setSMUXLowChannelsEb>:
void Adafruit_AS7341::setSMUXLowChannels(bool f1_f4) {
   b5636:	b538      	push	{r3, r4, r5, lr}
   b5638:	4604      	mov	r4, r0
   b563a:	460d      	mov	r5, r1
  enableSpectralMeasurement(false);
   b563c:	2100      	movs	r1, #0
   b563e:	f7ff fdd8 	bl	b51f2 <_ZN15Adafruit_AS734125enableSpectralMeasurementEb>
  setSMUXCommand(AS7341_SMUX_CMD_WRITE);
   b5642:	2102      	movs	r1, #2
   b5644:	4620      	mov	r0, r4
   b5646:	f7ff fe18 	bl	b527a <_ZN15Adafruit_AS734114setSMUXCommandE17as7341_smux_cmd_t>
    setup_F1F4_Clear_NIR();
   b564a:	4620      	mov	r0, r4
  if (f1_f4) {
   b564c:	b135      	cbz	r5, b565c <_ZN15Adafruit_AS734118setSMUXLowChannelsEb+0x26>
    setup_F1F4_Clear_NIR();
   b564e:	f7ff ff24 	bl	b549a <_ZN15Adafruit_AS734120setup_F1F4_Clear_NIREv>
  enableSMUX();
   b5652:	4620      	mov	r0, r4
}
   b5654:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  enableSMUX();
   b5658:	f7ff bde3 	b.w	b5222 <_ZN15Adafruit_AS734110enableSMUXEv>
    setup_F5F8_Clear_NIR();
   b565c:	f7ff ff84 	bl	b5568 <_ZN15Adafruit_AS734120setup_F5F8_Clear_NIREv>
   b5660:	e7f7      	b.n	b5652 <_ZN15Adafruit_AS734118setSMUXLowChannelsEb+0x1c>

000b5662 <_ZN15Adafruit_AS734115readAllChannelsEPt>:
bool Adafruit_AS7341::readAllChannels(uint16_t *readings_buffer) {
   b5662:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b5666:	4604      	mov	r4, r0
   b5668:	b088      	sub	sp, #32
   b566a:	460e      	mov	r6, r1
  setSMUXLowChannels(true);        // Configure SMUX to read low channels
   b566c:	2101      	movs	r1, #1
   b566e:	f7ff ffe2 	bl	b5636 <_ZN15Adafruit_AS734118setSMUXLowChannelsEb>
  enableSpectralMeasurement(true); // Start integration
   b5672:	2101      	movs	r1, #1
   b5674:	4620      	mov	r0, r4
   b5676:	f7ff fdbc 	bl	b51f2 <_ZN15Adafruit_AS734125enableSpectralMeasurementEb>
      Adafruit_BusIO_Register(i2c_dev, AS7341_CH0_DATA_L, 2);
   b567a:	f04f 0800 	mov.w	r8, #0
   b567e:	4620      	mov	r0, r4
   b5680:	2701      	movs	r7, #1
   b5682:	f7ff fe2c 	bl	b52de <_ZN15Adafruit_AS734112delayForDataEi.part.0>
   b5686:	2302      	movs	r3, #2
   b5688:	68a1      	ldr	r1, [r4, #8]
   b568a:	2295      	movs	r2, #149	; 0x95
   b568c:	e9cd 8700 	strd	r8, r7, [sp]
   b5690:	a802      	add	r0, sp, #8
   b5692:	f7ff fa7b 	bl	b4b8c <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>
  bool low_success = channel_data_reg.read((uint8_t *)readings_buffer, 12);
   b5696:	220c      	movs	r2, #12
   b5698:	4631      	mov	r1, r6
   b569a:	a802      	add	r0, sp, #8
   b569c:	f7ff faef 	bl	b4c7e <_ZN23Adafruit_BusIO_Register4readEPhh>
  setSMUXLowChannels(false);       // Configure SMUX to read high channels
   b56a0:	4641      	mov	r1, r8
  bool low_success = channel_data_reg.read((uint8_t *)readings_buffer, 12);
   b56a2:	4605      	mov	r5, r0
  setSMUXLowChannels(false);       // Configure SMUX to read high channels
   b56a4:	4620      	mov	r0, r4
   b56a6:	f7ff ffc6 	bl	b5636 <_ZN15Adafruit_AS734118setSMUXLowChannelsEb>
  enableSpectralMeasurement(true); // Start integration
   b56aa:	4639      	mov	r1, r7
   b56ac:	4620      	mov	r0, r4
   b56ae:	f7ff fda0 	bl	b51f2 <_ZN15Adafruit_AS734125enableSpectralMeasurementEb>
  if (waitTime == 0) // Wait forever
   b56b2:	4620      	mov	r0, r4
   b56b4:	f7ff fe13 	bl	b52de <_ZN15Adafruit_AS734112delayForDataEi.part.0>
  return low_success &&
   b56b8:	b12d      	cbz	r5, b56c6 <_ZN15Adafruit_AS734115readAllChannelsEPt+0x64>
         channel_data_reg.read((uint8_t *)&readings_buffer[6], 12);
   b56ba:	220c      	movs	r2, #12
   b56bc:	18b1      	adds	r1, r6, r2
   b56be:	a802      	add	r0, sp, #8
   b56c0:	f7ff fadd 	bl	b4c7e <_ZN23Adafruit_BusIO_Register4readEPhh>
   b56c4:	4605      	mov	r5, r0
}
   b56c6:	4628      	mov	r0, r5
   b56c8:	b008      	add	sp, #32
   b56ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000b56d0 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b56d0:	b508      	push	{r3, lr}
   b56d2:	4b02      	ldr	r3, [pc, #8]	; (b56dc <netdb_freeaddrinfo+0xc>)
   b56d4:	681b      	ldr	r3, [r3, #0]
   b56d6:	689b      	ldr	r3, [r3, #8]
   b56d8:	9301      	str	r3, [sp, #4]
   b56da:	bd08      	pop	{r3, pc}
   b56dc:	00030268 	.word	0x00030268

000b56e0 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b56e0:	b508      	push	{r3, lr}
   b56e2:	4b02      	ldr	r3, [pc, #8]	; (b56ec <netdb_getaddrinfo+0xc>)
   b56e4:	681b      	ldr	r3, [r3, #0]
   b56e6:	68db      	ldr	r3, [r3, #12]
   b56e8:	9301      	str	r3, [sp, #4]
   b56ea:	bd08      	pop	{r3, pc}
   b56ec:	00030268 	.word	0x00030268

000b56f0 <HAL_Get_Pin_Mode>:
DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   b56f0:	b508      	push	{r3, lr}
   b56f2:	4b02      	ldr	r3, [pc, #8]	; (b56fc <HAL_Get_Pin_Mode+0xc>)
   b56f4:	681b      	ldr	r3, [r3, #0]
   b56f6:	68db      	ldr	r3, [r3, #12]
   b56f8:	9301      	str	r3, [sp, #4]
   b56fa:	bd08      	pop	{r3, pc}
   b56fc:	0003022c 	.word	0x0003022c

000b5700 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   b5700:	b508      	push	{r3, lr}
   b5702:	4b02      	ldr	r3, [pc, #8]	; (b570c <HAL_GPIO_Write+0xc>)
   b5704:	681b      	ldr	r3, [r3, #0]
   b5706:	691b      	ldr	r3, [r3, #16]
   b5708:	9301      	str	r3, [sp, #4]
   b570a:	bd08      	pop	{r3, pc}
   b570c:	0003022c 	.word	0x0003022c

000b5710 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b5710:	b508      	push	{r3, lr}
   b5712:	4b02      	ldr	r3, [pc, #8]	; (b571c <HAL_RNG_GetRandomNumber+0xc>)
   b5714:	681b      	ldr	r3, [r3, #0]
   b5716:	685b      	ldr	r3, [r3, #4]
   b5718:	9301      	str	r3, [sp, #4]
   b571a:	bd08      	pop	{r3, pc}
   b571c:	00030218 	.word	0x00030218

000b5720 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b5720:	b508      	push	{r3, lr}
   b5722:	4b02      	ldr	r3, [pc, #8]	; (b572c <HAL_Delay_Microseconds+0xc>)
   b5724:	681b      	ldr	r3, [r3, #0]
   b5726:	68db      	ldr	r3, [r3, #12]
   b5728:	9301      	str	r3, [sp, #4]
   b572a:	bd08      	pop	{r3, pc}
   b572c:	00030218 	.word	0x00030218

000b5730 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b5730:	b508      	push	{r3, lr}
   b5732:	4b02      	ldr	r3, [pc, #8]	; (b573c <HAL_Timer_Get_Milli_Seconds+0xc>)
   b5734:	681b      	ldr	r3, [r3, #0]
   b5736:	695b      	ldr	r3, [r3, #20]
   b5738:	9301      	str	r3, [sp, #4]
   b573a:	bd08      	pop	{r3, pc}
   b573c:	00030218 	.word	0x00030218

000b5740 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b5740:	b508      	push	{r3, lr}
   b5742:	4b02      	ldr	r3, [pc, #8]	; (b574c <os_mutex_recursive_create+0xc>)
   b5744:	681b      	ldr	r3, [r3, #0]
   b5746:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b5748:	9301      	str	r3, [sp, #4]
   b574a:	bd08      	pop	{r3, pc}
   b574c:	00030248 	.word	0x00030248

000b5750 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b5750:	b508      	push	{r3, lr}
   b5752:	4b02      	ldr	r3, [pc, #8]	; (b575c <inet_inet_ntop+0xc>)
   b5754:	681b      	ldr	r3, [r3, #0]
   b5756:	695b      	ldr	r3, [r3, #20]
   b5758:	9301      	str	r3, [sp, #4]
   b575a:	bd08      	pop	{r3, pc}
   b575c:	00030264 	.word	0x00030264

000b5760 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b5760:	b508      	push	{r3, lr}
   b5762:	4b02      	ldr	r3, [pc, #8]	; (b576c <hal_usart_write+0xc>)
   b5764:	681b      	ldr	r3, [r3, #0]
   b5766:	68db      	ldr	r3, [r3, #12]
   b5768:	9301      	str	r3, [sp, #4]
   b576a:	bd08      	pop	{r3, pc}
   b576c:	0003023c 	.word	0x0003023c

000b5770 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b5770:	b508      	push	{r3, lr}
   b5772:	4b02      	ldr	r3, [pc, #8]	; (b577c <hal_usart_available+0xc>)
   b5774:	681b      	ldr	r3, [r3, #0]
   b5776:	691b      	ldr	r3, [r3, #16]
   b5778:	9301      	str	r3, [sp, #4]
   b577a:	bd08      	pop	{r3, pc}
   b577c:	0003023c 	.word	0x0003023c

000b5780 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b5780:	b508      	push	{r3, lr}
   b5782:	4b02      	ldr	r3, [pc, #8]	; (b578c <hal_usart_read+0xc>)
   b5784:	681b      	ldr	r3, [r3, #0]
   b5786:	695b      	ldr	r3, [r3, #20]
   b5788:	9301      	str	r3, [sp, #4]
   b578a:	bd08      	pop	{r3, pc}
   b578c:	0003023c 	.word	0x0003023c

000b5790 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b5790:	b508      	push	{r3, lr}
   b5792:	4b02      	ldr	r3, [pc, #8]	; (b579c <hal_usart_peek+0xc>)
   b5794:	681b      	ldr	r3, [r3, #0]
   b5796:	699b      	ldr	r3, [r3, #24]
   b5798:	9301      	str	r3, [sp, #4]
   b579a:	bd08      	pop	{r3, pc}
   b579c:	0003023c 	.word	0x0003023c

000b57a0 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b57a0:	b508      	push	{r3, lr}
   b57a2:	4b02      	ldr	r3, [pc, #8]	; (b57ac <hal_usart_flush+0xc>)
   b57a4:	681b      	ldr	r3, [r3, #0]
   b57a6:	69db      	ldr	r3, [r3, #28]
   b57a8:	9301      	str	r3, [sp, #4]
   b57aa:	bd08      	pop	{r3, pc}
   b57ac:	0003023c 	.word	0x0003023c

000b57b0 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b57b0:	b508      	push	{r3, lr}
   b57b2:	4b02      	ldr	r3, [pc, #8]	; (b57bc <hal_usart_is_enabled+0xc>)
   b57b4:	681b      	ldr	r3, [r3, #0]
   b57b6:	6a1b      	ldr	r3, [r3, #32]
   b57b8:	9301      	str	r3, [sp, #4]
   b57ba:	bd08      	pop	{r3, pc}
   b57bc:	0003023c 	.word	0x0003023c

000b57c0 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b57c0:	b508      	push	{r3, lr}
   b57c2:	4b02      	ldr	r3, [pc, #8]	; (b57cc <hal_usart_available_data_for_write+0xc>)
   b57c4:	681b      	ldr	r3, [r3, #0]
   b57c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b57c8:	9301      	str	r3, [sp, #4]
   b57ca:	bd08      	pop	{r3, pc}
   b57cc:	0003023c 	.word	0x0003023c

000b57d0 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b57d0:	b508      	push	{r3, lr}
   b57d2:	4b02      	ldr	r3, [pc, #8]	; (b57dc <hal_usart_init_ex+0xc>)
   b57d4:	681b      	ldr	r3, [r3, #0]
   b57d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b57d8:	9301      	str	r3, [sp, #4]
   b57da:	bd08      	pop	{r3, pc}
   b57dc:	0003023c 	.word	0x0003023c

000b57e0 <hal_i2c_begin>:
DYNALIB_BEGIN(hal_i2c)

DYNALIB_FN(0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   b57e0:	b508      	push	{r3, lr}
   b57e2:	4b02      	ldr	r3, [pc, #8]	; (b57ec <hal_i2c_begin+0xc>)
   b57e4:	681b      	ldr	r3, [r3, #0]
   b57e6:	68db      	ldr	r3, [r3, #12]
   b57e8:	9301      	str	r3, [sp, #4]
   b57ea:	bd08      	pop	{r3, pc}
   b57ec:	00030228 	.word	0x00030228

000b57f0 <hal_i2c_begin_transmission>:
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   b57f0:	b508      	push	{r3, lr}
   b57f2:	4b02      	ldr	r3, [pc, #8]	; (b57fc <hal_i2c_begin_transmission+0xc>)
   b57f4:	681b      	ldr	r3, [r3, #0]
   b57f6:	699b      	ldr	r3, [r3, #24]
   b57f8:	9301      	str	r3, [sp, #4]
   b57fa:	bd08      	pop	{r3, pc}
   b57fc:	00030228 	.word	0x00030228

000b5800 <hal_i2c_end_transmission>:
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   b5800:	b508      	push	{r3, lr}
   b5802:	4b02      	ldr	r3, [pc, #8]	; (b580c <hal_i2c_end_transmission+0xc>)
   b5804:	681b      	ldr	r3, [r3, #0]
   b5806:	69db      	ldr	r3, [r3, #28]
   b5808:	9301      	str	r3, [sp, #4]
   b580a:	bd08      	pop	{r3, pc}
   b580c:	00030228 	.word	0x00030228

000b5810 <hal_i2c_write>:
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b5810:	b508      	push	{r3, lr}
   b5812:	4b02      	ldr	r3, [pc, #8]	; (b581c <hal_i2c_write+0xc>)
   b5814:	681b      	ldr	r3, [r3, #0]
   b5816:	6a1b      	ldr	r3, [r3, #32]
   b5818:	9301      	str	r3, [sp, #4]
   b581a:	bd08      	pop	{r3, pc}
   b581c:	00030228 	.word	0x00030228

000b5820 <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b5820:	b508      	push	{r3, lr}
   b5822:	4b02      	ldr	r3, [pc, #8]	; (b582c <hal_i2c_available+0xc>)
   b5824:	681b      	ldr	r3, [r3, #0]
   b5826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b5828:	9301      	str	r3, [sp, #4]
   b582a:	bd08      	pop	{r3, pc}
   b582c:	00030228 	.word	0x00030228

000b5830 <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b5830:	b508      	push	{r3, lr}
   b5832:	4b02      	ldr	r3, [pc, #8]	; (b583c <hal_i2c_read+0xc>)
   b5834:	681b      	ldr	r3, [r3, #0]
   b5836:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b5838:	9301      	str	r3, [sp, #4]
   b583a:	bd08      	pop	{r3, pc}
   b583c:	00030228 	.word	0x00030228

000b5840 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b5840:	b508      	push	{r3, lr}
   b5842:	4b02      	ldr	r3, [pc, #8]	; (b584c <hal_i2c_peek+0xc>)
   b5844:	681b      	ldr	r3, [r3, #0]
   b5846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b5848:	9301      	str	r3, [sp, #4]
   b584a:	bd08      	pop	{r3, pc}
   b584c:	00030228 	.word	0x00030228

000b5850 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b5850:	b508      	push	{r3, lr}
   b5852:	4b02      	ldr	r3, [pc, #8]	; (b585c <hal_i2c_flush+0xc>)
   b5854:	681b      	ldr	r3, [r3, #0]
   b5856:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b5858:	9301      	str	r3, [sp, #4]
   b585a:	bd08      	pop	{r3, pc}
   b585c:	00030228 	.word	0x00030228

000b5860 <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b5860:	b508      	push	{r3, lr}
   b5862:	4b02      	ldr	r3, [pc, #8]	; (b586c <hal_i2c_is_enabled+0xc>)
   b5864:	681b      	ldr	r3, [r3, #0]
   b5866:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b5868:	9301      	str	r3, [sp, #4]
   b586a:	bd08      	pop	{r3, pc}
   b586c:	00030228 	.word	0x00030228

000b5870 <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b5870:	b508      	push	{r3, lr}
   b5872:	4b02      	ldr	r3, [pc, #8]	; (b587c <hal_i2c_init+0xc>)
   b5874:	681b      	ldr	r3, [r3, #0]
   b5876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5878:	9301      	str	r3, [sp, #4]
   b587a:	bd08      	pop	{r3, pc}
   b587c:	00030228 	.word	0x00030228

000b5880 <hal_i2c_request_ex>:
DYNALIB_FN(17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   b5880:	b508      	push	{r3, lr}
   b5882:	4b02      	ldr	r3, [pc, #8]	; (b588c <hal_i2c_request_ex+0xc>)
   b5884:	681b      	ldr	r3, [r3, #0]
   b5886:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b5888:	9301      	str	r3, [sp, #4]
   b588a:	bd08      	pop	{r3, pc}
   b588c:	00030228 	.word	0x00030228

000b5890 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b5890:	b508      	push	{r3, lr}
   b5892:	4b02      	ldr	r3, [pc, #8]	; (b589c <hal_spi_init+0xc>)
   b5894:	681b      	ldr	r3, [r3, #0]
   b5896:	69db      	ldr	r3, [r3, #28]
   b5898:	9301      	str	r3, [sp, #4]
   b589a:	bd08      	pop	{r3, pc}
   b589c:	00030230 	.word	0x00030230

000b58a0 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b58a0:	b508      	push	{r3, lr}
   b58a2:	4b02      	ldr	r3, [pc, #8]	; (b58ac <hal_spi_is_enabled+0xc>)
   b58a4:	681b      	ldr	r3, [r3, #0]
   b58a6:	6a1b      	ldr	r3, [r3, #32]
   b58a8:	9301      	str	r3, [sp, #4]
   b58aa:	bd08      	pop	{r3, pc}
   b58ac:	00030230 	.word	0x00030230

000b58b0 <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   b58b0:	b508      	push	{r3, lr}
   b58b2:	4b02      	ldr	r3, [pc, #8]	; (b58bc <hal_spi_info+0xc>)
   b58b4:	681b      	ldr	r3, [r3, #0]
   b58b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b58b8:	9301      	str	r3, [sp, #4]
   b58ba:	bd08      	pop	{r3, pc}
   b58bc:	00030230 	.word	0x00030230

000b58c0 <hal_spi_transfer_dma>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, const void*, void*, uint32_t, hal_spi_dma_user_callback))
   b58c0:	b508      	push	{r3, lr}
   b58c2:	4b02      	ldr	r3, [pc, #8]	; (b58cc <hal_spi_transfer_dma+0xc>)
   b58c4:	681b      	ldr	r3, [r3, #0]
   b58c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b58c8:	9301      	str	r3, [sp, #4]
   b58ca:	bd08      	pop	{r3, pc}
   b58cc:	00030230 	.word	0x00030230

000b58d0 <hal_spi_transfer_dma_status>:
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, void*))
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
   b58d0:	b508      	push	{r3, lr}
   b58d2:	4b02      	ldr	r3, [pc, #8]	; (b58dc <hal_spi_transfer_dma_status+0xc>)
   b58d4:	681b      	ldr	r3, [r3, #0]
   b58d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b58d8:	9301      	str	r3, [sp, #4]
   b58da:	bd08      	pop	{r3, pc}
   b58dc:	00030230 	.word	0x00030230

000b58e0 <hal_spi_set_settings>:
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   b58e0:	b508      	push	{r3, lr}
   b58e2:	4b02      	ldr	r3, [pc, #8]	; (b58ec <hal_spi_set_settings+0xc>)
   b58e4:	681b      	ldr	r3, [r3, #0]
   b58e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b58e8:	9301      	str	r3, [sp, #4]
   b58ea:	bd08      	pop	{r3, pc}
   b58ec:	00030230 	.word	0x00030230

000b58f0 <hal_spi_acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   b58f0:	b508      	push	{r3, lr}
   b58f2:	4b02      	ldr	r3, [pc, #8]	; (b58fc <hal_spi_acquire+0xc>)
   b58f4:	681b      	ldr	r3, [r3, #0]
   b58f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b58f8:	9301      	str	r3, [sp, #4]
   b58fa:	bd08      	pop	{r3, pc}
   b58fc:	00030230 	.word	0x00030230

000b5900 <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   b5900:	b508      	push	{r3, lr}
   b5902:	4b02      	ldr	r3, [pc, #8]	; (b590c <hal_spi_release+0xc>)
   b5904:	681b      	ldr	r3, [r3, #0]
   b5906:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b5908:	9301      	str	r3, [sp, #4]
   b590a:	bd08      	pop	{r3, pc}
   b590c:	00030230 	.word	0x00030230

000b5910 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b5910:	b508      	push	{r3, lr}
   b5912:	4b02      	ldr	r3, [pc, #8]	; (b591c <HAL_USB_USART_Init+0xc>)
   b5914:	681b      	ldr	r3, [r3, #0]
   b5916:	681b      	ldr	r3, [r3, #0]
   b5918:	9301      	str	r3, [sp, #4]
   b591a:	bd08      	pop	{r3, pc}
   b591c:	0003024c 	.word	0x0003024c

000b5920 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b5920:	b508      	push	{r3, lr}
   b5922:	4b02      	ldr	r3, [pc, #8]	; (b592c <HAL_USB_USART_Begin+0xc>)
   b5924:	681b      	ldr	r3, [r3, #0]
   b5926:	685b      	ldr	r3, [r3, #4]
   b5928:	9301      	str	r3, [sp, #4]
   b592a:	bd08      	pop	{r3, pc}
   b592c:	0003024c 	.word	0x0003024c

000b5930 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b5930:	b508      	push	{r3, lr}
   b5932:	4b02      	ldr	r3, [pc, #8]	; (b593c <HAL_USB_USART_Available_Data+0xc>)
   b5934:	681b      	ldr	r3, [r3, #0]
   b5936:	691b      	ldr	r3, [r3, #16]
   b5938:	9301      	str	r3, [sp, #4]
   b593a:	bd08      	pop	{r3, pc}
   b593c:	0003024c 	.word	0x0003024c

000b5940 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b5940:	b508      	push	{r3, lr}
   b5942:	4b02      	ldr	r3, [pc, #8]	; (b594c <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b5944:	681b      	ldr	r3, [r3, #0]
   b5946:	695b      	ldr	r3, [r3, #20]
   b5948:	9301      	str	r3, [sp, #4]
   b594a:	bd08      	pop	{r3, pc}
   b594c:	0003024c 	.word	0x0003024c

000b5950 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b5950:	b508      	push	{r3, lr}
   b5952:	4b02      	ldr	r3, [pc, #8]	; (b595c <HAL_USB_USART_Receive_Data+0xc>)
   b5954:	681b      	ldr	r3, [r3, #0]
   b5956:	699b      	ldr	r3, [r3, #24]
   b5958:	9301      	str	r3, [sp, #4]
   b595a:	bd08      	pop	{r3, pc}
   b595c:	0003024c 	.word	0x0003024c

000b5960 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b5960:	b508      	push	{r3, lr}
   b5962:	4b02      	ldr	r3, [pc, #8]	; (b596c <HAL_USB_USART_Send_Data+0xc>)
   b5964:	681b      	ldr	r3, [r3, #0]
   b5966:	69db      	ldr	r3, [r3, #28]
   b5968:	9301      	str	r3, [sp, #4]
   b596a:	bd08      	pop	{r3, pc}
   b596c:	0003024c 	.word	0x0003024c

000b5970 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b5970:	b508      	push	{r3, lr}
   b5972:	4b02      	ldr	r3, [pc, #8]	; (b597c <HAL_USB_USART_Flush_Data+0xc>)
   b5974:	681b      	ldr	r3, [r3, #0]
   b5976:	6a1b      	ldr	r3, [r3, #32]
   b5978:	9301      	str	r3, [sp, #4]
   b597a:	bd08      	pop	{r3, pc}
   b597c:	0003024c 	.word	0x0003024c

000b5980 <HAL_USB_USART_Is_Enabled>:
DYNALIB_FN(9, hal_usb, HAL_USB_USART_Is_Enabled, bool(HAL_USB_USART_Serial))
   b5980:	b508      	push	{r3, lr}
   b5982:	4b02      	ldr	r3, [pc, #8]	; (b598c <HAL_USB_USART_Is_Enabled+0xc>)
   b5984:	681b      	ldr	r3, [r3, #0]
   b5986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b5988:	9301      	str	r3, [sp, #4]
   b598a:	bd08      	pop	{r3, pc}
   b598c:	0003024c 	.word	0x0003024c

000b5990 <LED_SetSignalingColor>:
#endif // defined(DYNALIB_EXPORT)

DYNALIB_BEGIN(services)

DYNALIB_FN(0, services, LED_SetRGBColor, void(uint32_t))
DYNALIB_FN(1, services, LED_SetSignalingColor, void(uint32_t))
   b5990:	b508      	push	{r3, lr}
   b5992:	4b02      	ldr	r3, [pc, #8]	; (b599c <LED_SetSignalingColor+0xc>)
   b5994:	681b      	ldr	r3, [r3, #0]
   b5996:	685b      	ldr	r3, [r3, #4]
   b5998:	9301      	str	r3, [sp, #4]
   b599a:	bd08      	pop	{r3, pc}
   b599c:	00030260 	.word	0x00030260

000b59a0 <LED_Signaling_Start>:
DYNALIB_FN(2, services, LED_Signaling_Start, void(void))
   b59a0:	b508      	push	{r3, lr}
   b59a2:	4b02      	ldr	r3, [pc, #8]	; (b59ac <LED_Signaling_Start+0xc>)
   b59a4:	681b      	ldr	r3, [r3, #0]
   b59a6:	689b      	ldr	r3, [r3, #8]
   b59a8:	9301      	str	r3, [sp, #4]
   b59aa:	bd08      	pop	{r3, pc}
   b59ac:	00030260 	.word	0x00030260

000b59b0 <LED_Signaling_Stop>:
DYNALIB_FN(3, services, LED_Signaling_Stop, void(void))
   b59b0:	b508      	push	{r3, lr}
   b59b2:	4b02      	ldr	r3, [pc, #8]	; (b59bc <LED_Signaling_Stop+0xc>)
   b59b4:	681b      	ldr	r3, [r3, #0]
   b59b6:	68db      	ldr	r3, [r3, #12]
   b59b8:	9301      	str	r3, [sp, #4]
   b59ba:	bd08      	pop	{r3, pc}
   b59bc:	00030260 	.word	0x00030260

000b59c0 <LED_RGB_IsOverRidden>:
DYNALIB_FN(4, services, LED_SetBrightness, void(uint8_t))
DYNALIB_FN(5, services, LED_RGB_Get, void(uint8_t*))
DYNALIB_FN(6, services, LED_RGB_IsOverRidden, bool(void))
   b59c0:	b508      	push	{r3, lr}
   b59c2:	4b02      	ldr	r3, [pc, #8]	; (b59cc <LED_RGB_IsOverRidden+0xc>)
   b59c4:	681b      	ldr	r3, [r3, #0]
   b59c6:	699b      	ldr	r3, [r3, #24]
   b59c8:	9301      	str	r3, [sp, #4]
   b59ca:	bd08      	pop	{r3, pc}
   b59cc:	00030260 	.word	0x00030260

000b59d0 <LED_On>:
DYNALIB_FN(7, services, LED_On, void(Led_TypeDef))
   b59d0:	b508      	push	{r3, lr}
   b59d2:	4b02      	ldr	r3, [pc, #8]	; (b59dc <LED_On+0xc>)
   b59d4:	681b      	ldr	r3, [r3, #0]
   b59d6:	69db      	ldr	r3, [r3, #28]
   b59d8:	9301      	str	r3, [sp, #4]
   b59da:	bd08      	pop	{r3, pc}
   b59dc:	00030260 	.word	0x00030260

000b59e0 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   b59e0:	b508      	push	{r3, lr}
   b59e2:	4b02      	ldr	r3, [pc, #8]	; (b59ec <log_message+0xc>)
   b59e4:	681b      	ldr	r3, [r3, #0]
   b59e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b59e8:	9301      	str	r3, [sp, #4]
   b59ea:	bd08      	pop	{r3, pc}
   b59ec:	00030260 	.word	0x00030260

000b59f0 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b59f0:	b508      	push	{r3, lr}
   b59f2:	4b02      	ldr	r3, [pc, #8]	; (b59fc <set_system_mode+0xc>)
   b59f4:	681b      	ldr	r3, [r3, #0]
   b59f6:	685b      	ldr	r3, [r3, #4]
   b59f8:	9301      	str	r3, [sp, #4]
   b59fa:	bd08      	pop	{r3, pc}
   b59fc:	00030220 	.word	0x00030220

000b5a00 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b5a00:	b508      	push	{r3, lr}
   b5a02:	4b02      	ldr	r3, [pc, #8]	; (b5a0c <system_delay_ms+0xc>)
   b5a04:	681b      	ldr	r3, [r3, #0]
   b5a06:	695b      	ldr	r3, [r3, #20]
   b5a08:	9301      	str	r3, [sp, #4]
   b5a0a:	bd08      	pop	{r3, pc}
   b5a0c:	00030220 	.word	0x00030220

000b5a10 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, const SystemEventContext*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   b5a10:	b508      	push	{r3, lr}
   b5a12:	4b02      	ldr	r3, [pc, #8]	; (b5a1c <system_thread_set_state+0xc>)
   b5a14:	681b      	ldr	r3, [r3, #0]
   b5a16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b5a18:	9301      	str	r3, [sp, #4]
   b5a1a:	bd08      	pop	{r3, pc}
   b5a1c:	00030220 	.word	0x00030220

000b5a20 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b5a20:	b508      	push	{r3, lr}
   b5a22:	4b03      	ldr	r3, [pc, #12]	; (b5a30 <system_ctrl_set_app_request_handler+0x10>)
   b5a24:	681b      	ldr	r3, [r3, #0]
   b5a26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b5a2a:	9301      	str	r3, [sp, #4]
   b5a2c:	bd08      	pop	{r3, pc}
   b5a2e:	0000      	.short	0x0000
   b5a30:	00030220 	.word	0x00030220

000b5a34 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b5a34:	b508      	push	{r3, lr}
   b5a36:	4b03      	ldr	r3, [pc, #12]	; (b5a44 <system_ctrl_set_result+0x10>)
   b5a38:	681b      	ldr	r3, [r3, #0]
   b5a3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b5a3e:	9301      	str	r3, [sp, #4]
   b5a40:	bd08      	pop	{r3, pc}
   b5a42:	0000      	.short	0x0000
   b5a44:	00030220 	.word	0x00030220

000b5a48 <system_sleep_ext>:
#define BASE_IDX1 (BASE_IDX + 18)
#else
#define BASE_IDX1 (BASE_IDX + 17)
#endif // HAL_PLATFORM_POWER_MANAGEMENT

DYNALIB_FN(BASE_IDX1 + 0, system, system_sleep_ext, int(const hal_sleep_config_t*, hal_wakeup_source_base_t**, void*))
   b5a48:	b508      	push	{r3, lr}
   b5a4a:	4b03      	ldr	r3, [pc, #12]	; (b5a58 <system_sleep_ext+0x10>)
   b5a4c:	681b      	ldr	r3, [r3, #0]
   b5a4e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   b5a52:	9301      	str	r3, [sp, #4]
   b5a54:	bd08      	pop	{r3, pc}
   b5a56:	0000      	.short	0x0000
   b5a58:	00030220 	.word	0x00030220

000b5a5c <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b5a5c:	b508      	push	{r3, lr}
   b5a5e:	4b02      	ldr	r3, [pc, #8]	; (b5a68 <network_connect+0xc>)
   b5a60:	681b      	ldr	r3, [r3, #0]
   b5a62:	685b      	ldr	r3, [r3, #4]
   b5a64:	9301      	str	r3, [sp, #4]
   b5a66:	bd08      	pop	{r3, pc}
   b5a68:	00030240 	.word	0x00030240

000b5a6c <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b5a6c:	b508      	push	{r3, lr}
   b5a6e:	4b02      	ldr	r3, [pc, #8]	; (b5a78 <network_connecting+0xc>)
   b5a70:	681b      	ldr	r3, [r3, #0]
   b5a72:	689b      	ldr	r3, [r3, #8]
   b5a74:	9301      	str	r3, [sp, #4]
   b5a76:	bd08      	pop	{r3, pc}
   b5a78:	00030240 	.word	0x00030240

000b5a7c <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b5a7c:	b508      	push	{r3, lr}
   b5a7e:	4b02      	ldr	r3, [pc, #8]	; (b5a88 <network_disconnect+0xc>)
   b5a80:	681b      	ldr	r3, [r3, #0]
   b5a82:	68db      	ldr	r3, [r3, #12]
   b5a84:	9301      	str	r3, [sp, #4]
   b5a86:	bd08      	pop	{r3, pc}
   b5a88:	00030240 	.word	0x00030240

000b5a8c <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b5a8c:	b508      	push	{r3, lr}
   b5a8e:	4b02      	ldr	r3, [pc, #8]	; (b5a98 <network_ready+0xc>)
   b5a90:	681b      	ldr	r3, [r3, #0]
   b5a92:	691b      	ldr	r3, [r3, #16]
   b5a94:	9301      	str	r3, [sp, #4]
   b5a96:	bd08      	pop	{r3, pc}
   b5a98:	00030240 	.word	0x00030240

000b5a9c <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b5a9c:	b508      	push	{r3, lr}
   b5a9e:	4b02      	ldr	r3, [pc, #8]	; (b5aa8 <network_on+0xc>)
   b5aa0:	681b      	ldr	r3, [r3, #0]
   b5aa2:	695b      	ldr	r3, [r3, #20]
   b5aa4:	9301      	str	r3, [sp, #4]
   b5aa6:	bd08      	pop	{r3, pc}
   b5aa8:	00030240 	.word	0x00030240

000b5aac <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b5aac:	b508      	push	{r3, lr}
   b5aae:	4b02      	ldr	r3, [pc, #8]	; (b5ab8 <network_off+0xc>)
   b5ab0:	681b      	ldr	r3, [r3, #0]
   b5ab2:	699b      	ldr	r3, [r3, #24]
   b5ab4:	9301      	str	r3, [sp, #4]
   b5ab6:	bd08      	pop	{r3, pc}
   b5ab8:	00030240 	.word	0x00030240

000b5abc <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b5abc:	b508      	push	{r3, lr}
   b5abe:	4b02      	ldr	r3, [pc, #8]	; (b5ac8 <network_listen+0xc>)
   b5ac0:	681b      	ldr	r3, [r3, #0]
   b5ac2:	69db      	ldr	r3, [r3, #28]
   b5ac4:	9301      	str	r3, [sp, #4]
   b5ac6:	bd08      	pop	{r3, pc}
   b5ac8:	00030240 	.word	0x00030240

000b5acc <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b5acc:	b508      	push	{r3, lr}
   b5ace:	4b02      	ldr	r3, [pc, #8]	; (b5ad8 <network_listening+0xc>)
   b5ad0:	681b      	ldr	r3, [r3, #0]
   b5ad2:	6a1b      	ldr	r3, [r3, #32]
   b5ad4:	9301      	str	r3, [sp, #4]
   b5ad6:	bd08      	pop	{r3, pc}
   b5ad8:	00030240 	.word	0x00030240

000b5adc <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b5adc:	b508      	push	{r3, lr}
   b5ade:	4b02      	ldr	r3, [pc, #8]	; (b5ae8 <network_set_listen_timeout+0xc>)
   b5ae0:	681b      	ldr	r3, [r3, #0]
   b5ae2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b5ae4:	9301      	str	r3, [sp, #4]
   b5ae6:	bd08      	pop	{r3, pc}
   b5ae8:	00030240 	.word	0x00030240

000b5aec <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b5aec:	b508      	push	{r3, lr}
   b5aee:	4b02      	ldr	r3, [pc, #8]	; (b5af8 <network_get_listen_timeout+0xc>)
   b5af0:	681b      	ldr	r3, [r3, #0]
   b5af2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b5af4:	9301      	str	r3, [sp, #4]
   b5af6:	bd08      	pop	{r3, pc}
   b5af8:	00030240 	.word	0x00030240

000b5afc <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b5afc:	b508      	push	{r3, lr}
   b5afe:	4b02      	ldr	r3, [pc, #8]	; (b5b08 <network_is_on+0xc>)
   b5b00:	681b      	ldr	r3, [r3, #0]
   b5b02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5b04:	9301      	str	r3, [sp, #4]
   b5b06:	bd08      	pop	{r3, pc}
   b5b08:	00030240 	.word	0x00030240

000b5b0c <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b5b0c:	b508      	push	{r3, lr}
   b5b0e:	4b02      	ldr	r3, [pc, #8]	; (b5b18 <network_is_off+0xc>)
   b5b10:	681b      	ldr	r3, [r3, #0]
   b5b12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b5b14:	9301      	str	r3, [sp, #4]
   b5b16:	bd08      	pop	{r3, pc}
   b5b18:	00030240 	.word	0x00030240

000b5b1c <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b5b1c:	b508      	push	{r3, lr}
   b5b1e:	4b02      	ldr	r3, [pc, #8]	; (b5b28 <spark_set_random_seed_from_cloud_handler+0xc>)
   b5b20:	681b      	ldr	r3, [r3, #0]
   b5b22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b5b24:	9301      	str	r3, [sp, #4]
   b5b26:	bd08      	pop	{r3, pc}
   b5b28:	00030244 	.word	0x00030244

000b5b2c <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b5b2c:	b508      	push	{r3, lr}
   b5b2e:	4b02      	ldr	r3, [pc, #8]	; (b5b38 <malloc+0xc>)
   b5b30:	681b      	ldr	r3, [r3, #0]
   b5b32:	681b      	ldr	r3, [r3, #0]
   b5b34:	9301      	str	r3, [sp, #4]
   b5b36:	bd08      	pop	{r3, pc}
   b5b38:	0003021c 	.word	0x0003021c

000b5b3c <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b5b3c:	b508      	push	{r3, lr}
   b5b3e:	4b02      	ldr	r3, [pc, #8]	; (b5b48 <free+0xc>)
   b5b40:	681b      	ldr	r3, [r3, #0]
   b5b42:	685b      	ldr	r3, [r3, #4]
   b5b44:	9301      	str	r3, [sp, #4]
   b5b46:	bd08      	pop	{r3, pc}
   b5b48:	0003021c 	.word	0x0003021c

000b5b4c <__assert_func>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b5b4c:	b508      	push	{r3, lr}
   b5b4e:	4b02      	ldr	r3, [pc, #8]	; (b5b58 <__assert_func+0xc>)
   b5b50:	681b      	ldr	r3, [r3, #0]
   b5b52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5b54:	9301      	str	r3, [sp, #4]
   b5b56:	bd08      	pop	{r3, pc}
   b5b58:	0003021c 	.word	0x0003021c

000b5b5c <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b5b5c:	b508      	push	{r3, lr}
   b5b5e:	4b02      	ldr	r3, [pc, #8]	; (b5b68 <newlib_impure_ptr_callback+0xc>)
   b5b60:	681b      	ldr	r3, [r3, #0]
   b5b62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b5b64:	9301      	str	r3, [sp, #4]
   b5b66:	bd08      	pop	{r3, pc}
   b5b68:	0003021c 	.word	0x0003021c

000b5b6c <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b5b6c:	2200      	movs	r2, #0
   b5b6e:	6840      	ldr	r0, [r0, #4]
   b5b70:	4611      	mov	r1, r2
   b5b72:	f7ff bfab 	b.w	b5acc <network_listening>

000b5b76 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b5b76:	2200      	movs	r2, #0
   b5b78:	6840      	ldr	r0, [r0, #4]
   b5b7a:	4611      	mov	r1, r2
   b5b7c:	f7ff bfb6 	b.w	b5aec <network_get_listen_timeout>

000b5b80 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b5b80:	6840      	ldr	r0, [r0, #4]
   b5b82:	2200      	movs	r2, #0
   b5b84:	f7ff bfaa 	b.w	b5adc <network_set_listen_timeout>

000b5b88 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b5b88:	6840      	ldr	r0, [r0, #4]
   b5b8a:	2200      	movs	r2, #0
   b5b8c:	f081 0101 	eor.w	r1, r1, #1
   b5b90:	f7ff bf94 	b.w	b5abc <network_listen>

000b5b94 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b5b94:	2300      	movs	r3, #0
   b5b96:	6840      	ldr	r0, [r0, #4]
   b5b98:	461a      	mov	r2, r3
   b5b9a:	4619      	mov	r1, r3
   b5b9c:	f7ff bf86 	b.w	b5aac <network_off>

000b5ba0 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b5ba0:	2300      	movs	r3, #0
   b5ba2:	6840      	ldr	r0, [r0, #4]
   b5ba4:	461a      	mov	r2, r3
   b5ba6:	4619      	mov	r1, r3
   b5ba8:	f7ff bf78 	b.w	b5a9c <network_on>

000b5bac <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b5bac:	2200      	movs	r2, #0
   b5bae:	6840      	ldr	r0, [r0, #4]
   b5bb0:	4611      	mov	r1, r2
   b5bb2:	f7ff bf6b 	b.w	b5a8c <network_ready>

000b5bb6 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b5bb6:	2200      	movs	r2, #0
   b5bb8:	6840      	ldr	r0, [r0, #4]
   b5bba:	4611      	mov	r1, r2
   b5bbc:	f7ff bf56 	b.w	b5a6c <network_connecting>

000b5bc0 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b5bc0:	6840      	ldr	r0, [r0, #4]
   b5bc2:	2200      	movs	r2, #0
   b5bc4:	2102      	movs	r1, #2
   b5bc6:	f7ff bf59 	b.w	b5a7c <network_disconnect>

000b5bca <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b5bca:	2300      	movs	r3, #0
   b5bcc:	6840      	ldr	r0, [r0, #4]
   b5bce:	461a      	mov	r2, r3
   b5bd0:	f7ff bf44 	b.w	b5a5c <network_connect>

000b5bd4 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b5bd4:	4b02      	ldr	r3, [pc, #8]	; (b5be0 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b5bd6:	2203      	movs	r2, #3
   b5bd8:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b5bda:	4a02      	ldr	r2, [pc, #8]	; (b5be4 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b5bdc:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b5bde:	4770      	bx	lr
   b5be0:	2003e6b8 	.word	0x2003e6b8
   b5be4:	000b768c 	.word	0x000b768c

000b5be8 <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   b5be8:	2100      	movs	r1, #0
   b5bea:	f7ff be89 	b.w	b5900 <hal_spi_release>

000b5bee <_ZN8SPIClass4lockEv.isra.0>:
    return hal_spi_acquire(_spi, nullptr);
   b5bee:	2100      	movs	r1, #0
   b5bf0:	f7ff be7e 	b.w	b58f0 <hal_spi_acquire>

000b5bf4 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b5bf4:	b510      	push	{r4, lr}
   b5bf6:	4604      	mov	r4, r0
   b5bf8:	4608      	mov	r0, r1
{
    _spi = spi;
   b5bfa:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b5bfc:	f7ff fe48 	bl	b5890 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b5c00:	2300      	movs	r3, #0
   b5c02:	6063      	str	r3, [r4, #4]
}
   b5c04:	4620      	mov	r0, r4
   b5c06:	bd10      	pop	{r4, pc}

000b5c08 <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   b5c08:	7800      	ldrb	r0, [r0, #0]
   b5c0a:	f7ff bfed 	b.w	b5be8 <_ZN8SPIClass6unlockEv.isra.0>
	...

000b5c10 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   b5c10:	0840      	lsrs	r0, r0, #1
{
   b5c12:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   b5c14:	6018      	str	r0, [r3, #0]
   b5c16:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   b5c18:	6818      	ldr	r0, [r3, #0]
   b5c1a:	4288      	cmp	r0, r1
   b5c1c:	b2e5      	uxtb	r5, r4
   b5c1e:	d906      	bls.n	b5c2e <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   b5c20:	3401      	adds	r4, #1
   b5c22:	2c08      	cmp	r4, #8
   b5c24:	d002      	beq.n	b5c2c <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   b5c26:	0840      	lsrs	r0, r0, #1
   b5c28:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   b5c2a:	e7f5      	b.n	b5c18 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   b5c2c:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   b5c2e:	4b02      	ldr	r3, [pc, #8]	; (b5c38 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   b5c30:	5d5b      	ldrb	r3, [r3, r5]
   b5c32:	7013      	strb	r3, [r2, #0]
}
   b5c34:	bd30      	pop	{r4, r5, pc}
   b5c36:	bf00      	nop
   b5c38:	000b76c0 	.word	0x000b76c0

000b5c3c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
   b5c3c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b5c40:	4606      	mov	r6, r0
   b5c42:	b08f      	sub	sp, #60	; 0x3c
    CHECK(lock());
   b5c44:	7800      	ldrb	r0, [r0, #0]
{
   b5c46:	460c      	mov	r4, r1
    CHECK(lock());
   b5c48:	f7ff ffd1 	bl	b5bee <_ZN8SPIClass4lockEv.isra.0>
   b5c4c:	2800      	cmp	r0, #0
   b5c4e:	db1b      	blt.n	b5c88 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4c>
    querySpiInfo(_spi, &spi_info);
   b5c50:	7835      	ldrb	r5, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
   b5c52:	2214      	movs	r2, #20
   b5c54:	2100      	movs	r1, #0
   b5c56:	a809      	add	r0, sp, #36	; 0x24
   b5c58:	f001 fbf4 	bl	b7444 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   b5c5c:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   b5c5e:	2200      	movs	r2, #0
   b5c60:	a909      	add	r1, sp, #36	; 0x24
   b5c62:	4628      	mov	r0, r5
    info->version = HAL_SPI_INFO_VERSION_1;
   b5c64:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
   b5c68:	f7ff fe22 	bl	b58b0 <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
   b5c6c:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
   b5c70:	b113      	cbz	r3, b5c78 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x3c>
   b5c72:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   b5c76:	b155      	cbz	r5, b5c8e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x52>
  {
   b5c78:	2700      	movs	r7, #0
   b5c7a:	46b9      	mov	r9, r7
   b5c7c:	46b8      	mov	r8, r7
   b5c7e:	2501      	movs	r5, #1
    if (default_ && other.default_)
   b5c80:	7923      	ldrb	r3, [r4, #4]
   b5c82:	b15d      	cbz	r5, b5c9c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x60>
   b5c84:	b1c3      	cbz	r3, b5cb8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
    return 0;
   b5c86:	2000      	movs	r0, #0
}
   b5c88:	b00f      	add	sp, #60	; 0x3c
   b5c8a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
   b5c8e:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   b5c92:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   b5c96:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
   b5c9a:	e7f1      	b.n	b5c80 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x44>
    if (default_ == other.default_ &&
   b5c9c:	2b00      	cmp	r3, #0
   b5c9e:	d135      	bne.n	b5d0c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xd0>
   b5ca0:	68a3      	ldr	r3, [r4, #8]
   b5ca2:	4543      	cmp	r3, r8
   b5ca4:	d108      	bne.n	b5cb8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
        bitOrder_ == other.bitOrder_ &&
   b5ca6:	f88d 9020 	strb.w	r9, [sp, #32]
   b5caa:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   b5cae:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   b5cb2:	89a3      	ldrh	r3, [r4, #12]
   b5cb4:	429a      	cmp	r2, r3
   b5cb6:	d0e6      	beq.n	b5c86 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
            uint8_t divisor = 0;
   b5cb8:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   b5cba:	68a1      	ldr	r1, [r4, #8]
            uint8_t divisor = 0;
   b5cbc:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   b5cc0:	980a      	ldr	r0, [sp, #40]	; 0x28
   b5cc2:	ab04      	add	r3, sp, #16
   b5cc4:	f10d 020f 	add.w	r2, sp, #15
   b5cc8:	f7ff ffa2 	bl	b5c10 <_ZN8SPIClass19computeClockDividerEjjRhRj>
    if (default_ && other.default_)
   b5ccc:	7921      	ldrb	r1, [r4, #4]
   b5cce:	b985      	cbnz	r5, b5cf2 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
    if (default_ == other.default_ &&
   b5cd0:	b989      	cbnz	r1, b5cf6 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   b5cd2:	68a3      	ldr	r3, [r4, #8]
   b5cd4:	4543      	cmp	r3, r8
   b5cd6:	d30e      	bcc.n	b5cf6 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
        bitOrder_ == other.bitOrder_ &&
   b5cd8:	f88d 9020 	strb.w	r9, [sp, #32]
   b5cdc:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   b5ce0:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   b5ce4:	89a3      	ldrh	r3, [r4, #12]
   b5ce6:	429a      	cmp	r2, r3
   b5ce8:	d105      	bne.n	b5cf6 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   b5cea:	9b04      	ldr	r3, [sp, #16]
   b5cec:	4543      	cmp	r3, r8
   b5cee:	d102      	bne.n	b5cf6 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   b5cf0:	e7c9      	b.n	b5c86 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
    if (default_ && other.default_)
   b5cf2:	2900      	cmp	r1, #0
   b5cf4:	d1f9      	bne.n	b5cea <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xae>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
   b5cf6:	2300      	movs	r3, #0
   b5cf8:	9301      	str	r3, [sp, #4]
   b5cfa:	7b63      	ldrb	r3, [r4, #13]
   b5cfc:	9300      	str	r3, [sp, #0]
   b5cfe:	f89d 200f 	ldrb.w	r2, [sp, #15]
   b5d02:	7b23      	ldrb	r3, [r4, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
   b5d04:	7830      	ldrb	r0, [r6, #0]
   b5d06:	f7ff fdeb 	bl	b58e0 <hal_spi_set_settings>
   b5d0a:	e7bc      	b.n	b5c86 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
   b5d0c:	e9cd 5500 	strd	r5, r5, [sp]
   b5d10:	462b      	mov	r3, r5
   b5d12:	462a      	mov	r2, r5
   b5d14:	2101      	movs	r1, #1
   b5d16:	e7f5      	b.n	b5d04 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc8>

000b5d18 <_ZN8SPIClass8transferEPKvPvjPFvvE>:
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
}

void SPIClass::transfer(const void* tx_buffer, void* rx_buffer, size_t length,
                        wiring_spi_dma_transfercomplete_callback_t user_callback)
{
   b5d18:	b530      	push	{r4, r5, lr}
   b5d1a:	b087      	sub	sp, #28
   b5d1c:	4604      	mov	r4, r0
   b5d1e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    hal_spi_transfer_dma(_spi, tx_buffer, rx_buffer, length, user_callback);
   b5d20:	9500      	str	r5, [sp, #0]
   b5d22:	7800      	ldrb	r0, [r0, #0]
   b5d24:	f7ff fdcc 	bl	b58c0 <hal_spi_transfer_dma>
    if (user_callback == NULL)
   b5d28:	b93d      	cbnz	r5, b5d3a <_ZN8SPIClass8transferEPKvPvjPFvvE+0x22>
    {
        hal_spi_transfer_status_t st;
        do
        {
            hal_spi_transfer_dma_status(_spi, &st);
   b5d2a:	7820      	ldrb	r0, [r4, #0]
   b5d2c:	a902      	add	r1, sp, #8
   b5d2e:	f7ff fdcf 	bl	b58d0 <hal_spi_transfer_dma_status>
        } while (st.transfer_ongoing);
   b5d32:	f89d 3014 	ldrb.w	r3, [sp, #20]
   b5d36:	07db      	lsls	r3, r3, #31
   b5d38:	d4f7      	bmi.n	b5d2a <_ZN8SPIClass8transferEPKvPvjPFvvE+0x12>
    }
}
   b5d3a:	b007      	add	sp, #28
   b5d3c:	bd30      	pop	{r4, r5, pc}

000b5d3e <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   b5d3e:	b510      	push	{r4, lr}
   b5d40:	4604      	mov	r4, r0
        if (wakeupSource_) {
   b5d42:	6800      	ldr	r0, [r0, #0]
   b5d44:	b118      	cbz	r0, b5d4e <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv+0x10>
            free(wakeupSource_);
   b5d46:	f7ff fef9 	bl	b5b3c <free>
            wakeupSource_ = nullptr;
   b5d4a:	2300      	movs	r3, #0
   b5d4c:	6023      	str	r3, [r4, #0]
        }
    }
   b5d4e:	bd10      	pop	{r4, pc}

000b5d50 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t.isra.0>:

    int copyWakeupSource(hal_wakeup_source_base_t* source) {
   b5d50:	b538      	push	{r3, r4, r5, lr}
   b5d52:	460c      	mov	r4, r1
   b5d54:	4605      	mov	r5, r0
        freeWakeupSourceMemory();
   b5d56:	f7ff fff2 	bl	b5d3e <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv>
        if (source) {
   b5d5a:	b154      	cbz	r4, b5d72 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t.isra.0+0x22>
            wakeupSource_ = (hal_wakeup_source_base_t*)malloc(source->size);
   b5d5c:	8820      	ldrh	r0, [r4, #0]
   b5d5e:	f7ff fee5 	bl	b5b2c <malloc>
   b5d62:	6028      	str	r0, [r5, #0]
            if (wakeupSource_) {
   b5d64:	b128      	cbz	r0, b5d72 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t.isra.0+0x22>
                memcpy(wakeupSource_, source, source->size);
   b5d66:	8822      	ldrh	r2, [r4, #0]
   b5d68:	4621      	mov	r1, r4
            } else {
                return SYSTEM_ERROR_NO_MEMORY;
            }
        }
        return SYSTEM_ERROR_NONE;
    }
   b5d6a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
                memcpy(wakeupSource_, source, source->size);
   b5d6e:	f001 bb5b 	b.w	b7428 <memcpy>
    }
   b5d72:	bd38      	pop	{r3, r4, r5, pc}

000b5d74 <_ZN17SystemSleepResultaSEOS_.isra.0>:
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   b5d74:	b538      	push	{r3, r4, r5, lr}
        error_ = result.error_;
   b5d76:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
   b5d7a:	8083      	strh	r3, [r0, #4]
        compatResult_ = result.compatResult_;
   b5d7c:	f8d1 3006 	ldr.w	r3, [r1, #6]
   b5d80:	f8c0 3006 	str.w	r3, [r0, #6]
   b5d84:	894b      	ldrh	r3, [r1, #10]
   b5d86:	8143      	strh	r3, [r0, #10]
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   b5d88:	460c      	mov	r4, r1
   b5d8a:	4605      	mov	r5, r0
        freeWakeupSourceMemory();
   b5d8c:	f7ff ffd7 	bl	b5d3e <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv>
        if (result.wakeupSource_) {
   b5d90:	6823      	ldr	r3, [r4, #0]
   b5d92:	b113      	cbz	r3, b5d9a <_ZN17SystemSleepResultaSEOS_.isra.0+0x26>
            wakeupSource_ = result.wakeupSource_;
   b5d94:	602b      	str	r3, [r5, #0]
            result.wakeupSource_ = nullptr;
   b5d96:	2300      	movs	r3, #0
   b5d98:	6023      	str	r3, [r4, #0]
    }
   b5d9a:	bd38      	pop	{r3, r4, r5, pc}

000b5d9c <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE>:
void SystemClass::enterSafeMode(SystemResetFlags flags)
{
    system_reset(SYSTEM_RESET_MODE_SAFE, 0, 0, flags.value(), nullptr);
}

SystemSleepResult SystemClass::sleep(const particle::SystemSleepConfiguration& config) {
   b5d9c:	b5f0      	push	{r4, r5, r6, r7, lr}
   b5d9e:	4d2b      	ldr	r5, [pc, #172]	; (b5e4c <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb0>)
    }

    // It doesn't guarantee the combination of sleep mode and
    // wakeup sources that the platform supports.
    bool valid() const {
        if (!valid_) {
   b5da0:	7d0b      	ldrb	r3, [r1, #20]
   b5da2:	4604      	mov	r4, r0
   b5da4:	b08b      	sub	sp, #44	; 0x2c
   b5da6:	4608      	mov	r0, r1
   b5da8:	1daf      	adds	r7, r5, #6
   b5daa:	2b00      	cmp	r3, #0
   b5dac:	d036      	beq.n	b5e1c <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x80>
        return static_cast<SystemSleepMode>(config_->mode);
   b5dae:	680b      	ldr	r3, [r1, #0]
            return valid_;
        }
        if (sleepMode() == SystemSleepMode::NONE) {
   b5db0:	791b      	ldrb	r3, [r3, #4]
   b5db2:	2b00      	cmp	r3, #0
   b5db4:	d032      	beq.n	b5e1c <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x80>
    SleepResult() {}
   b5db6:	4b26      	ldr	r3, [pc, #152]	; (b5e50 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb4>)
   b5db8:	9304      	str	r3, [sp, #16]
              error_(SYSTEM_ERROR_NONE) {
   b5dba:	2200      	movs	r2, #0
    if (!config.valid()) {
        LOG(ERROR, "System sleep configuration is invalid.");
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
    } else {
        SystemSleepResult result;
        int ret = system_sleep_ext(config.halConfig(), result.halWakeupSource(), nullptr);
   b5dbc:	a902      	add	r1, sp, #8
   b5dbe:	3004      	adds	r0, #4
   b5dc0:	e9cd 2202 	strd	r2, r2, [sp, #8]
   b5dc4:	f7ff fe40 	bl	b5a48 <system_sleep_ext>
        compatResult_ = result.compatResult_;
   b5dc8:	f8dd 300e 	ldr.w	r3, [sp, #14]
   b5dcc:	f8c5 3006 	str.w	r3, [r5, #6]
        result.setError(static_cast<system_error_t>(ret));
   b5dd0:	b200      	sxth	r0, r0
   b5dd2:	f8bd 3012 	ldrh.w	r3, [sp, #18]
        error_ = error;
   b5dd6:	f8ad 000c 	strh.w	r0, [sp, #12]
        error_ = result.error_;
   b5dda:	80a8      	strh	r0, [r5, #4]
        copyWakeupSource(result.wakeupSource_);
   b5ddc:	9902      	ldr	r1, [sp, #8]
        compatResult_ = result.compatResult_;
   b5dde:	80bb      	strh	r3, [r7, #4]
        copyWakeupSource(result.wakeupSource_);
   b5de0:	4628      	mov	r0, r5
   b5de2:	f7ff ffb5 	bl	b5d50 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t.isra.0>
        freeWakeupSourceMemory();
   b5de6:	a802      	add	r0, sp, #8
   b5de8:	f7ff ffa9 	bl	b5d3e <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv>
              error_(SYSTEM_ERROR_NONE) {
   b5dec:	2300      	movs	r3, #0
   b5dee:	6023      	str	r3, [r4, #0]
   b5df0:	80a3      	strh	r3, [r4, #4]
    SleepResult() {}
   b5df2:	71a3      	strb	r3, [r4, #6]
   b5df4:	8123      	strh	r3, [r4, #8]
   b5df6:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b5dfa:	8163      	strh	r3, [r4, #10]
        error_ = result.error_;
   b5dfc:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
   b5e00:	80a3      	strh	r3, [r4, #4]
        compatResult_ = result.compatResult_;
   b5e02:	f8d5 3006 	ldr.w	r3, [r5, #6]
   b5e06:	f8c4 3006 	str.w	r3, [r4, #6]
   b5e0a:	88bb      	ldrh	r3, [r7, #4]
        copyWakeupSource(result.wakeupSource_);
   b5e0c:	6829      	ldr	r1, [r5, #0]
        compatResult_ = result.compatResult_;
   b5e0e:	8163      	strh	r3, [r4, #10]
        copyWakeupSource(result.wakeupSource_);
   b5e10:	4620      	mov	r0, r4
   b5e12:	f7ff ff9d 	bl	b5d50 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t.isra.0>
        System.systemSleepResult_ = result;
    }
    return System.systemSleepResult_;
}
   b5e16:	4620      	mov	r0, r4
   b5e18:	b00b      	add	sp, #44	; 0x2c
   b5e1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        LOG(ERROR, "System sleep configuration is invalid.");
   b5e1c:	2600      	movs	r6, #0
   b5e1e:	2320      	movs	r3, #32
   b5e20:	e9cd 3602 	strd	r3, r6, [sp, #8]
   b5e24:	4b0b      	ldr	r3, [pc, #44]	; (b5e54 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb8>)
   b5e26:	9300      	str	r3, [sp, #0]
   b5e28:	aa02      	add	r2, sp, #8
   b5e2a:	4633      	mov	r3, r6
   b5e2c:	490a      	ldr	r1, [pc, #40]	; (b5e58 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xbc>)
   b5e2e:	2032      	movs	r0, #50	; 0x32
   b5e30:	f7ff fdd6 	bl	b59e0 <log_message>
            : wakeupSource_(nullptr),
   b5e34:	4b06      	ldr	r3, [pc, #24]	; (b5e50 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb4>)
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
   b5e36:	4805      	ldr	r0, [pc, #20]	; (b5e4c <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb0>)
              error_(SYSTEM_ERROR_NONE) {
   b5e38:	9602      	str	r6, [sp, #8]
            : wakeupSource_(nullptr),
   b5e3a:	f64f 62f2 	movw	r2, #65266	; 0xfef2
   b5e3e:	a902      	add	r1, sp, #8
   b5e40:	e9cd 2303 	strd	r2, r3, [sp, #12]
   b5e44:	f7ff ff96 	bl	b5d74 <_ZN17SystemSleepResultaSEOS_.isra.0>
   b5e48:	e7cd      	b.n	b5de6 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x4a>
   b5e4a:	bf00      	nop
   b5e4c:	2003e6c0 	.word	0x2003e6c0
   b5e50:	ffff0000 	.word	0xffff0000
   b5e54:	000b76cf 	.word	0x000b76cf
   b5e58:	000b76c8 	.word	0x000b76c8

000b5e5c <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b5e5c:	4b05      	ldr	r3, [pc, #20]	; (b5e74 <_GLOBAL__sub_I_System+0x18>)
   b5e5e:	2202      	movs	r2, #2
   b5e60:	601a      	str	r2, [r3, #0]
              error_(SYSTEM_ERROR_NONE) {
   b5e62:	4b05      	ldr	r3, [pc, #20]	; (b5e78 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b5e64:	4a05      	ldr	r2, [pc, #20]	; (b5e7c <_GLOBAL__sub_I_System+0x20>)
   b5e66:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b5e68:	2000      	movs	r0, #0
   b5e6a:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b5e6e:	f7ff bdbf 	b.w	b59f0 <set_system_mode>
   b5e72:	bf00      	nop
   b5e74:	2003e6cc 	.word	0x2003e6cc
   b5e78:	2003e6c0 	.word	0x2003e6c0
   b5e7c:	ffff0000 	.word	0xffff0000

000b5e80 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b5e80:	4802      	ldr	r0, [pc, #8]	; (b5e8c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b5e82:	2300      	movs	r3, #0
   b5e84:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b5e86:	f7ff bc5b 	b.w	b5740 <os_mutex_recursive_create>
   b5e8a:	bf00      	nop
   b5e8c:	2003e6d0 	.word	0x2003e6d0

000b5e90 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b5e90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5e92:	4606      	mov	r6, r0
   b5e94:	460d      	mov	r5, r1
  size_t n = 0;
   b5e96:	188f      	adds	r7, r1, r2
   b5e98:	2400      	movs	r4, #0
  while (size--) {
   b5e9a:	42bd      	cmp	r5, r7
   b5e9c:	d00c      	beq.n	b5eb8 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b5e9e:	6833      	ldr	r3, [r6, #0]
   b5ea0:	f815 1b01 	ldrb.w	r1, [r5], #1
   b5ea4:	689b      	ldr	r3, [r3, #8]
   b5ea6:	4630      	mov	r0, r6
   b5ea8:	4798      	blx	r3
     if (chunk>=0)
   b5eaa:	1e03      	subs	r3, r0, #0
   b5eac:	db01      	blt.n	b5eb2 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b5eae:	441c      	add	r4, r3
  while (size--) {
   b5eb0:	e7f3      	b.n	b5e9a <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b5eb2:	2c00      	cmp	r4, #0
   b5eb4:	bf08      	it	eq
   b5eb6:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b5eb8:	4620      	mov	r0, r4
   b5eba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b5ebc <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   b5ebc:	b513      	push	{r0, r1, r4, lr}
   b5ebe:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   b5ec0:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b5ec2:	b159      	cbz	r1, b5edc <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b5ec4:	9101      	str	r1, [sp, #4]
   b5ec6:	f001 faf3 	bl	b74b0 <strlen>
   b5eca:	6823      	ldr	r3, [r4, #0]
   b5ecc:	9901      	ldr	r1, [sp, #4]
   b5ece:	68db      	ldr	r3, [r3, #12]
   b5ed0:	4602      	mov	r2, r0
   b5ed2:	4620      	mov	r0, r4
    }
   b5ed4:	b002      	add	sp, #8
   b5ed6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b5eda:	4718      	bx	r3
    }
   b5edc:	b002      	add	sp, #8
   b5ede:	bd10      	pop	{r4, pc}

000b5ee0 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   b5ee0:	b508      	push	{r3, lr}
  return write(str);
   b5ee2:	f7ff ffeb 	bl	b5ebc <_ZN5Print5writeEPKc>
}
   b5ee6:	bd08      	pop	{r3, pc}

000b5ee8 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   b5ee8:	6803      	ldr	r3, [r0, #0]
   b5eea:	689b      	ldr	r3, [r3, #8]
   b5eec:	4718      	bx	r3

000b5eee <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b5eee:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b5ef0:	210d      	movs	r1, #13
{
   b5ef2:	4605      	mov	r5, r0
  size_t n = print('\r');
   b5ef4:	f7ff fff8 	bl	b5ee8 <_ZN5Print5printEc>
  n += print('\n');
   b5ef8:	210a      	movs	r1, #10
  size_t n = print('\r');
   b5efa:	4604      	mov	r4, r0
  n += print('\n');
   b5efc:	4628      	mov	r0, r5
   b5efe:	f7ff fff3 	bl	b5ee8 <_ZN5Print5printEc>
  return n;
}
   b5f02:	4420      	add	r0, r4
   b5f04:	bd38      	pop	{r3, r4, r5, pc}

000b5f06 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   b5f06:	b538      	push	{r3, r4, r5, lr}
   b5f08:	4605      	mov	r5, r0
  return write(str);
   b5f0a:	f7ff ffd7 	bl	b5ebc <_ZN5Print5writeEPKc>
   b5f0e:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   b5f10:	4628      	mov	r0, r5
   b5f12:	f7ff ffec 	bl	b5eee <_ZN5Print7printlnEv>
  return n;
}
   b5f16:	4420      	add	r0, r4
   b5f18:	bd38      	pop	{r3, r4, r5, pc}

000b5f1a <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b5f1a:	b530      	push	{r4, r5, lr}
   b5f1c:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b5f1e:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b5f20:	2a01      	cmp	r2, #1
  *str = '\0';
   b5f22:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b5f26:	bf98      	it	ls
   b5f28:	220a      	movls	r2, #10
   b5f2a:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b5f2c:	460d      	mov	r5, r1
   b5f2e:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b5f32:	fb01 5312 	mls	r3, r1, r2, r5
   b5f36:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b5f3a:	2b09      	cmp	r3, #9
   b5f3c:	bf94      	ite	ls
   b5f3e:	3330      	addls	r3, #48	; 0x30
   b5f40:	3337      	addhi	r3, #55	; 0x37
   b5f42:	b2db      	uxtb	r3, r3
  } while(n);
   b5f44:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b5f46:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b5f4a:	d9ef      	bls.n	b5f2c <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b5f4c:	4621      	mov	r1, r4
   b5f4e:	f7ff ffb5 	bl	b5ebc <_ZN5Print5writeEPKc>
}
   b5f52:	b00b      	add	sp, #44	; 0x2c
   b5f54:	bd30      	pop	{r4, r5, pc}
	...

000b5f58 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
   b5f58:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5f5c:	ec55 4b10 	vmov	r4, r5, d0
   b5f60:	4606      	mov	r6, r0
   b5f62:	460f      	mov	r7, r1
  size_t n = 0;

  if (isnan(number)) return print("nan");
   b5f64:	ee10 2a10 	vmov	r2, s0
   b5f68:	ee10 0a10 	vmov	r0, s0
   b5f6c:	462b      	mov	r3, r5
   b5f6e:	4629      	mov	r1, r5
   b5f70:	f001 f9a6 	bl	b72c0 <__aeabi_dcmpun>
   b5f74:	b140      	cbz	r0, b5f88 <_ZN5Print10printFloatEdh+0x30>
  return write(str);
   b5f76:	4953      	ldr	r1, [pc, #332]	; (b60c4 <_ZN5Print10printFloatEdh+0x16c>)
   b5f78:	4630      	mov	r0, r6
   b5f7a:	f7ff ff9f 	bl	b5ebc <_ZN5Print5writeEPKc>
   b5f7e:	4682      	mov	sl, r0
    n += print(toPrint);
    remainder -= toPrint;
  }

  return n;
}
   b5f80:	4650      	mov	r0, sl
   b5f82:	b003      	add	sp, #12
   b5f84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
   b5f88:	f025 4900 	bic.w	r9, r5, #2147483648	; 0x80000000
  if (isinf(number)) return print("inf");
   b5f8c:	4b4e      	ldr	r3, [pc, #312]	; (b60c8 <_ZN5Print10printFloatEdh+0x170>)
   b5f8e:	f04f 32ff 	mov.w	r2, #4294967295
   b5f92:	4620      	mov	r0, r4
   b5f94:	4649      	mov	r1, r9
   b5f96:	f001 f993 	bl	b72c0 <__aeabi_dcmpun>
   b5f9a:	b948      	cbnz	r0, b5fb0 <_ZN5Print10printFloatEdh+0x58>
   b5f9c:	4b4a      	ldr	r3, [pc, #296]	; (b60c8 <_ZN5Print10printFloatEdh+0x170>)
   b5f9e:	f04f 32ff 	mov.w	r2, #4294967295
   b5fa2:	4620      	mov	r0, r4
   b5fa4:	4649      	mov	r1, r9
   b5fa6:	f001 f96d 	bl	b7284 <__aeabi_dcmple>
   b5faa:	b908      	cbnz	r0, b5fb0 <_ZN5Print10printFloatEdh+0x58>
  return write(str);
   b5fac:	4947      	ldr	r1, [pc, #284]	; (b60cc <_ZN5Print10printFloatEdh+0x174>)
   b5fae:	e7e3      	b.n	b5f78 <_ZN5Print10printFloatEdh+0x20>
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
   b5fb0:	4b47      	ldr	r3, [pc, #284]	; (b60d0 <_ZN5Print10printFloatEdh+0x178>)
   b5fb2:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   b5fb6:	4620      	mov	r0, r4
   b5fb8:	4629      	mov	r1, r5
   b5fba:	f001 f977 	bl	b72ac <__aeabi_dcmpgt>
   b5fbe:	b108      	cbz	r0, b5fc4 <_ZN5Print10printFloatEdh+0x6c>
  return write(str);
   b5fc0:	4944      	ldr	r1, [pc, #272]	; (b60d4 <_ZN5Print10printFloatEdh+0x17c>)
   b5fc2:	e7d9      	b.n	b5f78 <_ZN5Print10printFloatEdh+0x20>
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
   b5fc4:	4b44      	ldr	r3, [pc, #272]	; (b60d8 <_ZN5Print10printFloatEdh+0x180>)
   b5fc6:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   b5fca:	4620      	mov	r0, r4
   b5fcc:	4629      	mov	r1, r5
   b5fce:	f001 f94f 	bl	b7270 <__aeabi_dcmplt>
   b5fd2:	2800      	cmp	r0, #0
   b5fd4:	d1f4      	bne.n	b5fc0 <_ZN5Print10printFloatEdh+0x68>
  if (number < 0.0)
   b5fd6:	2200      	movs	r2, #0
   b5fd8:	2300      	movs	r3, #0
   b5fda:	4620      	mov	r0, r4
   b5fdc:	4629      	mov	r1, r5
   b5fde:	f001 f947 	bl	b7270 <__aeabi_dcmplt>
   b5fe2:	b1d0      	cbz	r0, b601a <_ZN5Print10printFloatEdh+0xc2>
     n += print('-');
   b5fe4:	212d      	movs	r1, #45	; 0x2d
   b5fe6:	4630      	mov	r0, r6
   b5fe8:	f7ff ff7e 	bl	b5ee8 <_ZN5Print5printEc>
     number = -number;
   b5fec:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
     n += print('-');
   b5ff0:	4682      	mov	sl, r0
     number = -number;
   b5ff2:	461d      	mov	r5, r3
  double rounding = 0.5;
   b5ff4:	4939      	ldr	r1, [pc, #228]	; (b60dc <_ZN5Print10printFloatEdh+0x184>)
    rounding /= 10.0;
   b5ff6:	f8df 90ec 	ldr.w	r9, [pc, #236]	; b60e4 <_ZN5Print10printFloatEdh+0x18c>
  size_t n = 0;
   b5ffa:	f04f 0b00 	mov.w	fp, #0
  double rounding = 0.5;
   b5ffe:	2000      	movs	r0, #0
    rounding /= 10.0;
   b6000:	f04f 0800 	mov.w	r8, #0
  for (uint8_t i=0; i<digits; ++i)
   b6004:	fa5f f38b 	uxtb.w	r3, fp
   b6008:	429f      	cmp	r7, r3
   b600a:	d908      	bls.n	b601e <_ZN5Print10printFloatEdh+0xc6>
    rounding /= 10.0;
   b600c:	4642      	mov	r2, r8
   b600e:	464b      	mov	r3, r9
   b6010:	f000 ffe6 	bl	b6fe0 <__aeabi_ddiv>
  for (uint8_t i=0; i<digits; ++i)
   b6014:	f10b 0b01 	add.w	fp, fp, #1
   b6018:	e7f4      	b.n	b6004 <_ZN5Print10printFloatEdh+0xac>
  size_t n = 0;
   b601a:	4682      	mov	sl, r0
   b601c:	e7ea      	b.n	b5ff4 <_ZN5Print10printFloatEdh+0x9c>
  number += rounding;
   b601e:	4622      	mov	r2, r4
   b6020:	462b      	mov	r3, r5
   b6022:	f000 fcfd 	bl	b6a20 <__adddf3>
   b6026:	460d      	mov	r5, r1
   b6028:	4604      	mov	r4, r0
  unsigned long int_part = (unsigned long)number;
   b602a:	f001 f987 	bl	b733c <__aeabi_d2uiz>
   b602e:	4680      	mov	r8, r0
  double remainder = number - (double)int_part;
   b6030:	f000 fe32 	bl	b6c98 <__aeabi_ui2d>
   b6034:	4602      	mov	r2, r0
   b6036:	460b      	mov	r3, r1
   b6038:	4620      	mov	r0, r4
   b603a:	4629      	mov	r1, r5
   b603c:	f000 fcee 	bl	b6a1c <__aeabi_dsub>
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b6040:	220a      	movs	r2, #10
   b6042:	4604      	mov	r4, r0
   b6044:	460d      	mov	r5, r1
   b6046:	4630      	mov	r0, r6
   b6048:	4641      	mov	r1, r8
   b604a:	f7ff ff66 	bl	b5f1a <_ZN5Print11printNumberEmh>
  n += print(int_part);
   b604e:	4482      	add	sl, r0
  if (digits > 0) {
   b6050:	2f00      	cmp	r7, #0
   b6052:	d095      	beq.n	b5f80 <_ZN5Print10printFloatEdh+0x28>
  return write(str);
   b6054:	4922      	ldr	r1, [pc, #136]	; (b60e0 <_ZN5Print10printFloatEdh+0x188>)
    remainder *= 10.0;
   b6056:	f8df 908c 	ldr.w	r9, [pc, #140]	; b60e4 <_ZN5Print10printFloatEdh+0x18c>
  return write(str);
   b605a:	4630      	mov	r0, r6
   b605c:	f7ff ff2e 	bl	b5ebc <_ZN5Print5writeEPKc>
    remainder *= 10.0;
   b6060:	f04f 0800 	mov.w	r8, #0
    n += print(".");
   b6064:	4482      	add	sl, r0
  while (digits-- > 0)
   b6066:	2f00      	cmp	r7, #0
   b6068:	d08a      	beq.n	b5f80 <_ZN5Print10printFloatEdh+0x28>
    remainder *= 10.0;
   b606a:	4642      	mov	r2, r8
   b606c:	464b      	mov	r3, r9
   b606e:	4620      	mov	r0, r4
   b6070:	4629      	mov	r1, r5
   b6072:	f000 fe8b 	bl	b6d8c <__aeabi_dmul>
   b6076:	4604      	mov	r4, r0
   b6078:	460d      	mov	r5, r1
    int toPrint = int(remainder);
   b607a:	f001 f937 	bl	b72ec <__aeabi_d2iz>
        if (n < 0 && base == 10) {
   b607e:	f1b0 0b00 	subs.w	fp, r0, #0
   b6082:	da1c      	bge.n	b60be <_ZN5Print10printFloatEdh+0x166>
            t = print('-');
   b6084:	212d      	movs	r1, #45	; 0x2d
   b6086:	4630      	mov	r0, r6
   b6088:	f7ff ff2e 	bl	b5ee8 <_ZN5Print5printEc>
            val = -n;
   b608c:	f1cb 0100 	rsb	r1, fp, #0
            t = print('-');
   b6090:	4603      	mov	r3, r0
        return printNumber(val, base) + t;
   b6092:	220a      	movs	r2, #10
   b6094:	4630      	mov	r0, r6
   b6096:	9301      	str	r3, [sp, #4]
   b6098:	f7ff ff3f 	bl	b5f1a <_ZN5Print11printNumberEmh>
   b609c:	9b01      	ldr	r3, [sp, #4]
   b609e:	4418      	add	r0, r3
    n += print(toPrint);
   b60a0:	4482      	add	sl, r0
    remainder -= toPrint;
   b60a2:	4658      	mov	r0, fp
   b60a4:	f000 fe08 	bl	b6cb8 <__aeabi_i2d>
   b60a8:	4602      	mov	r2, r0
   b60aa:	460b      	mov	r3, r1
   b60ac:	4620      	mov	r0, r4
   b60ae:	4629      	mov	r1, r5
   b60b0:	f000 fcb4 	bl	b6a1c <__aeabi_dsub>
   b60b4:	3f01      	subs	r7, #1
   b60b6:	4604      	mov	r4, r0
   b60b8:	460d      	mov	r5, r1
   b60ba:	b2ff      	uxtb	r7, r7
  while (digits-- > 0)
   b60bc:	e7d3      	b.n	b6066 <_ZN5Print10printFloatEdh+0x10e>
            val = n;
   b60be:	4659      	mov	r1, fp
        size_t t = 0;
   b60c0:	2300      	movs	r3, #0
   b60c2:	e7e6      	b.n	b6092 <_ZN5Print10printFloatEdh+0x13a>
   b60c4:	000b76f6 	.word	0x000b76f6
   b60c8:	7fefffff 	.word	0x7fefffff
   b60cc:	000b76fa 	.word	0x000b76fa
   b60d0:	41efffff 	.word	0x41efffff
   b60d4:	000b76fe 	.word	0x000b76fe
   b60d8:	c1efffff 	.word	0xc1efffff
   b60dc:	3fe00000 	.word	0x3fe00000
   b60e0:	000b76f4 	.word	0x000b76f4
   b60e4:	40240000 	.word	0x40240000

000b60e8 <_ZN5Print7printlnEdi>:
{
   b60e8:	b538      	push	{r3, r4, r5, lr}
  return printFloat(n, digits);
   b60ea:	b2c9      	uxtb	r1, r1
{
   b60ec:	4605      	mov	r5, r0
  return printFloat(n, digits);
   b60ee:	f7ff ff33 	bl	b5f58 <_ZN5Print10printFloatEdh>
   b60f2:	4604      	mov	r4, r0
  n += println();
   b60f4:	4628      	mov	r0, r5
   b60f6:	f7ff fefa 	bl	b5eee <_ZN5Print7printlnEv>
}
   b60fa:	4420      	add	r0, r4
   b60fc:	bd38      	pop	{r3, r4, r5, pc}

000b60fe <_ZN5Print7printlnEfi>:
{
   b60fe:	b538      	push	{r3, r4, r5, lr}
   b6100:	4604      	mov	r4, r0
   b6102:	ee10 0a10 	vmov	r0, s0
   b6106:	460d      	mov	r5, r1
    return println((double)num, digits);
   b6108:	f000 fde8 	bl	b6cdc <__aeabi_f2d>
   b610c:	ec41 0b10 	vmov	d0, r0, r1
   b6110:	4629      	mov	r1, r5
   b6112:	4620      	mov	r0, r4
}
   b6114:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return println((double)num, digits);
   b6118:	f7ff bfe6 	b.w	b60e8 <_ZN5Print7printlnEdi>

000b611c <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b611c:	4b01      	ldr	r3, [pc, #4]	; (b6124 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b611e:	4a02      	ldr	r2, [pc, #8]	; (b6128 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b6120:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b6122:	4770      	bx	lr
   b6124:	2003e6d4 	.word	0x2003e6d4
   b6128:	000b7702 	.word	0x000b7702

000b612c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b612c:	4b02      	ldr	r3, [pc, #8]	; (b6138 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b612e:	681a      	ldr	r2, [r3, #0]
   b6130:	4b02      	ldr	r3, [pc, #8]	; (b613c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b6132:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b6134:	4770      	bx	lr
   b6136:	bf00      	nop
   b6138:	2003e618 	.word	0x2003e618
   b613c:	2003e6d8 	.word	0x2003e6d8

000b6140 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b6140:	2100      	movs	r1, #0
   b6142:	f7ff bc5d 	b.w	b5a00 <system_delay_ms>

000b6146 <_ZN8RGBClass7controlEb>:
{
    return LED_RGB_IsOverRidden();
}

void RGBClass::control(bool override)
{
   b6146:	b510      	push	{r4, lr}
   b6148:	4604      	mov	r4, r0
    return LED_RGB_IsOverRidden();
   b614a:	f7ff fc39 	bl	b59c0 <LED_RGB_IsOverRidden>
    if (override == controlled()) {
   b614e:	4284      	cmp	r4, r0
   b6150:	d008      	beq.n	b6164 <_ZN8RGBClass7controlEb+0x1e>
        return;
    } else if (override) {
   b6152:	b11c      	cbz	r4, b615c <_ZN8RGBClass7controlEb+0x16>
        LED_Signaling_Start();
    } else {
        LED_Signaling_Stop();
    }
}
   b6154:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        LED_Signaling_Start();
   b6158:	f7ff bc22 	b.w	b59a0 <LED_Signaling_Start>
}
   b615c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        LED_Signaling_Stop();
   b6160:	f7ff bc26 	b.w	b59b0 <LED_Signaling_Stop>
}
   b6164:	bd10      	pop	{r4, pc}

000b6166 <_ZN8RGBClass5colorEiii>:
void RGBClass::color(uint32_t rgb) {
    color((rgb>>16)&0xFF, (rgb>>8)&0xFF, (rgb)&0xFF);
}

void RGBClass::color(int red, int green, int blue)
{
   b6166:	b570      	push	{r4, r5, r6, lr}
   b6168:	4605      	mov	r5, r0
   b616a:	460e      	mov	r6, r1
   b616c:	4614      	mov	r4, r2
    return LED_RGB_IsOverRidden();
   b616e:	f7ff fc27 	bl	b59c0 <LED_RGB_IsOverRidden>
    if (!controlled()) {
   b6172:	b150      	cbz	r0, b618a <_ZN8RGBClass5colorEiii+0x24>
        return;
    }
    LED_SetSignalingColor(red << 16 | green << 8 | blue);
   b6174:	ea44 2406 	orr.w	r4, r4, r6, lsl #8
   b6178:	ea44 4005 	orr.w	r0, r4, r5, lsl #16
   b617c:	f7ff fc08 	bl	b5990 <LED_SetSignalingColor>
    LED_On(PARTICLE_LED_RGB);
}
   b6180:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    LED_On(PARTICLE_LED_RGB);
   b6184:	20e7      	movs	r0, #231	; 0xe7
   b6186:	f7ff bc23 	b.w	b59d0 <LED_On>
}
   b618a:	bd70      	pop	{r4, r5, r6, pc}

000b618c <_GLOBAL__sub_I_RGB>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
   b618c:	4b01      	ldr	r3, [pc, #4]	; (b6194 <_GLOBAL__sub_I_RGB+0x8>)
   b618e:	2200      	movs	r2, #0
   b6190:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b6192:	4770      	bx	lr
   b6194:	2003e6dc 	.word	0x2003e6dc

000b6198 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b6198:	4b01      	ldr	r3, [pc, #4]	; (b61a0 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b619a:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b619c:	4770      	bx	lr
   b619e:	bf00      	nop
   b61a0:	2003e61c 	.word	0x2003e61c

000b61a4 <serialEventRun>:
{
   b61a4:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b61a6:	4b0b      	ldr	r3, [pc, #44]	; (b61d4 <serialEventRun+0x30>)
   b61a8:	b143      	cbz	r3, b61bc <serialEventRun+0x18>
   b61aa:	f000 f96d 	bl	b6488 <_Z16_fetch_usbserialv>
   b61ae:	6803      	ldr	r3, [r0, #0]
   b61b0:	691b      	ldr	r3, [r3, #16]
   b61b2:	4798      	blx	r3
   b61b4:	2800      	cmp	r0, #0
   b61b6:	dd01      	ble.n	b61bc <serialEventRun+0x18>
        serialEvent();
   b61b8:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b61bc:	4b06      	ldr	r3, [pc, #24]	; (b61d8 <serialEventRun+0x34>)
   b61be:	b143      	cbz	r3, b61d2 <serialEventRun+0x2e>
   b61c0:	f000 fbc0 	bl	b6944 <_Z22__fetch_global_Serial1v>
   b61c4:	6803      	ldr	r3, [r0, #0]
   b61c6:	691b      	ldr	r3, [r3, #16]
   b61c8:	4798      	blx	r3
   b61ca:	2800      	cmp	r0, #0
   b61cc:	dd01      	ble.n	b61d2 <serialEventRun+0x2e>
        serialEvent1();
   b61ce:	f3af 8000 	nop.w
}
   b61d2:	bd08      	pop	{r3, pc}
	...

000b61dc <_post_loop>:
{
   b61dc:	b508      	push	{r3, lr}
	serialEventRun();
   b61de:	f7ff ffe1 	bl	b61a4 <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b61e2:	f7ff faa5 	bl	b5730 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b61e6:	4b01      	ldr	r3, [pc, #4]	; (b61ec <_post_loop+0x10>)
   b61e8:	6018      	str	r0, [r3, #0]
}
   b61ea:	bd08      	pop	{r3, pc}
   b61ec:	2003e740 	.word	0x2003e740

000b61f0 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b61f0:	4805      	ldr	r0, [pc, #20]	; (b6208 <_Z33system_initialize_user_backup_ramv+0x18>)
   b61f2:	4a06      	ldr	r2, [pc, #24]	; (b620c <_Z33system_initialize_user_backup_ramv+0x1c>)
   b61f4:	4906      	ldr	r1, [pc, #24]	; (b6210 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b61f6:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b61f8:	1a12      	subs	r2, r2, r0
   b61fa:	f001 f915 	bl	b7428 <memcpy>
    __backup_sram_signature = signature;
   b61fe:	4b05      	ldr	r3, [pc, #20]	; (b6214 <_Z33system_initialize_user_backup_ramv+0x24>)
   b6200:	4a05      	ldr	r2, [pc, #20]	; (b6218 <_Z33system_initialize_user_backup_ramv+0x28>)
   b6202:	601a      	str	r2, [r3, #0]
}
   b6204:	bd08      	pop	{r3, pc}
   b6206:	bf00      	nop
   b6208:	2003f400 	.word	0x2003f400
   b620c:	2003f404 	.word	0x2003f404
   b6210:	000b7924 	.word	0x000b7924
   b6214:	2003f400 	.word	0x2003f400
   b6218:	9a271c1e 	.word	0x9a271c1e

000b621c <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b621c:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b621e:	2300      	movs	r3, #0
   b6220:	9300      	str	r3, [sp, #0]
   b6222:	461a      	mov	r2, r3
   b6224:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b6228:	f7ff fc04 	bl	b5a34 <system_ctrl_set_result>
}
   b622c:	b003      	add	sp, #12
   b622e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b6234 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b6234:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b6236:	8843      	ldrh	r3, [r0, #2]
   b6238:	2b0a      	cmp	r3, #10
   b623a:	d008      	beq.n	b624e <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b623c:	2b50      	cmp	r3, #80	; 0x50
   b623e:	d10b      	bne.n	b6258 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b6240:	4b09      	ldr	r3, [pc, #36]	; (b6268 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b6242:	681b      	ldr	r3, [r3, #0]
   b6244:	b14b      	cbz	r3, b625a <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b6246:	b003      	add	sp, #12
   b6248:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b624c:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b624e:	f7ff ffe5 	bl	b621c <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b6252:	b003      	add	sp, #12
   b6254:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b6258:	2300      	movs	r3, #0
   b625a:	9300      	str	r3, [sp, #0]
   b625c:	461a      	mov	r2, r3
   b625e:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b6262:	f7ff fbe7 	bl	b5a34 <system_ctrl_set_result>
}
   b6266:	e7f4      	b.n	b6252 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b6268:	2003e6f0 	.word	0x2003e6f0

000b626c <module_user_init_hook>:
{
   b626c:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b626e:	4812      	ldr	r0, [pc, #72]	; (b62b8 <module_user_init_hook+0x4c>)
   b6270:	2100      	movs	r1, #0
   b6272:	f7ff fc73 	bl	b5b5c <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b6276:	4b11      	ldr	r3, [pc, #68]	; (b62bc <module_user_init_hook+0x50>)
   b6278:	681a      	ldr	r2, [r3, #0]
   b627a:	4b11      	ldr	r3, [pc, #68]	; (b62c0 <module_user_init_hook+0x54>)
   b627c:	429a      	cmp	r2, r3
   b627e:	4b11      	ldr	r3, [pc, #68]	; (b62c4 <module_user_init_hook+0x58>)
   b6280:	bf0c      	ite	eq
   b6282:	2201      	moveq	r2, #1
   b6284:	2200      	movne	r2, #0
   b6286:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b6288:	d001      	beq.n	b628e <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b628a:	f7ff ffb1 	bl	b61f0 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b628e:	f7ff fa3f 	bl	b5710 <HAL_RNG_GetRandomNumber>
   b6292:	4604      	mov	r4, r0
    srand(seed);
   b6294:	f001 f8de 	bl	b7454 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b6298:	4b0b      	ldr	r3, [pc, #44]	; (b62c8 <module_user_init_hook+0x5c>)
   b629a:	b113      	cbz	r3, b62a2 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b629c:	4620      	mov	r0, r4
   b629e:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b62a2:	2100      	movs	r1, #0
   b62a4:	4808      	ldr	r0, [pc, #32]	; (b62c8 <module_user_init_hook+0x5c>)
   b62a6:	f7ff fc39 	bl	b5b1c <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b62aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b62ae:	4807      	ldr	r0, [pc, #28]	; (b62cc <module_user_init_hook+0x60>)
   b62b0:	2100      	movs	r1, #0
   b62b2:	f7ff bbb5 	b.w	b5a20 <system_ctrl_set_app_request_handler>
   b62b6:	bf00      	nop
   b62b8:	000b6199 	.word	0x000b6199
   b62bc:	2003f400 	.word	0x2003f400
   b62c0:	9a271c1e 	.word	0x9a271c1e
   b62c4:	2003e6ec 	.word	0x2003e6ec
   b62c8:	00000000 	.word	0x00000000
   b62cc:	000b6235 	.word	0x000b6235

000b62d0 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b62d0:	4770      	bx	lr

000b62d2 <_ZN9IPAddressD0Ev>:
   b62d2:	b510      	push	{r4, lr}
   b62d4:	2118      	movs	r1, #24
   b62d6:	4604      	mov	r4, r0
   b62d8:	f7fd fee1 	bl	b409e <_ZdlPvj>
   b62dc:	4620      	mov	r0, r4
   b62de:	bd10      	pop	{r4, pc}

000b62e0 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b62e0:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b62e2:	7d03      	ldrb	r3, [r0, #20]
   b62e4:	2b06      	cmp	r3, #6
{
   b62e6:	b08d      	sub	sp, #52	; 0x34
   b62e8:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b62ea:	f100 0704 	add.w	r7, r0, #4
   b62ee:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b62f2:	d012      	beq.n	b631a <_ZNK9IPAddress7printToER5Print+0x3a>
   b62f4:	f100 0508 	add.w	r5, r0, #8
        return printNumber(val, base) + t;
   b62f8:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b62fc:	220a      	movs	r2, #10
   b62fe:	4630      	mov	r0, r6
   b6300:	f7ff fe0b 	bl	b5f1a <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b6304:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b6306:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b6308:	d019      	beq.n	b633e <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b630a:	2c00      	cmp	r4, #0
   b630c:	d0f4      	beq.n	b62f8 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b630e:	212e      	movs	r1, #46	; 0x2e
   b6310:	4630      	mov	r0, r6
   b6312:	f7ff fde9 	bl	b5ee8 <_ZN5Print5printEc>
   b6316:	4404      	add	r4, r0
   b6318:	e7ee      	b.n	b62f8 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b631a:	232f      	movs	r3, #47	; 0x2f
   b631c:	466a      	mov	r2, sp
   b631e:	4639      	mov	r1, r7
   b6320:	200a      	movs	r0, #10
		buf[0] = 0;
   b6322:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b6326:	f7ff fa13 	bl	b5750 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b632a:	4668      	mov	r0, sp
   b632c:	f001 f8c0 	bl	b74b0 <strlen>
   b6330:	6833      	ldr	r3, [r6, #0]
   b6332:	4602      	mov	r2, r0
   b6334:	68db      	ldr	r3, [r3, #12]
   b6336:	4669      	mov	r1, sp
   b6338:	4630      	mov	r0, r6
   b633a:	4798      	blx	r3
   b633c:	4604      	mov	r4, r0
    }
    return n;
}
   b633e:	4620      	mov	r0, r4
   b6340:	b00d      	add	sp, #52	; 0x34
   b6342:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b6344 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b6344:	b510      	push	{r4, lr}
   b6346:	4b05      	ldr	r3, [pc, #20]	; (b635c <_ZN9IPAddressC1Ev+0x18>)
   b6348:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b634a:	2211      	movs	r2, #17
   b634c:	f840 3b04 	str.w	r3, [r0], #4
   b6350:	2100      	movs	r1, #0
   b6352:	f001 f877 	bl	b7444 <memset>
}
   b6356:	4620      	mov	r0, r4
   b6358:	bd10      	pop	{r4, pc}
   b635a:	bf00      	nop
   b635c:	000b772c 	.word	0x000b772c

000b6360 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b6360:	4603      	mov	r3, r0
   b6362:	4a07      	ldr	r2, [pc, #28]	; (b6380 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b6364:	b510      	push	{r4, lr}
   b6366:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b636a:	f101 0210 	add.w	r2, r1, #16
   b636e:	f851 4b04 	ldr.w	r4, [r1], #4
   b6372:	f843 4b04 	str.w	r4, [r3], #4
   b6376:	4291      	cmp	r1, r2
   b6378:	d1f9      	bne.n	b636e <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b637a:	780a      	ldrb	r2, [r1, #0]
   b637c:	701a      	strb	r2, [r3, #0]
}
   b637e:	bd10      	pop	{r4, pc}
   b6380:	000b772c 	.word	0x000b772c

000b6384 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b6384:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b6386:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b638a:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b638e:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b6392:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b6396:	2304      	movs	r3, #4
   b6398:	6041      	str	r1, [r0, #4]
   b639a:	7503      	strb	r3, [r0, #20]
}
   b639c:	bd10      	pop	{r4, pc}
	...

000b63a0 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b63a0:	b507      	push	{r0, r1, r2, lr}
   b63a2:	4b06      	ldr	r3, [pc, #24]	; (b63bc <_ZN9IPAddressC1EPKh+0x1c>)
   b63a4:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b63a6:	78cb      	ldrb	r3, [r1, #3]
   b63a8:	9300      	str	r3, [sp, #0]
   b63aa:	788b      	ldrb	r3, [r1, #2]
   b63ac:	784a      	ldrb	r2, [r1, #1]
   b63ae:	7809      	ldrb	r1, [r1, #0]
   b63b0:	f7ff ffe8 	bl	b6384 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b63b4:	b003      	add	sp, #12
   b63b6:	f85d fb04 	ldr.w	pc, [sp], #4
   b63ba:	bf00      	nop
   b63bc:	000b772c 	.word	0x000b772c

000b63c0 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b63c0:	7441      	strb	r1, [r0, #17]
}
   b63c2:	4770      	bx	lr

000b63c4 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b63c4:	4770      	bx	lr

000b63c6 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b63c6:	4770      	bx	lr

000b63c8 <_ZN9USBSerial4readEv>:
{
   b63c8:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b63ca:	2100      	movs	r1, #0
   b63cc:	7c00      	ldrb	r0, [r0, #16]
   b63ce:	f7ff fabf 	bl	b5950 <HAL_USB_USART_Receive_Data>
}
   b63d2:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b63d6:	bd08      	pop	{r3, pc}

000b63d8 <_ZN9USBSerial4peekEv>:
{
   b63d8:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b63da:	2101      	movs	r1, #1
   b63dc:	7c00      	ldrb	r0, [r0, #16]
   b63de:	f7ff fab7 	bl	b5950 <HAL_USB_USART_Receive_Data>
}
   b63e2:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b63e6:	bd08      	pop	{r3, pc}

000b63e8 <_ZN9USBSerial17availableForWriteEv>:
{
   b63e8:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b63ea:	7c00      	ldrb	r0, [r0, #16]
   b63ec:	f7ff faa8 	bl	b5940 <HAL_USB_USART_Available_Data_For_Write>
}
   b63f0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b63f4:	bd08      	pop	{r3, pc}

000b63f6 <_ZN9USBSerial9availableEv>:
{
   b63f6:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b63f8:	7c00      	ldrb	r0, [r0, #16]
   b63fa:	f7ff fa99 	bl	b5930 <HAL_USB_USART_Available_Data>
}
   b63fe:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b6402:	bd08      	pop	{r3, pc}

000b6404 <_ZN9USBSerial5writeEh>:
{
   b6404:	b513      	push	{r0, r1, r4, lr}
   b6406:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b6408:	7c00      	ldrb	r0, [r0, #16]
{
   b640a:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b640c:	f7ff fa98 	bl	b5940 <HAL_USB_USART_Available_Data_For_Write>
   b6410:	2800      	cmp	r0, #0
   b6412:	9901      	ldr	r1, [sp, #4]
   b6414:	dc01      	bgt.n	b641a <_ZN9USBSerial5writeEh+0x16>
   b6416:	7c60      	ldrb	r0, [r4, #17]
   b6418:	b120      	cbz	r0, b6424 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b641a:	7c20      	ldrb	r0, [r4, #16]
   b641c:	f7ff faa0 	bl	b5960 <HAL_USB_USART_Send_Data>
   b6420:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b6424:	b002      	add	sp, #8
   b6426:	bd10      	pop	{r4, pc}

000b6428 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b6428:	7c00      	ldrb	r0, [r0, #16]
   b642a:	f7ff baa1 	b.w	b5970 <HAL_USB_USART_Flush_Data>

000b642e <_ZN9USBSerialD0Ev>:
   b642e:	b510      	push	{r4, lr}
   b6430:	2114      	movs	r1, #20
   b6432:	4604      	mov	r4, r0
   b6434:	f7fd fe33 	bl	b409e <_ZdlPvj>
   b6438:	4620      	mov	r0, r4
   b643a:	bd10      	pop	{r4, pc}

000b643c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b643c:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b643e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b6442:	4604      	mov	r4, r0
   b6444:	4608      	mov	r0, r1
   b6446:	2100      	movs	r1, #0
   b6448:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b644c:	4b04      	ldr	r3, [pc, #16]	; (b6460 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b644e:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b6450:	2301      	movs	r3, #1
  _serial = serial;
   b6452:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b6454:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b6456:	4611      	mov	r1, r2
   b6458:	f7ff fa5a 	bl	b5910 <HAL_USB_USART_Init>
}
   b645c:	4620      	mov	r0, r4
   b645e:	bd10      	pop	{r4, pc}
   b6460:	000b7740 	.word	0x000b7740

000b6464 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   b6464:	7c00      	ldrb	r0, [r0, #16]
   b6466:	2200      	movs	r2, #0
   b6468:	f7ff ba5a 	b.w	b5920 <HAL_USB_USART_Begin>

000b646c <_ZN9USBSerial9isEnabledEv>:
  return HAL_USB_USART_Is_Enabled(_serial);
   b646c:	7c00      	ldrb	r0, [r0, #16]
   b646e:	f7ff ba87 	b.w	b5980 <HAL_USB_USART_Is_Enabled>

000b6472 <_ZN9USBSerialcvbEv>:
  return isEnabled();
   b6472:	f7ff bffb 	b.w	b646c <_ZN9USBSerial9isEnabledEv>

000b6476 <_Z19acquireSerialBufferv>:
{
   b6476:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b6478:	2214      	movs	r2, #20
{
   b647a:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b647c:	2100      	movs	r1, #0
   b647e:	f000 ffe1 	bl	b7444 <memset>
}
   b6482:	4620      	mov	r0, r4
   b6484:	bd10      	pop	{r4, pc}
	...

000b6488 <_Z16_fetch_usbserialv>:
{
   b6488:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b648a:	4c0f      	ldr	r4, [pc, #60]	; (b64c8 <_Z16_fetch_usbserialv+0x40>)
{
   b648c:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b648e:	a803      	add	r0, sp, #12
   b6490:	f7ff fff1 	bl	b6476 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b6494:	7821      	ldrb	r1, [r4, #0]
   b6496:	f3bf 8f5b 	dmb	ish
   b649a:	f011 0101 	ands.w	r1, r1, #1
   b649e:	d10f      	bne.n	b64c0 <_Z16_fetch_usbserialv+0x38>
   b64a0:	4620      	mov	r0, r4
   b64a2:	9101      	str	r1, [sp, #4]
   b64a4:	f7fd fdfd 	bl	b40a2 <__cxa_guard_acquire>
   b64a8:	9901      	ldr	r1, [sp, #4]
   b64aa:	b148      	cbz	r0, b64c0 <_Z16_fetch_usbserialv+0x38>
   b64ac:	aa03      	add	r2, sp, #12
   b64ae:	4807      	ldr	r0, [pc, #28]	; (b64cc <_Z16_fetch_usbserialv+0x44>)
   b64b0:	f7ff ffc4 	bl	b643c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b64b4:	4620      	mov	r0, r4
   b64b6:	f7fd fdf9 	bl	b40ac <__cxa_guard_release>
   b64ba:	4805      	ldr	r0, [pc, #20]	; (b64d0 <_Z16_fetch_usbserialv+0x48>)
   b64bc:	f000 ffae 	bl	b741c <atexit>
	return _usbserial;
}
   b64c0:	4802      	ldr	r0, [pc, #8]	; (b64cc <_Z16_fetch_usbserialv+0x44>)
   b64c2:	b008      	add	sp, #32
   b64c4:	bd10      	pop	{r4, pc}
   b64c6:	bf00      	nop
   b64c8:	2003e6f4 	.word	0x2003e6f4
   b64cc:	2003e6f8 	.word	0x2003e6f8
   b64d0:	000b63c5 	.word	0x000b63c5

000b64d4 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b64d4:	4770      	bx	lr

000b64d6 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b64d6:	7441      	strb	r1, [r0, #17]
}
   b64d8:	4770      	bx	lr

000b64da <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b64da:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b64dc:	7c00      	ldrb	r0, [r0, #16]
   b64de:	f7ff f96f 	bl	b57c0 <hal_usart_available_data_for_write>
}
   b64e2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b64e6:	bd08      	pop	{r3, pc}

000b64e8 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b64e8:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b64ea:	7c00      	ldrb	r0, [r0, #16]
   b64ec:	f7ff f940 	bl	b5770 <hal_usart_available>
}
   b64f0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b64f4:	bd08      	pop	{r3, pc}

000b64f6 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b64f6:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b64f8:	7c00      	ldrb	r0, [r0, #16]
   b64fa:	f7ff f949 	bl	b5790 <hal_usart_peek>
}
   b64fe:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b6502:	bd08      	pop	{r3, pc}

000b6504 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b6504:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b6506:	7c00      	ldrb	r0, [r0, #16]
   b6508:	f7ff f93a 	bl	b5780 <hal_usart_read>
}
   b650c:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b6510:	bd08      	pop	{r3, pc}

000b6512 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b6512:	7c00      	ldrb	r0, [r0, #16]
   b6514:	f7ff b944 	b.w	b57a0 <hal_usart_flush>

000b6518 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b6518:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b651a:	7c45      	ldrb	r5, [r0, #17]
{
   b651c:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b651e:	b12d      	cbz	r5, b652c <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b6520:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b6522:	b003      	add	sp, #12
   b6524:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b6528:	f7ff b91a 	b.w	b5760 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b652c:	7c00      	ldrb	r0, [r0, #16]
   b652e:	9101      	str	r1, [sp, #4]
   b6530:	f7ff f946 	bl	b57c0 <hal_usart_available_data_for_write>
   b6534:	2800      	cmp	r0, #0
   b6536:	9901      	ldr	r1, [sp, #4]
   b6538:	dcf2      	bgt.n	b6520 <_ZN11USARTSerial5writeEh+0x8>
}
   b653a:	4628      	mov	r0, r5
   b653c:	b003      	add	sp, #12
   b653e:	bd30      	pop	{r4, r5, pc}

000b6540 <_ZN11USARTSerialD0Ev>:
   b6540:	b510      	push	{r4, lr}
   b6542:	2114      	movs	r1, #20
   b6544:	4604      	mov	r4, r0
   b6546:	f7fd fdaa 	bl	b409e <_ZdlPvj>
   b654a:	4620      	mov	r0, r4
   b654c:	bd10      	pop	{r4, pc}
	...

000b6550 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b6550:	b510      	push	{r4, lr}
   b6552:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b6556:	4604      	mov	r4, r0
   b6558:	4608      	mov	r0, r1
   b655a:	4611      	mov	r1, r2
   b655c:	2200      	movs	r2, #0
   b655e:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b6562:	4b04      	ldr	r3, [pc, #16]	; (b6574 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b6564:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b6566:	2301      	movs	r3, #1
  _serial = serial;
   b6568:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b656a:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b656c:	f7ff f930 	bl	b57d0 <hal_usart_init_ex>
}
   b6570:	4620      	mov	r0, r4
   b6572:	bd10      	pop	{r4, pc}
   b6574:	000b7770 	.word	0x000b7770

000b6578 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b6578:	4770      	bx	lr

000b657a <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b657a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b657c:	4606      	mov	r6, r0
   b657e:	4615      	mov	r5, r2
   b6580:	460c      	mov	r4, r1
   b6582:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b6584:	42bc      	cmp	r4, r7
   b6586:	d006      	beq.n	b6596 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b6588:	6833      	ldr	r3, [r6, #0]
   b658a:	f814 1b01 	ldrb.w	r1, [r4], #1
   b658e:	689b      	ldr	r3, [r3, #8]
   b6590:	4630      	mov	r0, r6
   b6592:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b6594:	e7f6      	b.n	b6584 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b6596:	4628      	mov	r0, r5
   b6598:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b659a <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b659a:	7c00      	ldrb	r0, [r0, #16]
   b659c:	2200      	movs	r2, #0
   b659e:	f7ff b937 	b.w	b5810 <hal_i2c_write>

000b65a2 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b65a2:	7c00      	ldrb	r0, [r0, #16]
   b65a4:	2100      	movs	r1, #0
   b65a6:	f7ff b93b 	b.w	b5820 <hal_i2c_available>

000b65aa <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b65aa:	7c00      	ldrb	r0, [r0, #16]
   b65ac:	2100      	movs	r1, #0
   b65ae:	f7ff b93f 	b.w	b5830 <hal_i2c_read>

000b65b2 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b65b2:	7c00      	ldrb	r0, [r0, #16]
   b65b4:	2100      	movs	r1, #0
   b65b6:	f7ff b943 	b.w	b5840 <hal_i2c_peek>

000b65ba <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b65ba:	7c00      	ldrb	r0, [r0, #16]
   b65bc:	2100      	movs	r1, #0
   b65be:	f7ff b947 	b.w	b5850 <hal_i2c_flush>

000b65c2 <_ZN7TwoWireD0Ev>:
   b65c2:	b510      	push	{r4, lr}
   b65c4:	2114      	movs	r1, #20
   b65c6:	4604      	mov	r4, r0
   b65c8:	f7fd fd69 	bl	b409e <_ZdlPvj>
   b65cc:	4620      	mov	r0, r4
   b65ce:	bd10      	pop	{r4, pc}

000b65d0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b65d0:	b538      	push	{r3, r4, r5, lr}
   b65d2:	4604      	mov	r4, r0
   b65d4:	4615      	mov	r5, r2
   b65d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b65da:	2200      	movs	r2, #0
   b65dc:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b65e0:	4b09      	ldr	r3, [pc, #36]	; (b6608 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x38>)
  _i2c = i2c;
   b65e2:	7421      	strb	r1, [r4, #16]
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b65e4:	4608      	mov	r0, r1
   b65e6:	6023      	str	r3, [r4, #0]
  int result = hal_i2c_init(_i2c, &conf);
   b65e8:	4629      	mov	r1, r5
   b65ea:	f7ff f941 	bl	b5870 <hal_i2c_init>
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b65ee:	30bf      	adds	r0, #191	; 0xbf
   b65f0:	d108      	bne.n	b6604 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
      (conf.flags & HAL_I2C_CONFIG_FLAG_FREEABLE)) {
   b65f2:	696b      	ldr	r3, [r5, #20]
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b65f4:	07db      	lsls	r3, r3, #31
   b65f6:	d505      	bpl.n	b6604 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
    free(conf.rx_buffer);
   b65f8:	6868      	ldr	r0, [r5, #4]
   b65fa:	f7ff fa9f 	bl	b5b3c <free>
    free(conf.tx_buffer);
   b65fe:	68e8      	ldr	r0, [r5, #12]
   b6600:	f7ff fa9c 	bl	b5b3c <free>
}
   b6604:	4620      	mov	r0, r4
   b6606:	bd38      	pop	{r3, r4, r5, pc}
   b6608:	000b77a0 	.word	0x000b77a0

000b660c <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   b660c:	2300      	movs	r3, #0
   b660e:	7c00      	ldrb	r0, [r0, #16]
   b6610:	461a      	mov	r2, r3
   b6612:	4619      	mov	r1, r3
   b6614:	f7ff b8e4 	b.w	b57e0 <hal_i2c_begin>

000b6618 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   b6618:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   b661a:	2200      	movs	r2, #0
   b661c:	2314      	movs	r3, #20
   b661e:	e9cd 2201 	strd	r2, r2, [sp, #4]
   b6622:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   b6626:	780b      	ldrb	r3, [r1, #0]
   b6628:	f88d 3008 	strb.w	r3, [sp, #8]
   b662c:	684b      	ldr	r3, [r1, #4]
   b662e:	9303      	str	r3, [sp, #12]
   b6630:	68cb      	ldr	r3, [r1, #12]
   b6632:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   b6634:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   b6636:	7a0b      	ldrb	r3, [r1, #8]
   b6638:	9305      	str	r3, [sp, #20]
   b663a:	a901      	add	r1, sp, #4
   b663c:	f7ff f920 	bl	b5880 <hal_i2c_request_ex>
}
   b6640:	b007      	add	sp, #28
   b6642:	f85d fb04 	ldr.w	pc, [sp], #4

000b6646 <_ZN7TwoWire11requestFromEhjh>:
{
   b6646:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   b6648:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   b664a:	f88d 1000 	strb.w	r1, [sp]
   b664e:	f04f 0164 	mov.w	r1, #100	; 0x64
   b6652:	9103      	str	r1, [sp, #12]
   b6654:	bf18      	it	ne
   b6656:	2301      	movne	r3, #1
   b6658:	4669      	mov	r1, sp
    size_ = size;
   b665a:	9201      	str	r2, [sp, #4]
   b665c:	f88d 3008 	strb.w	r3, [sp, #8]
   b6660:	f7ff ffda 	bl	b6618 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   b6664:	b005      	add	sp, #20
   b6666:	f85d fb04 	ldr.w	pc, [sp], #4

000b666a <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   b666a:	7c00      	ldrb	r0, [r0, #16]
   b666c:	2200      	movs	r2, #0
   b666e:	f7ff b8bf 	b.w	b57f0 <hal_i2c_begin_transmission>

000b6672 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   b6672:	7c00      	ldrb	r0, [r0, #16]
   b6674:	2200      	movs	r2, #0
   b6676:	f7ff b8c3 	b.w	b5800 <hal_i2c_end_transmission>

000b667a <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   b667a:	2101      	movs	r1, #1
   b667c:	f7ff bff9 	b.w	b6672 <_ZN7TwoWire15endTransmissionEh>

000b6680 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b6680:	2200      	movs	r2, #0
   b6682:	6840      	ldr	r0, [r0, #4]
   b6684:	4611      	mov	r1, r2
   b6686:	f7ff ba01 	b.w	b5a8c <network_ready>

000b668a <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b668a:	2200      	movs	r2, #0
   b668c:	6840      	ldr	r0, [r0, #4]
   b668e:	4611      	mov	r1, r2
   b6690:	f7ff ba1c 	b.w	b5acc <network_listening>

000b6694 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b6694:	2200      	movs	r2, #0
   b6696:	6840      	ldr	r0, [r0, #4]
   b6698:	4611      	mov	r1, r2
   b669a:	f7ff ba27 	b.w	b5aec <network_get_listen_timeout>

000b669e <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b669e:	6840      	ldr	r0, [r0, #4]
   b66a0:	2200      	movs	r2, #0
   b66a2:	f7ff ba1b 	b.w	b5adc <network_set_listen_timeout>

000b66a6 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b66a6:	6840      	ldr	r0, [r0, #4]
   b66a8:	2200      	movs	r2, #0
   b66aa:	f081 0101 	eor.w	r1, r1, #1
   b66ae:	f7ff ba05 	b.w	b5abc <network_listen>

000b66b2 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b66b2:	2300      	movs	r3, #0
   b66b4:	6840      	ldr	r0, [r0, #4]
   b66b6:	461a      	mov	r2, r3
   b66b8:	4619      	mov	r1, r3
   b66ba:	f7ff b9f7 	b.w	b5aac <network_off>

000b66be <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b66be:	2300      	movs	r3, #0
   b66c0:	6840      	ldr	r0, [r0, #4]
   b66c2:	461a      	mov	r2, r3
   b66c4:	4619      	mov	r1, r3
   b66c6:	f7ff b9e9 	b.w	b5a9c <network_on>

000b66ca <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b66ca:	2200      	movs	r2, #0
   b66cc:	6840      	ldr	r0, [r0, #4]
   b66ce:	4611      	mov	r1, r2
   b66d0:	f7ff b9cc 	b.w	b5a6c <network_connecting>

000b66d4 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b66d4:	6840      	ldr	r0, [r0, #4]
   b66d6:	2200      	movs	r2, #0
   b66d8:	2102      	movs	r1, #2
   b66da:	f7ff b9cf 	b.w	b5a7c <network_disconnect>

000b66de <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b66de:	2300      	movs	r3, #0
   b66e0:	6840      	ldr	r0, [r0, #4]
   b66e2:	461a      	mov	r2, r3
   b66e4:	f7ff b9ba 	b.w	b5a5c <network_connect>

000b66e8 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   b66e8:	4b02      	ldr	r3, [pc, #8]	; (b66f4 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   b66ea:	2204      	movs	r2, #4
   b66ec:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   b66ee:	4a02      	ldr	r2, [pc, #8]	; (b66f8 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   b66f0:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   b66f2:	4770      	bx	lr
   b66f4:	2003e70c 	.word	0x2003e70c
   b66f8:	000b77c8 	.word	0x000b77c8

000b66fc <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b66fc:	2300      	movs	r3, #0
   b66fe:	6840      	ldr	r0, [r0, #4]
   b6700:	461a      	mov	r2, r3
   b6702:	f7ff b9ab 	b.w	b5a5c <network_connect>

000b6706 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b6706:	6840      	ldr	r0, [r0, #4]
   b6708:	2200      	movs	r2, #0
   b670a:	2102      	movs	r1, #2
   b670c:	f7ff b9b6 	b.w	b5a7c <network_disconnect>

000b6710 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b6710:	2200      	movs	r2, #0
   b6712:	6840      	ldr	r0, [r0, #4]
   b6714:	4611      	mov	r1, r2
   b6716:	f7ff b9a9 	b.w	b5a6c <network_connecting>

000b671a <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b671a:	2200      	movs	r2, #0
   b671c:	6840      	ldr	r0, [r0, #4]
   b671e:	4611      	mov	r1, r2
   b6720:	f7ff b9b4 	b.w	b5a8c <network_ready>

000b6724 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b6724:	2300      	movs	r3, #0
   b6726:	6840      	ldr	r0, [r0, #4]
   b6728:	461a      	mov	r2, r3
   b672a:	4619      	mov	r1, r3
   b672c:	f7ff b9b6 	b.w	b5a9c <network_on>

000b6730 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b6730:	2300      	movs	r3, #0
   b6732:	6840      	ldr	r0, [r0, #4]
   b6734:	461a      	mov	r2, r3
   b6736:	4619      	mov	r1, r3
   b6738:	f7ff b9b8 	b.w	b5aac <network_off>

000b673c <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b673c:	6840      	ldr	r0, [r0, #4]
   b673e:	2100      	movs	r1, #0
   b6740:	f7ff b9dc 	b.w	b5afc <network_is_on>

000b6744 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b6744:	6840      	ldr	r0, [r0, #4]
   b6746:	2100      	movs	r1, #0
   b6748:	f7ff b9e0 	b.w	b5b0c <network_is_off>

000b674c <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b674c:	6840      	ldr	r0, [r0, #4]
   b674e:	2200      	movs	r2, #0
   b6750:	f081 0101 	eor.w	r1, r1, #1
   b6754:	f7ff b9b2 	b.w	b5abc <network_listen>

000b6758 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b6758:	6840      	ldr	r0, [r0, #4]
   b675a:	2200      	movs	r2, #0
   b675c:	f7ff b9be 	b.w	b5adc <network_set_listen_timeout>

000b6760 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b6760:	2200      	movs	r2, #0
   b6762:	6840      	ldr	r0, [r0, #4]
   b6764:	4611      	mov	r1, r2
   b6766:	f7ff b9c1 	b.w	b5aec <network_get_listen_timeout>

000b676a <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b676a:	2200      	movs	r2, #0
   b676c:	6840      	ldr	r0, [r0, #4]
   b676e:	4611      	mov	r1, r2
   b6770:	f7ff b9ac 	b.w	b5acc <network_listening>

000b6774 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b6774:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b6778:	b095      	sub	sp, #84	; 0x54
   b677a:	4614      	mov	r4, r2
   b677c:	460d      	mov	r5, r1
   b677e:	4607      	mov	r7, r0
    IPAddress addr;
   b6780:	f7ff fde0 	bl	b6344 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b6784:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b6786:	221c      	movs	r2, #28
   b6788:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b678a:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b678c:	f000 fe5a 	bl	b7444 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b6790:	2340      	movs	r3, #64	; 0x40
   b6792:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b6794:	4620      	mov	r0, r4
   b6796:	466b      	mov	r3, sp
   b6798:	aa0c      	add	r2, sp, #48	; 0x30
   b679a:	2100      	movs	r1, #0
   b679c:	f7fe ffa0 	bl	b56e0 <netdb_getaddrinfo>
    if (!r) {
   b67a0:	4604      	mov	r4, r0
   b67a2:	2800      	cmp	r0, #0
   b67a4:	d14b      	bne.n	b683e <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b67a6:	4602      	mov	r2, r0
   b67a8:	2101      	movs	r1, #1
   b67aa:	6868      	ldr	r0, [r5, #4]
   b67ac:	f7ff f96e 	bl	b5a8c <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b67b0:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b67b2:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b67b4:	4622      	mov	r2, r4
   b67b6:	6868      	ldr	r0, [r5, #4]
   b67b8:	f7ff f968 	bl	b5a8c <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b67bc:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b67be:	4681      	mov	r9, r0
        bool ok = false;
   b67c0:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b67c2:	2e00      	cmp	r6, #0
   b67c4:	d03b      	beq.n	b683e <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b67c6:	2900      	cmp	r1, #0
   b67c8:	d139      	bne.n	b683e <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b67ca:	6873      	ldr	r3, [r6, #4]
   b67cc:	2b02      	cmp	r3, #2
   b67ce:	d003      	beq.n	b67d8 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b67d0:	2b0a      	cmp	r3, #10
   b67d2:	d011      	beq.n	b67f8 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b67d4:	69f6      	ldr	r6, [r6, #28]
   b67d6:	e7f4      	b.n	b67c2 <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b67d8:	f1b8 0f00 	cmp.w	r8, #0
   b67dc:	d0fa      	beq.n	b67d4 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b67de:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b67e0:	a806      	add	r0, sp, #24
   b67e2:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b67e4:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b67e6:	f7ff fddb 	bl	b63a0 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b67ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b67ec:	1d3c      	adds	r4, r7, #4
   b67ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b67f0:	682b      	ldr	r3, [r5, #0]
   b67f2:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b67f4:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b67f6:	e7ed      	b.n	b67d4 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b67f8:	f1b9 0f00 	cmp.w	r9, #0
   b67fc:	d0ea      	beq.n	b67d4 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b67fe:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b6800:	2210      	movs	r2, #16
   b6802:	a801      	add	r0, sp, #4
   b6804:	f000 fe1e 	bl	b7444 <memset>
                    a.v = 6;
   b6808:	2306      	movs	r3, #6
   b680a:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b680e:	ad01      	add	r5, sp, #4
   b6810:	f104 0308 	add.w	r3, r4, #8
   b6814:	3418      	adds	r4, #24
   b6816:	6818      	ldr	r0, [r3, #0]
   b6818:	6859      	ldr	r1, [r3, #4]
   b681a:	462a      	mov	r2, r5
   b681c:	c203      	stmia	r2!, {r0, r1}
   b681e:	3308      	adds	r3, #8
   b6820:	42a3      	cmp	r3, r4
   b6822:	4615      	mov	r5, r2
   b6824:	d1f7      	bne.n	b6816 <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b6826:	a901      	add	r1, sp, #4
   b6828:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b682a:	ad07      	add	r5, sp, #28
   b682c:	f7ff fd98 	bl	b6360 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b6830:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6832:	1d3c      	adds	r4, r7, #4
   b6834:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6836:	682b      	ldr	r3, [r5, #0]
   b6838:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b683a:	4649      	mov	r1, r9
   b683c:	e7ca      	b.n	b67d4 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b683e:	9800      	ldr	r0, [sp, #0]
   b6840:	f7fe ff46 	bl	b56d0 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b6844:	4638      	mov	r0, r7
   b6846:	b015      	add	sp, #84	; 0x54
   b6848:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b684c <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b684c:	4b02      	ldr	r3, [pc, #8]	; (b6858 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b684e:	4a03      	ldr	r2, [pc, #12]	; (b685c <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b6850:	601a      	str	r2, [r3, #0]
   b6852:	2200      	movs	r2, #0
   b6854:	605a      	str	r2, [r3, #4]

} // spark
   b6856:	4770      	bx	lr
   b6858:	2003e714 	.word	0x2003e714
   b685c:	000b7804 	.word	0x000b7804

000b6860 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   b6860:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   b6862:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   b6864:	d902      	bls.n	b686c <pinAvailable+0xc>
    return false;
   b6866:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   b6868:	b002      	add	sp, #8
   b686a:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   b686c:	f1a0 030b 	sub.w	r3, r0, #11
   b6870:	2b02      	cmp	r3, #2
   b6872:	d81a      	bhi.n	b68aa <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b6874:	4c17      	ldr	r4, [pc, #92]	; (b68d4 <pinAvailable+0x74>)
   b6876:	7821      	ldrb	r1, [r4, #0]
   b6878:	f3bf 8f5b 	dmb	ish
   b687c:	f011 0101 	ands.w	r1, r1, #1
   b6880:	d10b      	bne.n	b689a <pinAvailable+0x3a>
   b6882:	4620      	mov	r0, r4
   b6884:	9101      	str	r1, [sp, #4]
   b6886:	f7fd fc0c 	bl	b40a2 <__cxa_guard_acquire>
   b688a:	9901      	ldr	r1, [sp, #4]
   b688c:	b128      	cbz	r0, b689a <pinAvailable+0x3a>
   b688e:	4812      	ldr	r0, [pc, #72]	; (b68d8 <pinAvailable+0x78>)
   b6890:	f7ff f9b0 	bl	b5bf4 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b6894:	4620      	mov	r0, r4
   b6896:	f7fd fc09 	bl	b40ac <__cxa_guard_release>
   b689a:	4b0f      	ldr	r3, [pc, #60]	; (b68d8 <pinAvailable+0x78>)
   b689c:	7818      	ldrb	r0, [r3, #0]
   b689e:	f7fe ffff 	bl	b58a0 <hal_spi_is_enabled>
   b68a2:	2800      	cmp	r0, #0
   b68a4:	d1df      	bne.n	b6866 <pinAvailable+0x6>
  return true; // 'pin' is available
   b68a6:	2001      	movs	r0, #1
   b68a8:	e7de      	b.n	b6868 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   b68aa:	2801      	cmp	r0, #1
   b68ac:	d809      	bhi.n	b68c2 <pinAvailable+0x62>
   b68ae:	f000 f889 	bl	b69c4 <_Z19__fetch_global_Wirev>
   b68b2:	2100      	movs	r1, #0
   b68b4:	7c00      	ldrb	r0, [r0, #16]
   b68b6:	f7fe ffd3 	bl	b5860 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   b68ba:	f080 0001 	eor.w	r0, r0, #1
   b68be:	b2c0      	uxtb	r0, r0
   b68c0:	e7d2      	b.n	b6868 <pinAvailable+0x8>
   b68c2:	3809      	subs	r0, #9
   b68c4:	2801      	cmp	r0, #1
   b68c6:	d8ee      	bhi.n	b68a6 <pinAvailable+0x46>
   b68c8:	f000 f83c 	bl	b6944 <_Z22__fetch_global_Serial1v>
   b68cc:	7c00      	ldrb	r0, [r0, #16]
   b68ce:	f7fe ff6f 	bl	b57b0 <hal_usart_is_enabled>
   b68d2:	e7f2      	b.n	b68ba <pinAvailable+0x5a>
   b68d4:	2003e71c 	.word	0x2003e71c
   b68d8:	2003e720 	.word	0x2003e720

000b68dc <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   b68dc:	b538      	push	{r3, r4, r5, lr}
   b68de:	4604      	mov	r4, r0
   b68e0:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   b68e2:	f7fe ff05 	bl	b56f0 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   b68e6:	28ff      	cmp	r0, #255	; 0xff
   b68e8:	d010      	beq.n	b690c <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   b68ea:	2806      	cmp	r0, #6
   b68ec:	d804      	bhi.n	b68f8 <digitalWrite+0x1c>
   b68ee:	234d      	movs	r3, #77	; 0x4d
   b68f0:	fa23 f000 	lsr.w	r0, r3, r0
   b68f4:	07c3      	lsls	r3, r0, #31
   b68f6:	d409      	bmi.n	b690c <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   b68f8:	4620      	mov	r0, r4
   b68fa:	f7ff ffb1 	bl	b6860 <pinAvailable>
   b68fe:	b128      	cbz	r0, b690c <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   b6900:	4629      	mov	r1, r5
   b6902:	4620      	mov	r0, r4
}
   b6904:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   b6908:	f7fe befa 	b.w	b5700 <HAL_GPIO_Write>
}
   b690c:	bd38      	pop	{r3, r4, r5, pc}

000b690e <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b690e:	4770      	bx	lr

000b6910 <_Z20acquireSerial1Bufferv>:
{
   b6910:	b538      	push	{r3, r4, r5, lr}
   b6912:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b6914:	2514      	movs	r5, #20
   b6916:	462a      	mov	r2, r5
   b6918:	2100      	movs	r1, #0
   b691a:	f000 fd93 	bl	b7444 <memset>
   b691e:	8025      	strh	r5, [r4, #0]
   b6920:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b6922:	4907      	ldr	r1, [pc, #28]	; (b6940 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b6924:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b6926:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b6928:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b692a:	f000 f871 	bl	b6a10 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b692e:	4904      	ldr	r1, [pc, #16]	; (b6940 <_Z20acquireSerial1Bufferv+0x30>)
    };
   b6930:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b6932:	4628      	mov	r0, r5
   b6934:	f000 f86c 	bl	b6a10 <_ZnajRKSt9nothrow_t>
    };
   b6938:	60e0      	str	r0, [r4, #12]
}
   b693a:	4620      	mov	r0, r4
   b693c:	bd38      	pop	{r3, r4, r5, pc}
   b693e:	bf00      	nop
   b6940:	000b7838 	.word	0x000b7838

000b6944 <_Z22__fetch_global_Serial1v>:
{
   b6944:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b6946:	4d0e      	ldr	r5, [pc, #56]	; (b6980 <_Z22__fetch_global_Serial1v+0x3c>)
   b6948:	7829      	ldrb	r1, [r5, #0]
   b694a:	f3bf 8f5b 	dmb	ish
   b694e:	f011 0401 	ands.w	r4, r1, #1
{
   b6952:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b6954:	d111      	bne.n	b697a <_Z22__fetch_global_Serial1v+0x36>
   b6956:	4628      	mov	r0, r5
   b6958:	f7fd fba3 	bl	b40a2 <__cxa_guard_acquire>
   b695c:	b168      	cbz	r0, b697a <_Z22__fetch_global_Serial1v+0x36>
   b695e:	a801      	add	r0, sp, #4
   b6960:	f7ff ffd6 	bl	b6910 <_Z20acquireSerial1Bufferv>
   b6964:	aa01      	add	r2, sp, #4
   b6966:	4621      	mov	r1, r4
   b6968:	4806      	ldr	r0, [pc, #24]	; (b6984 <_Z22__fetch_global_Serial1v+0x40>)
   b696a:	f7ff fdf1 	bl	b6550 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b696e:	4628      	mov	r0, r5
   b6970:	f7fd fb9c 	bl	b40ac <__cxa_guard_release>
   b6974:	4804      	ldr	r0, [pc, #16]	; (b6988 <_Z22__fetch_global_Serial1v+0x44>)
   b6976:	f000 fd51 	bl	b741c <atexit>
    return serial1;
}
   b697a:	4802      	ldr	r0, [pc, #8]	; (b6984 <_Z22__fetch_global_Serial1v+0x40>)
   b697c:	b007      	add	sp, #28
   b697e:	bd30      	pop	{r4, r5, pc}
   b6980:	2003e728 	.word	0x2003e728
   b6984:	2003e72c 	.word	0x2003e72c
   b6988:	000b690f 	.word	0x000b690f

000b698c <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b698c:	4770      	bx	lr
	...

000b6990 <_Z17acquireWireBufferv>:
{
   b6990:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b6992:	4b0a      	ldr	r3, [pc, #40]	; (b69bc <_Z17acquireWireBufferv+0x2c>)
   b6994:	6003      	str	r3, [r0, #0]
   b6996:	2301      	movs	r3, #1
{
   b6998:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b699a:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b699c:	4908      	ldr	r1, [pc, #32]	; (b69c0 <_Z17acquireWireBufferv+0x30>)
   b699e:	2020      	movs	r0, #32
   b69a0:	f000 f836 	bl	b6a10 <_ZnajRKSt9nothrow_t>
	};
   b69a4:	2520      	movs	r5, #32
   b69a6:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b69a8:	4905      	ldr	r1, [pc, #20]	; (b69c0 <_Z17acquireWireBufferv+0x30>)
	};
   b69aa:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b69ac:	4628      	mov	r0, r5
   b69ae:	f000 f82f 	bl	b6a10 <_ZnajRKSt9nothrow_t>
	};
   b69b2:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
   b69b6:	4620      	mov	r0, r4
   b69b8:	bd38      	pop	{r3, r4, r5, pc}
   b69ba:	bf00      	nop
   b69bc:	00010018 	.word	0x00010018
   b69c0:	000b7838 	.word	0x000b7838

000b69c4 <_Z19__fetch_global_Wirev>:
{
   b69c4:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b69c6:	4d0e      	ldr	r5, [pc, #56]	; (b6a00 <_Z19__fetch_global_Wirev+0x3c>)
   b69c8:	7829      	ldrb	r1, [r5, #0]
   b69ca:	f3bf 8f5b 	dmb	ish
   b69ce:	f011 0401 	ands.w	r4, r1, #1
{
   b69d2:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b69d4:	d111      	bne.n	b69fa <_Z19__fetch_global_Wirev+0x36>
   b69d6:	4628      	mov	r0, r5
   b69d8:	f7fd fb63 	bl	b40a2 <__cxa_guard_acquire>
   b69dc:	b168      	cbz	r0, b69fa <_Z19__fetch_global_Wirev+0x36>
   b69de:	4668      	mov	r0, sp
   b69e0:	f7ff ffd6 	bl	b6990 <_Z17acquireWireBufferv>
   b69e4:	466a      	mov	r2, sp
   b69e6:	4621      	mov	r1, r4
   b69e8:	4806      	ldr	r0, [pc, #24]	; (b6a04 <_Z19__fetch_global_Wirev+0x40>)
   b69ea:	f7ff fdf1 	bl	b65d0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b69ee:	4628      	mov	r0, r5
   b69f0:	f7fd fb5c 	bl	b40ac <__cxa_guard_release>
   b69f4:	4804      	ldr	r0, [pc, #16]	; (b6a08 <_Z19__fetch_global_Wirev+0x44>)
   b69f6:	f000 fd11 	bl	b741c <atexit>
	return wire;
}
   b69fa:	4802      	ldr	r0, [pc, #8]	; (b6a04 <_Z19__fetch_global_Wirev+0x40>)
   b69fc:	b007      	add	sp, #28
   b69fe:	bd30      	pop	{r4, r5, pc}
   b6a00:	2003e744 	.word	0x2003e744
   b6a04:	2003e748 	.word	0x2003e748
   b6a08:	000b698d 	.word	0x000b698d

000b6a0c <_ZnwjRKSt9nothrow_t>:
   b6a0c:	f7fd bb43 	b.w	b4096 <_Znwj>

000b6a10 <_ZnajRKSt9nothrow_t>:
   b6a10:	f7fd bb43 	b.w	b409a <_Znaj>

000b6a14 <__aeabi_drsub>:
   b6a14:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   b6a18:	e002      	b.n	b6a20 <__adddf3>
   b6a1a:	bf00      	nop

000b6a1c <__aeabi_dsub>:
   b6a1c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000b6a20 <__adddf3>:
   b6a20:	b530      	push	{r4, r5, lr}
   b6a22:	ea4f 0441 	mov.w	r4, r1, lsl #1
   b6a26:	ea4f 0543 	mov.w	r5, r3, lsl #1
   b6a2a:	ea94 0f05 	teq	r4, r5
   b6a2e:	bf08      	it	eq
   b6a30:	ea90 0f02 	teqeq	r0, r2
   b6a34:	bf1f      	itttt	ne
   b6a36:	ea54 0c00 	orrsne.w	ip, r4, r0
   b6a3a:	ea55 0c02 	orrsne.w	ip, r5, r2
   b6a3e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   b6a42:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b6a46:	f000 80e2 	beq.w	b6c0e <__adddf3+0x1ee>
   b6a4a:	ea4f 5454 	mov.w	r4, r4, lsr #21
   b6a4e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   b6a52:	bfb8      	it	lt
   b6a54:	426d      	neglt	r5, r5
   b6a56:	dd0c      	ble.n	b6a72 <__adddf3+0x52>
   b6a58:	442c      	add	r4, r5
   b6a5a:	ea80 0202 	eor.w	r2, r0, r2
   b6a5e:	ea81 0303 	eor.w	r3, r1, r3
   b6a62:	ea82 0000 	eor.w	r0, r2, r0
   b6a66:	ea83 0101 	eor.w	r1, r3, r1
   b6a6a:	ea80 0202 	eor.w	r2, r0, r2
   b6a6e:	ea81 0303 	eor.w	r3, r1, r3
   b6a72:	2d36      	cmp	r5, #54	; 0x36
   b6a74:	bf88      	it	hi
   b6a76:	bd30      	pophi	{r4, r5, pc}
   b6a78:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b6a7c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b6a80:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   b6a84:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   b6a88:	d002      	beq.n	b6a90 <__adddf3+0x70>
   b6a8a:	4240      	negs	r0, r0
   b6a8c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b6a90:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   b6a94:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b6a98:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   b6a9c:	d002      	beq.n	b6aa4 <__adddf3+0x84>
   b6a9e:	4252      	negs	r2, r2
   b6aa0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b6aa4:	ea94 0f05 	teq	r4, r5
   b6aa8:	f000 80a7 	beq.w	b6bfa <__adddf3+0x1da>
   b6aac:	f1a4 0401 	sub.w	r4, r4, #1
   b6ab0:	f1d5 0e20 	rsbs	lr, r5, #32
   b6ab4:	db0d      	blt.n	b6ad2 <__adddf3+0xb2>
   b6ab6:	fa02 fc0e 	lsl.w	ip, r2, lr
   b6aba:	fa22 f205 	lsr.w	r2, r2, r5
   b6abe:	1880      	adds	r0, r0, r2
   b6ac0:	f141 0100 	adc.w	r1, r1, #0
   b6ac4:	fa03 f20e 	lsl.w	r2, r3, lr
   b6ac8:	1880      	adds	r0, r0, r2
   b6aca:	fa43 f305 	asr.w	r3, r3, r5
   b6ace:	4159      	adcs	r1, r3
   b6ad0:	e00e      	b.n	b6af0 <__adddf3+0xd0>
   b6ad2:	f1a5 0520 	sub.w	r5, r5, #32
   b6ad6:	f10e 0e20 	add.w	lr, lr, #32
   b6ada:	2a01      	cmp	r2, #1
   b6adc:	fa03 fc0e 	lsl.w	ip, r3, lr
   b6ae0:	bf28      	it	cs
   b6ae2:	f04c 0c02 	orrcs.w	ip, ip, #2
   b6ae6:	fa43 f305 	asr.w	r3, r3, r5
   b6aea:	18c0      	adds	r0, r0, r3
   b6aec:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   b6af0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b6af4:	d507      	bpl.n	b6b06 <__adddf3+0xe6>
   b6af6:	f04f 0e00 	mov.w	lr, #0
   b6afa:	f1dc 0c00 	rsbs	ip, ip, #0
   b6afe:	eb7e 0000 	sbcs.w	r0, lr, r0
   b6b02:	eb6e 0101 	sbc.w	r1, lr, r1
   b6b06:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   b6b0a:	d31b      	bcc.n	b6b44 <__adddf3+0x124>
   b6b0c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   b6b10:	d30c      	bcc.n	b6b2c <__adddf3+0x10c>
   b6b12:	0849      	lsrs	r1, r1, #1
   b6b14:	ea5f 0030 	movs.w	r0, r0, rrx
   b6b18:	ea4f 0c3c 	mov.w	ip, ip, rrx
   b6b1c:	f104 0401 	add.w	r4, r4, #1
   b6b20:	ea4f 5244 	mov.w	r2, r4, lsl #21
   b6b24:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   b6b28:	f080 809a 	bcs.w	b6c60 <__adddf3+0x240>
   b6b2c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   b6b30:	bf08      	it	eq
   b6b32:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b6b36:	f150 0000 	adcs.w	r0, r0, #0
   b6b3a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b6b3e:	ea41 0105 	orr.w	r1, r1, r5
   b6b42:	bd30      	pop	{r4, r5, pc}
   b6b44:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   b6b48:	4140      	adcs	r0, r0
   b6b4a:	eb41 0101 	adc.w	r1, r1, r1
   b6b4e:	3c01      	subs	r4, #1
   b6b50:	bf28      	it	cs
   b6b52:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   b6b56:	d2e9      	bcs.n	b6b2c <__adddf3+0x10c>
   b6b58:	f091 0f00 	teq	r1, #0
   b6b5c:	bf04      	itt	eq
   b6b5e:	4601      	moveq	r1, r0
   b6b60:	2000      	moveq	r0, #0
   b6b62:	fab1 f381 	clz	r3, r1
   b6b66:	bf08      	it	eq
   b6b68:	3320      	addeq	r3, #32
   b6b6a:	f1a3 030b 	sub.w	r3, r3, #11
   b6b6e:	f1b3 0220 	subs.w	r2, r3, #32
   b6b72:	da0c      	bge.n	b6b8e <__adddf3+0x16e>
   b6b74:	320c      	adds	r2, #12
   b6b76:	dd08      	ble.n	b6b8a <__adddf3+0x16a>
   b6b78:	f102 0c14 	add.w	ip, r2, #20
   b6b7c:	f1c2 020c 	rsb	r2, r2, #12
   b6b80:	fa01 f00c 	lsl.w	r0, r1, ip
   b6b84:	fa21 f102 	lsr.w	r1, r1, r2
   b6b88:	e00c      	b.n	b6ba4 <__adddf3+0x184>
   b6b8a:	f102 0214 	add.w	r2, r2, #20
   b6b8e:	bfd8      	it	le
   b6b90:	f1c2 0c20 	rsble	ip, r2, #32
   b6b94:	fa01 f102 	lsl.w	r1, r1, r2
   b6b98:	fa20 fc0c 	lsr.w	ip, r0, ip
   b6b9c:	bfdc      	itt	le
   b6b9e:	ea41 010c 	orrle.w	r1, r1, ip
   b6ba2:	4090      	lslle	r0, r2
   b6ba4:	1ae4      	subs	r4, r4, r3
   b6ba6:	bfa2      	ittt	ge
   b6ba8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   b6bac:	4329      	orrge	r1, r5
   b6bae:	bd30      	popge	{r4, r5, pc}
   b6bb0:	ea6f 0404 	mvn.w	r4, r4
   b6bb4:	3c1f      	subs	r4, #31
   b6bb6:	da1c      	bge.n	b6bf2 <__adddf3+0x1d2>
   b6bb8:	340c      	adds	r4, #12
   b6bba:	dc0e      	bgt.n	b6bda <__adddf3+0x1ba>
   b6bbc:	f104 0414 	add.w	r4, r4, #20
   b6bc0:	f1c4 0220 	rsb	r2, r4, #32
   b6bc4:	fa20 f004 	lsr.w	r0, r0, r4
   b6bc8:	fa01 f302 	lsl.w	r3, r1, r2
   b6bcc:	ea40 0003 	orr.w	r0, r0, r3
   b6bd0:	fa21 f304 	lsr.w	r3, r1, r4
   b6bd4:	ea45 0103 	orr.w	r1, r5, r3
   b6bd8:	bd30      	pop	{r4, r5, pc}
   b6bda:	f1c4 040c 	rsb	r4, r4, #12
   b6bde:	f1c4 0220 	rsb	r2, r4, #32
   b6be2:	fa20 f002 	lsr.w	r0, r0, r2
   b6be6:	fa01 f304 	lsl.w	r3, r1, r4
   b6bea:	ea40 0003 	orr.w	r0, r0, r3
   b6bee:	4629      	mov	r1, r5
   b6bf0:	bd30      	pop	{r4, r5, pc}
   b6bf2:	fa21 f004 	lsr.w	r0, r1, r4
   b6bf6:	4629      	mov	r1, r5
   b6bf8:	bd30      	pop	{r4, r5, pc}
   b6bfa:	f094 0f00 	teq	r4, #0
   b6bfe:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   b6c02:	bf06      	itte	eq
   b6c04:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   b6c08:	3401      	addeq	r4, #1
   b6c0a:	3d01      	subne	r5, #1
   b6c0c:	e74e      	b.n	b6aac <__adddf3+0x8c>
   b6c0e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b6c12:	bf18      	it	ne
   b6c14:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b6c18:	d029      	beq.n	b6c6e <__adddf3+0x24e>
   b6c1a:	ea94 0f05 	teq	r4, r5
   b6c1e:	bf08      	it	eq
   b6c20:	ea90 0f02 	teqeq	r0, r2
   b6c24:	d005      	beq.n	b6c32 <__adddf3+0x212>
   b6c26:	ea54 0c00 	orrs.w	ip, r4, r0
   b6c2a:	bf04      	itt	eq
   b6c2c:	4619      	moveq	r1, r3
   b6c2e:	4610      	moveq	r0, r2
   b6c30:	bd30      	pop	{r4, r5, pc}
   b6c32:	ea91 0f03 	teq	r1, r3
   b6c36:	bf1e      	ittt	ne
   b6c38:	2100      	movne	r1, #0
   b6c3a:	2000      	movne	r0, #0
   b6c3c:	bd30      	popne	{r4, r5, pc}
   b6c3e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   b6c42:	d105      	bne.n	b6c50 <__adddf3+0x230>
   b6c44:	0040      	lsls	r0, r0, #1
   b6c46:	4149      	adcs	r1, r1
   b6c48:	bf28      	it	cs
   b6c4a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   b6c4e:	bd30      	pop	{r4, r5, pc}
   b6c50:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   b6c54:	bf3c      	itt	cc
   b6c56:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   b6c5a:	bd30      	popcc	{r4, r5, pc}
   b6c5c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b6c60:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   b6c64:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b6c68:	f04f 0000 	mov.w	r0, #0
   b6c6c:	bd30      	pop	{r4, r5, pc}
   b6c6e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b6c72:	bf1a      	itte	ne
   b6c74:	4619      	movne	r1, r3
   b6c76:	4610      	movne	r0, r2
   b6c78:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   b6c7c:	bf1c      	itt	ne
   b6c7e:	460b      	movne	r3, r1
   b6c80:	4602      	movne	r2, r0
   b6c82:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b6c86:	bf06      	itte	eq
   b6c88:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   b6c8c:	ea91 0f03 	teqeq	r1, r3
   b6c90:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   b6c94:	bd30      	pop	{r4, r5, pc}
   b6c96:	bf00      	nop

000b6c98 <__aeabi_ui2d>:
   b6c98:	f090 0f00 	teq	r0, #0
   b6c9c:	bf04      	itt	eq
   b6c9e:	2100      	moveq	r1, #0
   b6ca0:	4770      	bxeq	lr
   b6ca2:	b530      	push	{r4, r5, lr}
   b6ca4:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b6ca8:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b6cac:	f04f 0500 	mov.w	r5, #0
   b6cb0:	f04f 0100 	mov.w	r1, #0
   b6cb4:	e750      	b.n	b6b58 <__adddf3+0x138>
   b6cb6:	bf00      	nop

000b6cb8 <__aeabi_i2d>:
   b6cb8:	f090 0f00 	teq	r0, #0
   b6cbc:	bf04      	itt	eq
   b6cbe:	2100      	moveq	r1, #0
   b6cc0:	4770      	bxeq	lr
   b6cc2:	b530      	push	{r4, r5, lr}
   b6cc4:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b6cc8:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b6ccc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   b6cd0:	bf48      	it	mi
   b6cd2:	4240      	negmi	r0, r0
   b6cd4:	f04f 0100 	mov.w	r1, #0
   b6cd8:	e73e      	b.n	b6b58 <__adddf3+0x138>
   b6cda:	bf00      	nop

000b6cdc <__aeabi_f2d>:
   b6cdc:	0042      	lsls	r2, r0, #1
   b6cde:	ea4f 01e2 	mov.w	r1, r2, asr #3
   b6ce2:	ea4f 0131 	mov.w	r1, r1, rrx
   b6ce6:	ea4f 7002 	mov.w	r0, r2, lsl #28
   b6cea:	bf1f      	itttt	ne
   b6cec:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   b6cf0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   b6cf4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   b6cf8:	4770      	bxne	lr
   b6cfa:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   b6cfe:	bf08      	it	eq
   b6d00:	4770      	bxeq	lr
   b6d02:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   b6d06:	bf04      	itt	eq
   b6d08:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   b6d0c:	4770      	bxeq	lr
   b6d0e:	b530      	push	{r4, r5, lr}
   b6d10:	f44f 7460 	mov.w	r4, #896	; 0x380
   b6d14:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b6d18:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b6d1c:	e71c      	b.n	b6b58 <__adddf3+0x138>
   b6d1e:	bf00      	nop

000b6d20 <__aeabi_ul2d>:
   b6d20:	ea50 0201 	orrs.w	r2, r0, r1
   b6d24:	bf08      	it	eq
   b6d26:	4770      	bxeq	lr
   b6d28:	b530      	push	{r4, r5, lr}
   b6d2a:	f04f 0500 	mov.w	r5, #0
   b6d2e:	e00a      	b.n	b6d46 <__aeabi_l2d+0x16>

000b6d30 <__aeabi_l2d>:
   b6d30:	ea50 0201 	orrs.w	r2, r0, r1
   b6d34:	bf08      	it	eq
   b6d36:	4770      	bxeq	lr
   b6d38:	b530      	push	{r4, r5, lr}
   b6d3a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   b6d3e:	d502      	bpl.n	b6d46 <__aeabi_l2d+0x16>
   b6d40:	4240      	negs	r0, r0
   b6d42:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b6d46:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b6d4a:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b6d4e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   b6d52:	f43f aed8 	beq.w	b6b06 <__adddf3+0xe6>
   b6d56:	f04f 0203 	mov.w	r2, #3
   b6d5a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b6d5e:	bf18      	it	ne
   b6d60:	3203      	addne	r2, #3
   b6d62:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b6d66:	bf18      	it	ne
   b6d68:	3203      	addne	r2, #3
   b6d6a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   b6d6e:	f1c2 0320 	rsb	r3, r2, #32
   b6d72:	fa00 fc03 	lsl.w	ip, r0, r3
   b6d76:	fa20 f002 	lsr.w	r0, r0, r2
   b6d7a:	fa01 fe03 	lsl.w	lr, r1, r3
   b6d7e:	ea40 000e 	orr.w	r0, r0, lr
   b6d82:	fa21 f102 	lsr.w	r1, r1, r2
   b6d86:	4414      	add	r4, r2
   b6d88:	e6bd      	b.n	b6b06 <__adddf3+0xe6>
   b6d8a:	bf00      	nop

000b6d8c <__aeabi_dmul>:
   b6d8c:	b570      	push	{r4, r5, r6, lr}
   b6d8e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b6d92:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b6d96:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b6d9a:	bf1d      	ittte	ne
   b6d9c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b6da0:	ea94 0f0c 	teqne	r4, ip
   b6da4:	ea95 0f0c 	teqne	r5, ip
   b6da8:	f000 f8de 	bleq	b6f68 <__aeabi_dmul+0x1dc>
   b6dac:	442c      	add	r4, r5
   b6dae:	ea81 0603 	eor.w	r6, r1, r3
   b6db2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   b6db6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   b6dba:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   b6dbe:	bf18      	it	ne
   b6dc0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   b6dc4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b6dc8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   b6dcc:	d038      	beq.n	b6e40 <__aeabi_dmul+0xb4>
   b6dce:	fba0 ce02 	umull	ip, lr, r0, r2
   b6dd2:	f04f 0500 	mov.w	r5, #0
   b6dd6:	fbe1 e502 	umlal	lr, r5, r1, r2
   b6dda:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   b6dde:	fbe0 e503 	umlal	lr, r5, r0, r3
   b6de2:	f04f 0600 	mov.w	r6, #0
   b6de6:	fbe1 5603 	umlal	r5, r6, r1, r3
   b6dea:	f09c 0f00 	teq	ip, #0
   b6dee:	bf18      	it	ne
   b6df0:	f04e 0e01 	orrne.w	lr, lr, #1
   b6df4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   b6df8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   b6dfc:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   b6e00:	d204      	bcs.n	b6e0c <__aeabi_dmul+0x80>
   b6e02:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   b6e06:	416d      	adcs	r5, r5
   b6e08:	eb46 0606 	adc.w	r6, r6, r6
   b6e0c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   b6e10:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   b6e14:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   b6e18:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   b6e1c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   b6e20:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b6e24:	bf88      	it	hi
   b6e26:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b6e2a:	d81e      	bhi.n	b6e6a <__aeabi_dmul+0xde>
   b6e2c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   b6e30:	bf08      	it	eq
   b6e32:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   b6e36:	f150 0000 	adcs.w	r0, r0, #0
   b6e3a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b6e3e:	bd70      	pop	{r4, r5, r6, pc}
   b6e40:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   b6e44:	ea46 0101 	orr.w	r1, r6, r1
   b6e48:	ea40 0002 	orr.w	r0, r0, r2
   b6e4c:	ea81 0103 	eor.w	r1, r1, r3
   b6e50:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   b6e54:	bfc2      	ittt	gt
   b6e56:	ebd4 050c 	rsbsgt	r5, r4, ip
   b6e5a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b6e5e:	bd70      	popgt	{r4, r5, r6, pc}
   b6e60:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b6e64:	f04f 0e00 	mov.w	lr, #0
   b6e68:	3c01      	subs	r4, #1
   b6e6a:	f300 80ab 	bgt.w	b6fc4 <__aeabi_dmul+0x238>
   b6e6e:	f114 0f36 	cmn.w	r4, #54	; 0x36
   b6e72:	bfde      	ittt	le
   b6e74:	2000      	movle	r0, #0
   b6e76:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   b6e7a:	bd70      	pople	{r4, r5, r6, pc}
   b6e7c:	f1c4 0400 	rsb	r4, r4, #0
   b6e80:	3c20      	subs	r4, #32
   b6e82:	da35      	bge.n	b6ef0 <__aeabi_dmul+0x164>
   b6e84:	340c      	adds	r4, #12
   b6e86:	dc1b      	bgt.n	b6ec0 <__aeabi_dmul+0x134>
   b6e88:	f104 0414 	add.w	r4, r4, #20
   b6e8c:	f1c4 0520 	rsb	r5, r4, #32
   b6e90:	fa00 f305 	lsl.w	r3, r0, r5
   b6e94:	fa20 f004 	lsr.w	r0, r0, r4
   b6e98:	fa01 f205 	lsl.w	r2, r1, r5
   b6e9c:	ea40 0002 	orr.w	r0, r0, r2
   b6ea0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   b6ea4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b6ea8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b6eac:	fa21 f604 	lsr.w	r6, r1, r4
   b6eb0:	eb42 0106 	adc.w	r1, r2, r6
   b6eb4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b6eb8:	bf08      	it	eq
   b6eba:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b6ebe:	bd70      	pop	{r4, r5, r6, pc}
   b6ec0:	f1c4 040c 	rsb	r4, r4, #12
   b6ec4:	f1c4 0520 	rsb	r5, r4, #32
   b6ec8:	fa00 f304 	lsl.w	r3, r0, r4
   b6ecc:	fa20 f005 	lsr.w	r0, r0, r5
   b6ed0:	fa01 f204 	lsl.w	r2, r1, r4
   b6ed4:	ea40 0002 	orr.w	r0, r0, r2
   b6ed8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b6edc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b6ee0:	f141 0100 	adc.w	r1, r1, #0
   b6ee4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b6ee8:	bf08      	it	eq
   b6eea:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b6eee:	bd70      	pop	{r4, r5, r6, pc}
   b6ef0:	f1c4 0520 	rsb	r5, r4, #32
   b6ef4:	fa00 f205 	lsl.w	r2, r0, r5
   b6ef8:	ea4e 0e02 	orr.w	lr, lr, r2
   b6efc:	fa20 f304 	lsr.w	r3, r0, r4
   b6f00:	fa01 f205 	lsl.w	r2, r1, r5
   b6f04:	ea43 0302 	orr.w	r3, r3, r2
   b6f08:	fa21 f004 	lsr.w	r0, r1, r4
   b6f0c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b6f10:	fa21 f204 	lsr.w	r2, r1, r4
   b6f14:	ea20 0002 	bic.w	r0, r0, r2
   b6f18:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   b6f1c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b6f20:	bf08      	it	eq
   b6f22:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b6f26:	bd70      	pop	{r4, r5, r6, pc}
   b6f28:	f094 0f00 	teq	r4, #0
   b6f2c:	d10f      	bne.n	b6f4e <__aeabi_dmul+0x1c2>
   b6f2e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   b6f32:	0040      	lsls	r0, r0, #1
   b6f34:	eb41 0101 	adc.w	r1, r1, r1
   b6f38:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b6f3c:	bf08      	it	eq
   b6f3e:	3c01      	subeq	r4, #1
   b6f40:	d0f7      	beq.n	b6f32 <__aeabi_dmul+0x1a6>
   b6f42:	ea41 0106 	orr.w	r1, r1, r6
   b6f46:	f095 0f00 	teq	r5, #0
   b6f4a:	bf18      	it	ne
   b6f4c:	4770      	bxne	lr
   b6f4e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   b6f52:	0052      	lsls	r2, r2, #1
   b6f54:	eb43 0303 	adc.w	r3, r3, r3
   b6f58:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   b6f5c:	bf08      	it	eq
   b6f5e:	3d01      	subeq	r5, #1
   b6f60:	d0f7      	beq.n	b6f52 <__aeabi_dmul+0x1c6>
   b6f62:	ea43 0306 	orr.w	r3, r3, r6
   b6f66:	4770      	bx	lr
   b6f68:	ea94 0f0c 	teq	r4, ip
   b6f6c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b6f70:	bf18      	it	ne
   b6f72:	ea95 0f0c 	teqne	r5, ip
   b6f76:	d00c      	beq.n	b6f92 <__aeabi_dmul+0x206>
   b6f78:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b6f7c:	bf18      	it	ne
   b6f7e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b6f82:	d1d1      	bne.n	b6f28 <__aeabi_dmul+0x19c>
   b6f84:	ea81 0103 	eor.w	r1, r1, r3
   b6f88:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b6f8c:	f04f 0000 	mov.w	r0, #0
   b6f90:	bd70      	pop	{r4, r5, r6, pc}
   b6f92:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b6f96:	bf06      	itte	eq
   b6f98:	4610      	moveq	r0, r2
   b6f9a:	4619      	moveq	r1, r3
   b6f9c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b6fa0:	d019      	beq.n	b6fd6 <__aeabi_dmul+0x24a>
   b6fa2:	ea94 0f0c 	teq	r4, ip
   b6fa6:	d102      	bne.n	b6fae <__aeabi_dmul+0x222>
   b6fa8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   b6fac:	d113      	bne.n	b6fd6 <__aeabi_dmul+0x24a>
   b6fae:	ea95 0f0c 	teq	r5, ip
   b6fb2:	d105      	bne.n	b6fc0 <__aeabi_dmul+0x234>
   b6fb4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   b6fb8:	bf1c      	itt	ne
   b6fba:	4610      	movne	r0, r2
   b6fbc:	4619      	movne	r1, r3
   b6fbe:	d10a      	bne.n	b6fd6 <__aeabi_dmul+0x24a>
   b6fc0:	ea81 0103 	eor.w	r1, r1, r3
   b6fc4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b6fc8:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b6fcc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b6fd0:	f04f 0000 	mov.w	r0, #0
   b6fd4:	bd70      	pop	{r4, r5, r6, pc}
   b6fd6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b6fda:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   b6fde:	bd70      	pop	{r4, r5, r6, pc}

000b6fe0 <__aeabi_ddiv>:
   b6fe0:	b570      	push	{r4, r5, r6, lr}
   b6fe2:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b6fe6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b6fea:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b6fee:	bf1d      	ittte	ne
   b6ff0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b6ff4:	ea94 0f0c 	teqne	r4, ip
   b6ff8:	ea95 0f0c 	teqne	r5, ip
   b6ffc:	f000 f8a7 	bleq	b714e <__aeabi_ddiv+0x16e>
   b7000:	eba4 0405 	sub.w	r4, r4, r5
   b7004:	ea81 0e03 	eor.w	lr, r1, r3
   b7008:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b700c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b7010:	f000 8088 	beq.w	b7124 <__aeabi_ddiv+0x144>
   b7014:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b7018:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   b701c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   b7020:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   b7024:	ea4f 2202 	mov.w	r2, r2, lsl #8
   b7028:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   b702c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   b7030:	ea4f 2600 	mov.w	r6, r0, lsl #8
   b7034:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   b7038:	429d      	cmp	r5, r3
   b703a:	bf08      	it	eq
   b703c:	4296      	cmpeq	r6, r2
   b703e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   b7042:	f504 7440 	add.w	r4, r4, #768	; 0x300
   b7046:	d202      	bcs.n	b704e <__aeabi_ddiv+0x6e>
   b7048:	085b      	lsrs	r3, r3, #1
   b704a:	ea4f 0232 	mov.w	r2, r2, rrx
   b704e:	1ab6      	subs	r6, r6, r2
   b7050:	eb65 0503 	sbc.w	r5, r5, r3
   b7054:	085b      	lsrs	r3, r3, #1
   b7056:	ea4f 0232 	mov.w	r2, r2, rrx
   b705a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   b705e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   b7062:	ebb6 0e02 	subs.w	lr, r6, r2
   b7066:	eb75 0e03 	sbcs.w	lr, r5, r3
   b706a:	bf22      	ittt	cs
   b706c:	1ab6      	subcs	r6, r6, r2
   b706e:	4675      	movcs	r5, lr
   b7070:	ea40 000c 	orrcs.w	r0, r0, ip
   b7074:	085b      	lsrs	r3, r3, #1
   b7076:	ea4f 0232 	mov.w	r2, r2, rrx
   b707a:	ebb6 0e02 	subs.w	lr, r6, r2
   b707e:	eb75 0e03 	sbcs.w	lr, r5, r3
   b7082:	bf22      	ittt	cs
   b7084:	1ab6      	subcs	r6, r6, r2
   b7086:	4675      	movcs	r5, lr
   b7088:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   b708c:	085b      	lsrs	r3, r3, #1
   b708e:	ea4f 0232 	mov.w	r2, r2, rrx
   b7092:	ebb6 0e02 	subs.w	lr, r6, r2
   b7096:	eb75 0e03 	sbcs.w	lr, r5, r3
   b709a:	bf22      	ittt	cs
   b709c:	1ab6      	subcs	r6, r6, r2
   b709e:	4675      	movcs	r5, lr
   b70a0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   b70a4:	085b      	lsrs	r3, r3, #1
   b70a6:	ea4f 0232 	mov.w	r2, r2, rrx
   b70aa:	ebb6 0e02 	subs.w	lr, r6, r2
   b70ae:	eb75 0e03 	sbcs.w	lr, r5, r3
   b70b2:	bf22      	ittt	cs
   b70b4:	1ab6      	subcs	r6, r6, r2
   b70b6:	4675      	movcs	r5, lr
   b70b8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   b70bc:	ea55 0e06 	orrs.w	lr, r5, r6
   b70c0:	d018      	beq.n	b70f4 <__aeabi_ddiv+0x114>
   b70c2:	ea4f 1505 	mov.w	r5, r5, lsl #4
   b70c6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   b70ca:	ea4f 1606 	mov.w	r6, r6, lsl #4
   b70ce:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   b70d2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   b70d6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   b70da:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   b70de:	d1c0      	bne.n	b7062 <__aeabi_ddiv+0x82>
   b70e0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b70e4:	d10b      	bne.n	b70fe <__aeabi_ddiv+0x11e>
   b70e6:	ea41 0100 	orr.w	r1, r1, r0
   b70ea:	f04f 0000 	mov.w	r0, #0
   b70ee:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   b70f2:	e7b6      	b.n	b7062 <__aeabi_ddiv+0x82>
   b70f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b70f8:	bf04      	itt	eq
   b70fa:	4301      	orreq	r1, r0
   b70fc:	2000      	moveq	r0, #0
   b70fe:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b7102:	bf88      	it	hi
   b7104:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b7108:	f63f aeaf 	bhi.w	b6e6a <__aeabi_dmul+0xde>
   b710c:	ebb5 0c03 	subs.w	ip, r5, r3
   b7110:	bf04      	itt	eq
   b7112:	ebb6 0c02 	subseq.w	ip, r6, r2
   b7116:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b711a:	f150 0000 	adcs.w	r0, r0, #0
   b711e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b7122:	bd70      	pop	{r4, r5, r6, pc}
   b7124:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   b7128:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   b712c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   b7130:	bfc2      	ittt	gt
   b7132:	ebd4 050c 	rsbsgt	r5, r4, ip
   b7136:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b713a:	bd70      	popgt	{r4, r5, r6, pc}
   b713c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b7140:	f04f 0e00 	mov.w	lr, #0
   b7144:	3c01      	subs	r4, #1
   b7146:	e690      	b.n	b6e6a <__aeabi_dmul+0xde>
   b7148:	ea45 0e06 	orr.w	lr, r5, r6
   b714c:	e68d      	b.n	b6e6a <__aeabi_dmul+0xde>
   b714e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b7152:	ea94 0f0c 	teq	r4, ip
   b7156:	bf08      	it	eq
   b7158:	ea95 0f0c 	teqeq	r5, ip
   b715c:	f43f af3b 	beq.w	b6fd6 <__aeabi_dmul+0x24a>
   b7160:	ea94 0f0c 	teq	r4, ip
   b7164:	d10a      	bne.n	b717c <__aeabi_ddiv+0x19c>
   b7166:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b716a:	f47f af34 	bne.w	b6fd6 <__aeabi_dmul+0x24a>
   b716e:	ea95 0f0c 	teq	r5, ip
   b7172:	f47f af25 	bne.w	b6fc0 <__aeabi_dmul+0x234>
   b7176:	4610      	mov	r0, r2
   b7178:	4619      	mov	r1, r3
   b717a:	e72c      	b.n	b6fd6 <__aeabi_dmul+0x24a>
   b717c:	ea95 0f0c 	teq	r5, ip
   b7180:	d106      	bne.n	b7190 <__aeabi_ddiv+0x1b0>
   b7182:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b7186:	f43f aefd 	beq.w	b6f84 <__aeabi_dmul+0x1f8>
   b718a:	4610      	mov	r0, r2
   b718c:	4619      	mov	r1, r3
   b718e:	e722      	b.n	b6fd6 <__aeabi_dmul+0x24a>
   b7190:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b7194:	bf18      	it	ne
   b7196:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b719a:	f47f aec5 	bne.w	b6f28 <__aeabi_dmul+0x19c>
   b719e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   b71a2:	f47f af0d 	bne.w	b6fc0 <__aeabi_dmul+0x234>
   b71a6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   b71aa:	f47f aeeb 	bne.w	b6f84 <__aeabi_dmul+0x1f8>
   b71ae:	e712      	b.n	b6fd6 <__aeabi_dmul+0x24a>

000b71b0 <__gedf2>:
   b71b0:	f04f 3cff 	mov.w	ip, #4294967295
   b71b4:	e006      	b.n	b71c4 <__cmpdf2+0x4>
   b71b6:	bf00      	nop

000b71b8 <__ledf2>:
   b71b8:	f04f 0c01 	mov.w	ip, #1
   b71bc:	e002      	b.n	b71c4 <__cmpdf2+0x4>
   b71be:	bf00      	nop

000b71c0 <__cmpdf2>:
   b71c0:	f04f 0c01 	mov.w	ip, #1
   b71c4:	f84d cd04 	str.w	ip, [sp, #-4]!
   b71c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b71cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b71d0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b71d4:	bf18      	it	ne
   b71d6:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   b71da:	d01b      	beq.n	b7214 <__cmpdf2+0x54>
   b71dc:	b001      	add	sp, #4
   b71de:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   b71e2:	bf0c      	ite	eq
   b71e4:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   b71e8:	ea91 0f03 	teqne	r1, r3
   b71ec:	bf02      	ittt	eq
   b71ee:	ea90 0f02 	teqeq	r0, r2
   b71f2:	2000      	moveq	r0, #0
   b71f4:	4770      	bxeq	lr
   b71f6:	f110 0f00 	cmn.w	r0, #0
   b71fa:	ea91 0f03 	teq	r1, r3
   b71fe:	bf58      	it	pl
   b7200:	4299      	cmppl	r1, r3
   b7202:	bf08      	it	eq
   b7204:	4290      	cmpeq	r0, r2
   b7206:	bf2c      	ite	cs
   b7208:	17d8      	asrcs	r0, r3, #31
   b720a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   b720e:	f040 0001 	orr.w	r0, r0, #1
   b7212:	4770      	bx	lr
   b7214:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b7218:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b721c:	d102      	bne.n	b7224 <__cmpdf2+0x64>
   b721e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   b7222:	d107      	bne.n	b7234 <__cmpdf2+0x74>
   b7224:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b7228:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b722c:	d1d6      	bne.n	b71dc <__cmpdf2+0x1c>
   b722e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   b7232:	d0d3      	beq.n	b71dc <__cmpdf2+0x1c>
   b7234:	f85d 0b04 	ldr.w	r0, [sp], #4
   b7238:	4770      	bx	lr
   b723a:	bf00      	nop

000b723c <__aeabi_cdrcmple>:
   b723c:	4684      	mov	ip, r0
   b723e:	4610      	mov	r0, r2
   b7240:	4662      	mov	r2, ip
   b7242:	468c      	mov	ip, r1
   b7244:	4619      	mov	r1, r3
   b7246:	4663      	mov	r3, ip
   b7248:	e000      	b.n	b724c <__aeabi_cdcmpeq>
   b724a:	bf00      	nop

000b724c <__aeabi_cdcmpeq>:
   b724c:	b501      	push	{r0, lr}
   b724e:	f7ff ffb7 	bl	b71c0 <__cmpdf2>
   b7252:	2800      	cmp	r0, #0
   b7254:	bf48      	it	mi
   b7256:	f110 0f00 	cmnmi.w	r0, #0
   b725a:	bd01      	pop	{r0, pc}

000b725c <__aeabi_dcmpeq>:
   b725c:	f84d ed08 	str.w	lr, [sp, #-8]!
   b7260:	f7ff fff4 	bl	b724c <__aeabi_cdcmpeq>
   b7264:	bf0c      	ite	eq
   b7266:	2001      	moveq	r0, #1
   b7268:	2000      	movne	r0, #0
   b726a:	f85d fb08 	ldr.w	pc, [sp], #8
   b726e:	bf00      	nop

000b7270 <__aeabi_dcmplt>:
   b7270:	f84d ed08 	str.w	lr, [sp, #-8]!
   b7274:	f7ff ffea 	bl	b724c <__aeabi_cdcmpeq>
   b7278:	bf34      	ite	cc
   b727a:	2001      	movcc	r0, #1
   b727c:	2000      	movcs	r0, #0
   b727e:	f85d fb08 	ldr.w	pc, [sp], #8
   b7282:	bf00      	nop

000b7284 <__aeabi_dcmple>:
   b7284:	f84d ed08 	str.w	lr, [sp, #-8]!
   b7288:	f7ff ffe0 	bl	b724c <__aeabi_cdcmpeq>
   b728c:	bf94      	ite	ls
   b728e:	2001      	movls	r0, #1
   b7290:	2000      	movhi	r0, #0
   b7292:	f85d fb08 	ldr.w	pc, [sp], #8
   b7296:	bf00      	nop

000b7298 <__aeabi_dcmpge>:
   b7298:	f84d ed08 	str.w	lr, [sp, #-8]!
   b729c:	f7ff ffce 	bl	b723c <__aeabi_cdrcmple>
   b72a0:	bf94      	ite	ls
   b72a2:	2001      	movls	r0, #1
   b72a4:	2000      	movhi	r0, #0
   b72a6:	f85d fb08 	ldr.w	pc, [sp], #8
   b72aa:	bf00      	nop

000b72ac <__aeabi_dcmpgt>:
   b72ac:	f84d ed08 	str.w	lr, [sp, #-8]!
   b72b0:	f7ff ffc4 	bl	b723c <__aeabi_cdrcmple>
   b72b4:	bf34      	ite	cc
   b72b6:	2001      	movcc	r0, #1
   b72b8:	2000      	movcs	r0, #0
   b72ba:	f85d fb08 	ldr.w	pc, [sp], #8
   b72be:	bf00      	nop

000b72c0 <__aeabi_dcmpun>:
   b72c0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b72c4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b72c8:	d102      	bne.n	b72d0 <__aeabi_dcmpun+0x10>
   b72ca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   b72ce:	d10a      	bne.n	b72e6 <__aeabi_dcmpun+0x26>
   b72d0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b72d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b72d8:	d102      	bne.n	b72e0 <__aeabi_dcmpun+0x20>
   b72da:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   b72de:	d102      	bne.n	b72e6 <__aeabi_dcmpun+0x26>
   b72e0:	f04f 0000 	mov.w	r0, #0
   b72e4:	4770      	bx	lr
   b72e6:	f04f 0001 	mov.w	r0, #1
   b72ea:	4770      	bx	lr

000b72ec <__aeabi_d2iz>:
   b72ec:	ea4f 0241 	mov.w	r2, r1, lsl #1
   b72f0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   b72f4:	d215      	bcs.n	b7322 <__aeabi_d2iz+0x36>
   b72f6:	d511      	bpl.n	b731c <__aeabi_d2iz+0x30>
   b72f8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   b72fc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   b7300:	d912      	bls.n	b7328 <__aeabi_d2iz+0x3c>
   b7302:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b7306:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   b730a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   b730e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b7312:	fa23 f002 	lsr.w	r0, r3, r2
   b7316:	bf18      	it	ne
   b7318:	4240      	negne	r0, r0
   b731a:	4770      	bx	lr
   b731c:	f04f 0000 	mov.w	r0, #0
   b7320:	4770      	bx	lr
   b7322:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   b7326:	d105      	bne.n	b7334 <__aeabi_d2iz+0x48>
   b7328:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   b732c:	bf08      	it	eq
   b732e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   b7332:	4770      	bx	lr
   b7334:	f04f 0000 	mov.w	r0, #0
   b7338:	4770      	bx	lr
   b733a:	bf00      	nop

000b733c <__aeabi_d2uiz>:
   b733c:	004a      	lsls	r2, r1, #1
   b733e:	d211      	bcs.n	b7364 <__aeabi_d2uiz+0x28>
   b7340:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   b7344:	d211      	bcs.n	b736a <__aeabi_d2uiz+0x2e>
   b7346:	d50d      	bpl.n	b7364 <__aeabi_d2uiz+0x28>
   b7348:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   b734c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   b7350:	d40e      	bmi.n	b7370 <__aeabi_d2uiz+0x34>
   b7352:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b7356:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   b735a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   b735e:	fa23 f002 	lsr.w	r0, r3, r2
   b7362:	4770      	bx	lr
   b7364:	f04f 0000 	mov.w	r0, #0
   b7368:	4770      	bx	lr
   b736a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   b736e:	d102      	bne.n	b7376 <__aeabi_d2uiz+0x3a>
   b7370:	f04f 30ff 	mov.w	r0, #4294967295
   b7374:	4770      	bx	lr
   b7376:	f04f 0000 	mov.w	r0, #0
   b737a:	4770      	bx	lr

000b737c <__aeabi_d2f>:
   b737c:	ea4f 0241 	mov.w	r2, r1, lsl #1
   b7380:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   b7384:	bf24      	itt	cs
   b7386:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   b738a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   b738e:	d90d      	bls.n	b73ac <__aeabi_d2f+0x30>
   b7390:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   b7394:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   b7398:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   b739c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   b73a0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   b73a4:	bf08      	it	eq
   b73a6:	f020 0001 	biceq.w	r0, r0, #1
   b73aa:	4770      	bx	lr
   b73ac:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   b73b0:	d121      	bne.n	b73f6 <__aeabi_d2f+0x7a>
   b73b2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   b73b6:	bfbc      	itt	lt
   b73b8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   b73bc:	4770      	bxlt	lr
   b73be:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b73c2:	ea4f 5252 	mov.w	r2, r2, lsr #21
   b73c6:	f1c2 0218 	rsb	r2, r2, #24
   b73ca:	f1c2 0c20 	rsb	ip, r2, #32
   b73ce:	fa10 f30c 	lsls.w	r3, r0, ip
   b73d2:	fa20 f002 	lsr.w	r0, r0, r2
   b73d6:	bf18      	it	ne
   b73d8:	f040 0001 	orrne.w	r0, r0, #1
   b73dc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b73e0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   b73e4:	fa03 fc0c 	lsl.w	ip, r3, ip
   b73e8:	ea40 000c 	orr.w	r0, r0, ip
   b73ec:	fa23 f302 	lsr.w	r3, r3, r2
   b73f0:	ea4f 0343 	mov.w	r3, r3, lsl #1
   b73f4:	e7cc      	b.n	b7390 <__aeabi_d2f+0x14>
   b73f6:	ea7f 5362 	mvns.w	r3, r2, asr #21
   b73fa:	d107      	bne.n	b740c <__aeabi_d2f+0x90>
   b73fc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   b7400:	bf1e      	ittt	ne
   b7402:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   b7406:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   b740a:	4770      	bxne	lr
   b740c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   b7410:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   b7414:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   b7418:	4770      	bx	lr
   b741a:	bf00      	nop

000b741c <atexit>:
   b741c:	2300      	movs	r3, #0
   b741e:	4601      	mov	r1, r0
   b7420:	461a      	mov	r2, r3
   b7422:	4618      	mov	r0, r3
   b7424:	f000 b84c 	b.w	b74c0 <__register_exitproc>

000b7428 <memcpy>:
   b7428:	440a      	add	r2, r1
   b742a:	4291      	cmp	r1, r2
   b742c:	f100 33ff 	add.w	r3, r0, #4294967295
   b7430:	d100      	bne.n	b7434 <memcpy+0xc>
   b7432:	4770      	bx	lr
   b7434:	b510      	push	{r4, lr}
   b7436:	f811 4b01 	ldrb.w	r4, [r1], #1
   b743a:	f803 4f01 	strb.w	r4, [r3, #1]!
   b743e:	4291      	cmp	r1, r2
   b7440:	d1f9      	bne.n	b7436 <memcpy+0xe>
   b7442:	bd10      	pop	{r4, pc}

000b7444 <memset>:
   b7444:	4402      	add	r2, r0
   b7446:	4603      	mov	r3, r0
   b7448:	4293      	cmp	r3, r2
   b744a:	d100      	bne.n	b744e <memset+0xa>
   b744c:	4770      	bx	lr
   b744e:	f803 1b01 	strb.w	r1, [r3], #1
   b7452:	e7f9      	b.n	b7448 <memset+0x4>

000b7454 <srand>:
   b7454:	b538      	push	{r3, r4, r5, lr}
   b7456:	4b10      	ldr	r3, [pc, #64]	; (b7498 <srand+0x44>)
   b7458:	681d      	ldr	r5, [r3, #0]
   b745a:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b745c:	4604      	mov	r4, r0
   b745e:	b9b3      	cbnz	r3, b748e <srand+0x3a>
   b7460:	2018      	movs	r0, #24
   b7462:	f7fe fb63 	bl	b5b2c <malloc>
   b7466:	4602      	mov	r2, r0
   b7468:	63a8      	str	r0, [r5, #56]	; 0x38
   b746a:	b920      	cbnz	r0, b7476 <srand+0x22>
   b746c:	4b0b      	ldr	r3, [pc, #44]	; (b749c <srand+0x48>)
   b746e:	480c      	ldr	r0, [pc, #48]	; (b74a0 <srand+0x4c>)
   b7470:	2142      	movs	r1, #66	; 0x42
   b7472:	f7fe fb6b 	bl	b5b4c <__assert_func>
   b7476:	490b      	ldr	r1, [pc, #44]	; (b74a4 <srand+0x50>)
   b7478:	4b0b      	ldr	r3, [pc, #44]	; (b74a8 <srand+0x54>)
   b747a:	e9c0 1300 	strd	r1, r3, [r0]
   b747e:	4b0b      	ldr	r3, [pc, #44]	; (b74ac <srand+0x58>)
   b7480:	6083      	str	r3, [r0, #8]
   b7482:	230b      	movs	r3, #11
   b7484:	8183      	strh	r3, [r0, #12]
   b7486:	2100      	movs	r1, #0
   b7488:	2001      	movs	r0, #1
   b748a:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b748e:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b7490:	2200      	movs	r2, #0
   b7492:	611c      	str	r4, [r3, #16]
   b7494:	615a      	str	r2, [r3, #20]
   b7496:	bd38      	pop	{r3, r4, r5, pc}
   b7498:	2003e61c 	.word	0x2003e61c
   b749c:	000b7839 	.word	0x000b7839
   b74a0:	000b7850 	.word	0x000b7850
   b74a4:	abcd330e 	.word	0xabcd330e
   b74a8:	e66d1234 	.word	0xe66d1234
   b74ac:	0005deec 	.word	0x0005deec

000b74b0 <strlen>:
   b74b0:	4603      	mov	r3, r0
   b74b2:	f813 2b01 	ldrb.w	r2, [r3], #1
   b74b6:	2a00      	cmp	r2, #0
   b74b8:	d1fb      	bne.n	b74b2 <strlen+0x2>
   b74ba:	1a18      	subs	r0, r3, r0
   b74bc:	3801      	subs	r0, #1
   b74be:	4770      	bx	lr

000b74c0 <__register_exitproc>:
   b74c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b74c4:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b7580 <__register_exitproc+0xc0>
   b74c8:	4606      	mov	r6, r0
   b74ca:	f8d8 0000 	ldr.w	r0, [r8]
   b74ce:	461f      	mov	r7, r3
   b74d0:	460d      	mov	r5, r1
   b74d2:	4691      	mov	r9, r2
   b74d4:	f000 f856 	bl	b7584 <__retarget_lock_acquire_recursive>
   b74d8:	4b25      	ldr	r3, [pc, #148]	; (b7570 <__register_exitproc+0xb0>)
   b74da:	681c      	ldr	r4, [r3, #0]
   b74dc:	b934      	cbnz	r4, b74ec <__register_exitproc+0x2c>
   b74de:	4c25      	ldr	r4, [pc, #148]	; (b7574 <__register_exitproc+0xb4>)
   b74e0:	601c      	str	r4, [r3, #0]
   b74e2:	4b25      	ldr	r3, [pc, #148]	; (b7578 <__register_exitproc+0xb8>)
   b74e4:	b113      	cbz	r3, b74ec <__register_exitproc+0x2c>
   b74e6:	681b      	ldr	r3, [r3, #0]
   b74e8:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b74ec:	6863      	ldr	r3, [r4, #4]
   b74ee:	2b1f      	cmp	r3, #31
   b74f0:	dd07      	ble.n	b7502 <__register_exitproc+0x42>
   b74f2:	f8d8 0000 	ldr.w	r0, [r8]
   b74f6:	f000 f847 	bl	b7588 <__retarget_lock_release_recursive>
   b74fa:	f04f 30ff 	mov.w	r0, #4294967295
   b74fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b7502:	b34e      	cbz	r6, b7558 <__register_exitproc+0x98>
   b7504:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b7508:	b988      	cbnz	r0, b752e <__register_exitproc+0x6e>
   b750a:	4b1c      	ldr	r3, [pc, #112]	; (b757c <__register_exitproc+0xbc>)
   b750c:	b923      	cbnz	r3, b7518 <__register_exitproc+0x58>
   b750e:	f8d8 0000 	ldr.w	r0, [r8]
   b7512:	f000 f838 	bl	b7586 <__retarget_lock_release>
   b7516:	e7f0      	b.n	b74fa <__register_exitproc+0x3a>
   b7518:	f44f 7084 	mov.w	r0, #264	; 0x108
   b751c:	f7fe fb06 	bl	b5b2c <malloc>
   b7520:	2800      	cmp	r0, #0
   b7522:	d0f4      	beq.n	b750e <__register_exitproc+0x4e>
   b7524:	2300      	movs	r3, #0
   b7526:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b752a:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b752e:	6863      	ldr	r3, [r4, #4]
   b7530:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b7534:	2201      	movs	r2, #1
   b7536:	409a      	lsls	r2, r3
   b7538:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b753c:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b7540:	4313      	orrs	r3, r2
   b7542:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b7546:	2e02      	cmp	r6, #2
   b7548:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b754c:	bf02      	ittt	eq
   b754e:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b7552:	4313      	orreq	r3, r2
   b7554:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b7558:	6863      	ldr	r3, [r4, #4]
   b755a:	f8d8 0000 	ldr.w	r0, [r8]
   b755e:	1c5a      	adds	r2, r3, #1
   b7560:	3302      	adds	r3, #2
   b7562:	6062      	str	r2, [r4, #4]
   b7564:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b7568:	f000 f80e 	bl	b7588 <__retarget_lock_release_recursive>
   b756c:	2000      	movs	r0, #0
   b756e:	e7c6      	b.n	b74fe <__register_exitproc+0x3e>
   b7570:	2003e7e8 	.word	0x2003e7e8
   b7574:	2003e75c 	.word	0x2003e75c
   b7578:	00000000 	.word	0x00000000
   b757c:	000b5b2d 	.word	0x000b5b2d
   b7580:	2003e680 	.word	0x2003e680

000b7584 <__retarget_lock_acquire_recursive>:
   b7584:	4770      	bx	lr

000b7586 <__retarget_lock_release>:
   b7586:	4770      	bx	lr

000b7588 <__retarget_lock_release_recursive>:
   b7588:	4770      	bx	lr

000b758a <link_code_end>:
	...

000b758c <dynalib_user>:
   b758c:	4021 000b 405d 000b 4085 000b 4089 000b     !@..]@...@...@..
   b759c:	0000 0000 6f43 6c75 2064 6f6e 2074 6966     ....Could not fi
   b75ac:	646e 4120 3753 3433 0031 7245 6f72 2072     nd AS7341.Error 
   b75bc:	6572 6461 6e69 2067 6c61 206c 6863 6e61     reading all chan
   b75cc:	656e 736c 0021 3146 3420 3531 6d6e 3a20     nels!.F1 415nm :
   b75dc:	0020 3246 3420 3534 6d6e 3a20 0020 3346      .F2 445nm : .F3
   b75ec:	3420 3038 6d6e 3a20 0020 3446 3520 3531      480nm : .F4 515
   b75fc:	6d6e 3a20 0020 3546 3520 3535 6d6e 3a20     nm : .F5 555nm :
   b760c:	0020 3646 3520 3039 6d6e 3a20 0020 3746      .F6 590nm : .F7
   b761c:	3620 3033 6d6e 3a20 0020 3846 3620 3038      630nm : .F8 680
   b762c:	6d6e 3a20 0020 6c43 6165 2072 2020 3a20     nm : .Clear    :
   b763c:	0020 494e 2052 2020 2020 3a20 0020 0000      .NIR      : ...

000b764c <CSWTCH.61>:
   b764c:	0000 3f00 0000 3f80 0000 4000 0000 4080     ...?...?...@...@
   b765c:	0000 4100 0000 4180 0000 4200 0000 4280     ...A...A...B...B
   b766c:	0000 4300 0000 4380 0000 4400               ...C...C...D

000b7678 <_ZTV15Adafruit_AS7341>:
	...
   b7680:	51bd 000b                                   .Q..

000b7684 <_ZTVN5spark13EthernetClassE>:
	...
   b768c:	5bcb 000b 5bc1 000b 5bb7 000b 5bad 000b     .[...[...[...[..
   b769c:	5ba1 000b 5b95 000b 673d 000b 6745 000b     .[...[..=g..Eg..
   b76ac:	5b89 000b 5b81 000b 5b77 000b 5b6d 000b     .[...[..w[..m[..
   b76bc:	6775 000b                                   ug..

000b76c0 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   b76c0:	0800 1810 2820 3830 6977 6972 676e 5300     .... (08wiring.S
   b76d0:	7379 6574 206d 6c73 6565 2070 6f63 666e     ystem sleep conf
   b76e0:	6769 7275 7461 6f69 206e 7369 6920 766e     iguration is inv
   b76f0:	6c61 6469 002e 616e 006e 6e69 0066 766f     alid..nan.inf.ov
   b7700:	0066 7061 0070 5925 252d 2d6d 6425 2554     f.app.%Y-%m-%dT%
   b7710:	3a48 4d25 253a 2553 007a 7361 7463 6d69     H:%M:%S%z.asctim
   b7720:	0065 0000                                   e...

000b7724 <_ZTV9IPAddress>:
	...
   b772c:	62e1 000b 62d1 000b 62d3 000b               .b...b...b..

000b7738 <_ZTV9USBSerial>:
	...
   b7740:	63c7 000b 642f 000b 6405 000b 5e91 000b     .c../d...d...^..
   b7750:	63f7 000b 63c9 000b 63d9 000b 6429 000b     .c...c...c..)d..
   b7760:	63e9 000b 63c1 000b                         .c...c..

000b7768 <_ZTV11USARTSerial>:
	...
   b7770:	64d5 000b 6541 000b 6519 000b 5e91 000b     .d..Ae...e...^..
   b7780:	64e9 000b 6505 000b 64f7 000b 6513 000b     .d...e...d...e..
   b7790:	64d7 000b 64db 000b                         .d...d..

000b7798 <_ZTV7TwoWire>:
	...
   b77a0:	6579 000b 65c3 000b 659b 000b 657b 000b     ye...e...e..{e..
   b77b0:	65a3 000b 65ab 000b 65b3 000b 65bb 000b     .e...e...e...e..

000b77c0 <_ZTVN5spark9WiFiClassE>:
	...
   b77c8:	66df 000b 66d5 000b 66cb 000b 6681 000b     .f...f...f...f..
   b77d8:	66bf 000b 66b3 000b 673d 000b 6745 000b     .f...f..=g..Eg..
   b77e8:	66a7 000b 669f 000b 6695 000b 668b 000b     .f...f...f...f..
   b77f8:	6775 000b                                   ug..

000b77fc <_ZTVN5spark12NetworkClassE>:
	...
   b7804:	66fd 000b 6707 000b 6711 000b 671b 000b     .f...g...g...g..
   b7814:	6725 000b 6731 000b 673d 000b 6745 000b     %g..1g..=g..Eg..
   b7824:	674d 000b 6759 000b 6761 000b 676b 000b     Mg..Yg..ag..kg..
   b7834:	6775 000b                                   ug..

000b7838 <_ZSt7nothrow>:
   b7838:	5200 4545 544e 6d20 6c61 6f6c 2063 7573     .REENT malloc su
   b7848:	6363 6565 6564 0064 6d2f 746e 772f 726f     cceeded./mnt/wor
   b7858:	736b 6170 6563 772f 726f 736b 6170 6563     kspace/workspace
   b7868:	472f 4343 312d 2d30 6970 6570 696c 656e     /GCC-10-pipeline
   b7878:	6a2f 6e65 696b 736e 472d 4343 312d 2d30     /jenkins-GCC-10-
   b7888:	6970 6570 696c 656e 342d 5f38 3032 3032     pipeline-48_2020
   b7898:	3131 3432 315f 3036 3136 3038 3436 2f31     1124_1606180641/
   b78a8:	7273 2f63 656e 6c77 6269 6e2f 7765 696c     src/newlib/newli
   b78b8:	2f62 696c 6362 732f 6474 696c 2f62 6172     b/libc/stdlib/ra
   b78c8:	646e 632e                                    nd.c.

000b78cd <link_const_variable_data_end>:
   b78cd:	00          	.byte	0x00
	...

000b78d0 <link_constructors_location>:
   b78d0:	000b4b5d 	.word	0x000b4b5d
   b78d4:	000b5bd5 	.word	0x000b5bd5
   b78d8:	000b5e5d 	.word	0x000b5e5d
   b78dc:	000b5e81 	.word	0x000b5e81
   b78e0:	000b611d 	.word	0x000b611d
   b78e4:	000b612d 	.word	0x000b612d
   b78e8:	000b618d 	.word	0x000b618d
   b78ec:	000b66e9 	.word	0x000b66e9
   b78f0:	000b684d 	.word	0x000b684d

000b78f4 <link_constructors_end>:
	...
