
c:/Users/Russe/OneDrive/Desktop/Coastlab/Savetosdcard/target/4.1.0/argon/Savetosdcard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00006030  000b4020  000b4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000ba050  000ba050  0000a050  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000ba074  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000000c0  2003df80  000ba078  0001df80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000007b0  2003e040  2003e040  0002e040  2**3
                  ALLOC
  7 .module_info_suffix 00000028  000ba138  000ba138  0002a138  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000ba160  000ba160  0002a160  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   001bcbc9  00000000  00000000  0002a164  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 0001d794  00000000  00000000  001e6d2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    0004445d  00000000  00000000  002044c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000031d0  00000000  00000000  0024891e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 0000b3a0  00000000  00000000  0024baee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0004ce36  00000000  00000000  00256e8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000650a1  00000000  00000000  002a3cc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00141413  00000000  00000000  00308d65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  000093a0  00000000  00000000  0044a178  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4020:	4809      	ldr	r0, [pc, #36]	; (b4048 <module_user_pre_init+0x28>)
   b4022:	490a      	ldr	r1, [pc, #40]	; (b404c <module_user_pre_init+0x2c>)
   b4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4028:	d005      	beq.n	b4036 <module_user_pre_init+0x16>
   b402a:	4a09      	ldr	r2, [pc, #36]	; (b4050 <module_user_pre_init+0x30>)
   b402c:	4282      	cmp	r2, r0
   b402e:	d002      	beq.n	b4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b4030:	1a12      	subs	r2, r2, r0
   b4032:	f005 fbdd 	bl	b97f0 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4036:	4807      	ldr	r0, [pc, #28]	; (b4054 <module_user_pre_init+0x34>)
   b4038:	4a07      	ldr	r2, [pc, #28]	; (b4058 <module_user_pre_init+0x38>)
   b403a:	2100      	movs	r1, #0
   b403c:	1a12      	subs	r2, r2, r0
   b403e:	f005 fbe5 	bl	b980c <memset>
    return &link_global_data_start;
}
   b4042:	4801      	ldr	r0, [pc, #4]	; (b4048 <module_user_pre_init+0x28>)
   b4044:	bd08      	pop	{r3, pc}
   b4046:	bf00      	nop
   b4048:	2003df80 	.word	0x2003df80
   b404c:	000ba078 	.word	0x000ba078
   b4050:	2003e040 	.word	0x2003e040
   b4054:	2003e040 	.word	0x2003e040
   b4058:	2003e7ed 	.word	0x2003e7ed

000b405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405e:	4e07      	ldr	r6, [pc, #28]	; (b407c <module_user_init+0x20>)
   b4060:	4c07      	ldr	r4, [pc, #28]	; (b4080 <module_user_init+0x24>)
    module_user_init_hook();
   b4062:	f004 f925 	bl	b82b0 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4066:	1ba4      	subs	r4, r4, r6
   b4068:	08a4      	lsrs	r4, r4, #2
   b406a:	2500      	movs	r5, #0
   b406c:	42ac      	cmp	r4, r5
   b406e:	d100      	bne.n	b4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b4072:	f856 3b04 	ldr.w	r3, [r6], #4
   b4076:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4078:	3501      	adds	r5, #1
   b407a:	e7f7      	b.n	b406c <module_user_init+0x10>
   b407c:	000ba024 	.word	0x000ba024
   b4080:	000ba048 	.word	0x000ba048

000b4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4084:	f000 b890 	b.w	b41a8 <setup>

000b4088 <module_user_loop>:
}

void module_user_loop() {
   b4088:	b508      	push	{r3, lr}
    loop();
   b408a:	f000 f8ff 	bl	b428c <loop>
    _post_loop();
}
   b408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b4092:	f004 b8c5 	b.w	b8220 <_post_loop>

000b4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4096:	f003 bd01 	b.w	b7a9c <malloc>

000b409a <_Znaj>:
   b409a:	f003 bcff 	b.w	b7a9c <malloc>

000b409e <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b409e:	f003 bd05 	b.w	b7aac <free>

000b40a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b40a2:	7800      	ldrb	r0, [r0, #0]
   b40a4:	fab0 f080 	clz	r0, r0
   b40a8:	0940      	lsrs	r0, r0, #5
   b40aa:	4770      	bx	lr

000b40ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40ac:	2301      	movs	r3, #1
   b40ae:	7003      	strb	r3, [r0, #0]
   b40b0:	4770      	bx	lr

000b40b2 <_ZN8particle11SPISettingsD1Ev>:
  SPISettings()
  {
  }

  virtual ~SPISettings() {
  }
   b40b2:	4770      	bx	lr

000b40b4 <_ZN4File9availableEv>:
  void setpos(FatPos_t* pos);
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint32_t available() {
    return isFile() ? fileSize() - curPosition() : 0;
   b40b4:	7c03      	ldrb	r3, [r0, #16]
   b40b6:	f013 0308 	ands.w	r3, r3, #8
   b40ba:	bf1e      	ittt	ne
   b40bc:	6ac3      	ldrne	r3, [r0, #44]	; 0x2c
   b40be:	6a40      	ldrne	r0, [r0, #36]	; 0x24
   b40c0:	1a1b      	subne	r3, r3, r0
  /** \return number of bytes available from the current position to EOF
   *   or INT_MAX if more than INT_MAX bytes are available.
   */
  int available() {
    uint32_t n = FatFile::available();
    return n > INT_MAX ? INT_MAX : n;
   b40c2:	2b00      	cmp	r3, #0
  }
   b40c4:	bfac      	ite	ge
   b40c6:	4618      	movge	r0, r3
   b40c8:	f06f 4000 	mvnlt.w	r0, #2147483648	; 0x80000000
   b40cc:	4770      	bx	lr

000b40ce <_ZN4FileD1Ev>:
class File : public FatFile, public Stream {
   b40ce:	4770      	bx	lr

000b40d0 <_ZN4File5writeEPKhj>:
   * include write() is called before a file has been opened, write is called
   * for a read-only file, device is full, a corrupt file system or an
   * I/O error.
   */
  size_t write(const uint8_t *buf, size_t size) {
    return FatFile::write(buf, size);
   b40d0:	3010      	adds	r0, #16
   b40d2:	f002 b8b7 	b.w	b6244 <_ZN7FatFile5writeEPKvj>

000b40d6 <_ZN4File5writeEh>:
  size_t write(uint8_t b) {
   b40d6:	b507      	push	{r0, r1, r2, lr}
  /** Write a single byte.
   * \param[in] b The byte to be written.
   * \return +1 for success or -1 for failure.
   */
  int write(uint8_t b) {
    return write(&b, 1);
   b40d8:	2201      	movs	r2, #1
   b40da:	f88d 1007 	strb.w	r1, [sp, #7]
   b40de:	3010      	adds	r0, #16
   b40e0:	f10d 0107 	add.w	r1, sp, #7
   b40e4:	f002 f8ae 	bl	b6244 <_ZN7FatFile5writeEPKvj>
  }
   b40e8:	b003      	add	sp, #12
   b40ea:	f85d fb04 	ldr.w	pc, [sp], #4

000b40ee <_ZN4File5flushEv>:
    FatFile::sync();
   b40ee:	3010      	adds	r0, #16
   b40f0:	f001 bf48 	b.w	b5f84 <_ZN7FatFile4syncEv>

000b40f4 <_ZN4File4peekEv>:
    return FatFile::peek();
   b40f4:	3010      	adds	r0, #16
   b40f6:	f001 be29 	b.w	b5d4c <_ZN7FatFile4peekEv>

000b40fa <_ZN4File4readEv>:
  int read() {
   b40fa:	b507      	push	{r0, r1, r2, lr}
    return read(&b, 1) == 1 ? b : -1;
   b40fc:	2201      	movs	r2, #1
   b40fe:	f10d 0107 	add.w	r1, sp, #7
   b4102:	3010      	adds	r0, #16
   b4104:	f001 fd74 	bl	b5bf0 <_ZN7FatFile4readEPvj>
   b4108:	2801      	cmp	r0, #1
   b410a:	bf0c      	ite	eq
   b410c:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
   b4110:	f04f 30ff 	movne.w	r0, #4294967295
  }
   b4114:	b003      	add	sp, #12
   b4116:	f85d fb04 	ldr.w	pc, [sp], #4

000b411a <_ZN8particle11SPISettingsD0Ev>:
  virtual ~SPISettings() {
   b411a:	b510      	push	{r4, lr}
  }
   b411c:	2110      	movs	r1, #16
  virtual ~SPISettings() {
   b411e:	4604      	mov	r4, r0
  }
   b4120:	f7ff ffbd 	bl	b409e <_ZdlPvj>
   b4124:	4620      	mov	r0, r4
   b4126:	bd10      	pop	{r4, pc}

000b4128 <_ZN4FileD0Ev>:
class File : public FatFile, public Stream {
   b4128:	b510      	push	{r4, lr}
   b412a:	2134      	movs	r1, #52	; 0x34
   b412c:	4604      	mov	r4, r0
   b412e:	f7ff ffb6 	bl	b409e <_ZdlPvj>
   b4132:	4620      	mov	r0, r4
   b4134:	bd10      	pop	{r4, pc}

000b4136 <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b4136:	b40e      	push	{r1, r2, r3}
   b4138:	b503      	push	{r0, r1, lr}
   b413a:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   b413c:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b413e:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b4142:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   b4144:	f003 ff3c 	bl	b7fc0 <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b4148:	b002      	add	sp, #8
   b414a:	f85d eb04 	ldr.w	lr, [sp], #4
   b414e:	b003      	add	sp, #12
   b4150:	4770      	bx	lr
	...

000b4154 <_ZNK8particle11SPISettings7printToER5Print>:
  bool operator!=(const SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   b4154:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b4156:	4604      	mov	r4, r0
   b4158:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   b415a:	7922      	ldrb	r2, [r4, #4]
   b415c:	68a3      	ldr	r3, [r4, #8]
   b415e:	b132      	cbz	r2, b416e <_ZNK8particle11SPISettings7printToER5Print+0x1a>
   b4160:	b9a3      	cbnz	r3, b418c <_ZNK8particle11SPISettings7printToER5Print+0x38>
      return p.print("<SPISettings default>");
   b4162:	490b      	ldr	r1, [pc, #44]	; (b4190 <_ZNK8particle11SPISettings7printToER5Print+0x3c>)
    else
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
          bitOrder_ == MSBFIRST ? "MSB" : "LSB", (unsigned int)dataMode_);
  }
   b4164:	b002      	add	sp, #8
   b4166:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return p.print("<SPISettings default>");
   b416a:	f003 be0b 	b.w	b7d84 <_ZN5Print5printEPKc>
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b416e:	4a09      	ldr	r2, [pc, #36]	; (b4194 <_ZNK8particle11SPISettings7printToER5Print+0x40>)
   b4170:	7b26      	ldrb	r6, [r4, #12]
   b4172:	4d09      	ldr	r5, [pc, #36]	; (b4198 <_ZNK8particle11SPISettings7printToER5Print+0x44>)
   b4174:	4909      	ldr	r1, [pc, #36]	; (b419c <_ZNK8particle11SPISettings7printToER5Print+0x48>)
   b4176:	7b64      	ldrb	r4, [r4, #13]
   b4178:	2e01      	cmp	r6, #1
   b417a:	bf18      	it	ne
   b417c:	4629      	movne	r1, r5
   b417e:	e9cd 1400 	strd	r1, r4, [sp]
   b4182:	4907      	ldr	r1, [pc, #28]	; (b41a0 <_ZNK8particle11SPISettings7printToER5Print+0x4c>)
   b4184:	f7ff ffd7 	bl	b4136 <_ZN5Print6printfEPKcz>
  }
   b4188:	b002      	add	sp, #8
   b418a:	bd70      	pop	{r4, r5, r6, pc}
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b418c:	4a05      	ldr	r2, [pc, #20]	; (b41a4 <_ZNK8particle11SPISettings7printToER5Print+0x50>)
   b418e:	e7ef      	b.n	b4170 <_ZNK8particle11SPISettings7printToER5Print+0x1c>
   b4190:	000b9a91 	.word	0x000b9a91
   b4194:	000b9b33 	.word	0x000b9b33
   b4198:	000b9a8d 	.word	0x000b9a8d
   b419c:	000b9a89 	.word	0x000b9a89
   b41a0:	000b9aa7 	.word	0x000b9aa7
   b41a4:	000b9a80 	.word	0x000b9a80

000b41a8 <setup>:
SdCardPrintHandler printToCard(SD, SD_CHIP_SELECT, SPI_FULL_SPEED);

SYSTEM_THREAD(ENABLED);
SYSTEM_MODE(SEMI_AUTOMATIC);

void setup() {
   b41a8:	b508      	push	{r3, lr}
  Serial.begin(9600);
   b41aa:	f004 f98f 	bl	b84cc <_Z16_fetch_usbserialv>
   b41ae:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b41b2:	f004 f979 	bl	b84a8 <_ZN9USBSerial5beginEl>

  // Wait for communication with the host computer serial monitor
  while (!Serial) {
   b41b6:	f004 f989 	bl	b84cc <_Z16_fetch_usbserialv>
   b41ba:	f004 f97c 	bl	b84b6 <_ZN9USBSerialcvbEv>
   b41be:	b918      	cbnz	r0, b41c8 <setup+0x20>
    delay(1);
   b41c0:	2001      	movs	r0, #1
   b41c2:	f004 f801 	bl	b81c8 <delay>
  while (!Serial) {
   b41c6:	e7f6      	b.n	b41b6 <setup+0xe>
  }
  
  if (!as7341.begin()){
   b41c8:	f004 fc36 	bl	b8a38 <_Z19__fetch_global_Wirev>
   b41cc:	2300      	movs	r3, #0
   b41ce:	4602      	mov	r2, r0
   b41d0:	2139      	movs	r1, #57	; 0x39
   b41d2:	4825      	ldr	r0, [pc, #148]	; (b4268 <setup+0xc0>)
   b41d4:	f002 fd8c 	bl	b6cf0 <_ZN15Adafruit_AS73415beginEhP7TwoWirel>
   b41d8:	b940      	cbnz	r0, b41ec <setup+0x44>
    Serial.println("Could not find AS7341");
   b41da:	f004 f977 	bl	b84cc <_Z16_fetch_usbserialv>
   b41de:	4923      	ldr	r1, [pc, #140]	; (b426c <setup+0xc4>)
   b41e0:	f003 fde3 	bl	b7daa <_ZN5Print7printlnEPKc>
    while (1) { delay(10); }
   b41e4:	200a      	movs	r0, #10
   b41e6:	f003 ffef 	bl	b81c8 <delay>
   b41ea:	e7fb      	b.n	b41e4 <setup+0x3c>
  }
  
  as7341.setATIME(100);
   b41ec:	2164      	movs	r1, #100	; 0x64
   b41ee:	481e      	ldr	r0, [pc, #120]	; (b4268 <setup+0xc0>)
   b41f0:	f002 fe56 	bl	b6ea0 <_ZN15Adafruit_AS73418setATIMEEh>
  as7341.setASTEP(999);
   b41f4:	f240 31e7 	movw	r1, #999	; 0x3e7
   b41f8:	481b      	ldr	r0, [pc, #108]	; (b4268 <setup+0xc0>)
   b41fa:	f002 fe76 	bl	b6eea <_ZN15Adafruit_AS73418setASTEPEt>
  as7341.setGain(AS7341_GAIN_256X);
   b41fe:	481a      	ldr	r0, [pc, #104]	; (b4268 <setup+0xc0>)
   b4200:	2109      	movs	r1, #9
   b4202:	f002 fe99 	bl	b6f38 <_ZN15Adafruit_AS73417setGainE13as7341_gain_t>

  if (! rtc.begin()) {
   b4206:	481a      	ldr	r0, [pc, #104]	; (b4270 <setup+0xc8>)
   b4208:	f003 f872 	bl	b72f0 <_ZN11RTC_PCF85235beginEv>
   b420c:	b928      	cbnz	r0, b421a <setup+0x72>
    Serial.println("Couldn't find RTC");
   b420e:	f004 f95d 	bl	b84cc <_Z16_fetch_usbserialv>
   b4212:	4918      	ldr	r1, [pc, #96]	; (b4274 <setup+0xcc>)
   b4214:	f003 fdc9 	bl	b7daa <_ZN5Print7printlnEPKc>
    while (1);
   b4218:	e7fe      	b.n	b4218 <setup+0x70>
  }

    if (! rtc.initialized()) {
   b421a:	4815      	ldr	r0, [pc, #84]	; (b4270 <setup+0xc8>)
   b421c:	f003 f86a 	bl	b72f4 <_ZN11RTC_PCF852311initializedEv>
   b4220:	b920      	cbnz	r0, b422c <setup+0x84>
    Serial.println("RTC is NOT running!");
   b4222:	f004 f953 	bl	b84cc <_Z16_fetch_usbserialv>
   b4226:	4914      	ldr	r1, [pc, #80]	; (b4278 <setup+0xd0>)
   b4228:	f003 fdbf 	bl	b7daa <_ZN5Print7printlnEPKc>
    // This line sets the RTC with an explicit date & time, for example to set
    // January 21, 2014 at 3am you would call:
    // rtc.adjust(DateTime(2014, 1, 21, 3, 0, 0));
  }

    if (! aw.begin(0x58)) {
   b422c:	f004 fc04 	bl	b8a38 <_Z19__fetch_global_Wirev>
   b4230:	2158      	movs	r1, #88	; 0x58
   b4232:	4602      	mov	r2, r0
   b4234:	4811      	ldr	r0, [pc, #68]	; (b427c <setup+0xd4>)
   b4236:	f003 f9a6 	bl	b7586 <_ZN15Adafruit_AW95235beginEhP7TwoWire>
   b423a:	b940      	cbnz	r0, b424e <setup+0xa6>
    Serial.println("AW9523 not found? Check wiring!");
   b423c:	f004 f946 	bl	b84cc <_Z16_fetch_usbserialv>
   b4240:	490f      	ldr	r1, [pc, #60]	; (b4280 <setup+0xd8>)
   b4242:	f003 fdb2 	bl	b7daa <_ZN5Print7printlnEPKc>
    while (1) delay(10);  // halt forever
   b4246:	200a      	movs	r0, #10
   b4248:	f003 ffbe 	bl	b81c8 <delay>
   b424c:	e7fb      	b.n	b4246 <setup+0x9e>
  }

  Serial.println("AW9523 found!");
   b424e:	f004 f93d 	bl	b84cc <_Z16_fetch_usbserialv>
   b4252:	490c      	ldr	r1, [pc, #48]	; (b4284 <setup+0xdc>)
   b4254:	f003 fda9 	bl	b7daa <_ZN5Print7printlnEPKc>
  aw.pinMode(LedPin, OUTPUT);
   b4258:	4b0b      	ldr	r3, [pc, #44]	; (b4288 <setup+0xe0>)
   b425a:	4808      	ldr	r0, [pc, #32]	; (b427c <setup+0xd4>)
   b425c:	7819      	ldrb	r1, [r3, #0]
   b425e:	2201      	movs	r2, #1
}
   b4260:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  aw.pinMode(LedPin, OUTPUT);
   b4264:	f003 b934 	b.w	b74d0 <_ZN15Adafruit_AW95237pinModeEhh>
   b4268:	2003e4e0 	.word	0x2003e4e0
   b426c:	000b9ac4 	.word	0x000b9ac4
   b4270:	2003e674 	.word	0x2003e674
   b4274:	000b9ada 	.word	0x000b9ada
   b4278:	000b9aec 	.word	0x000b9aec
   b427c:	2003e508 	.word	0x2003e508
   b4280:	000b9b00 	.word	0x000b9b00
   b4284:	000b9b20 	.word	0x000b9b20
   b4288:	2003e04c 	.word	0x2003e04c

000b428c <loop>:

void loop() {
   b428c:	b5f0      	push	{r4, r5, r6, r7, lr}
   b428e:	ed2d 8b0a 	vpush	{d8-d12}
   b4292:	b095      	sub	sp, #84	; 0x54
  // put your main code here, to run repeatedly:
  DateTime now = rtc.now();
   b4294:	4668      	mov	r0, sp
   b4296:	f003 f84e 	bl	b7336 <_ZN11RTC_PCF85233nowEv>
    
    Serial.print(now.year(), DEC);
   b429a:	f004 f917 	bl	b84cc <_Z16_fetch_usbserialv>
    DateTime (uint16_t year, uint8_t month, uint8_t day,
                uint8_t hour =0, uint8_t min =0, uint8_t sec =0);
    DateTime (const DateTime& copy);
    DateTime (const char* date, const char* time);
    DateTime (const __FlashStringHelper* date, const __FlashStringHelper* time);
    uint16_t year() const       { return 2000 + yOff; }
   b429e:	f89d 1000 	ldrb.w	r1, [sp]
    Serial.print('/');
    Serial.print(now.month(), DEC);
    Serial.print('/');
    Serial.print(now.day(), DEC);
    Serial.print(" (");
    Serial.print(daysOfTheWeek[now.dayOfTheWeek()]);
   b42a2:	4d59      	ldr	r5, [pc, #356]	; (b4408 <loop+0x17c>)
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b42a4:	220a      	movs	r2, #10
   b42a6:	f501 61fa 	add.w	r1, r1, #2000	; 0x7d0
   b42aa:	f003 fd88 	bl	b7dbe <_ZN5Print11printNumberEmh>
    Serial.print('/');
   b42ae:	f004 f90d 	bl	b84cc <_Z16_fetch_usbserialv>
   b42b2:	212f      	movs	r1, #47	; 0x2f
   b42b4:	f003 fd6a 	bl	b7d8c <_ZN5Print5printEc>
    Serial.print(now.month(), DEC);
   b42b8:	f004 f908 	bl	b84cc <_Z16_fetch_usbserialv>
   b42bc:	220a      	movs	r2, #10
   b42be:	f89d 1001 	ldrb.w	r1, [sp, #1]
   b42c2:	f003 fd7c 	bl	b7dbe <_ZN5Print11printNumberEmh>
    Serial.print('/');
   b42c6:	f004 f901 	bl	b84cc <_Z16_fetch_usbserialv>
   b42ca:	212f      	movs	r1, #47	; 0x2f
   b42cc:	f003 fd5e 	bl	b7d8c <_ZN5Print5printEc>
    Serial.print(now.day(), DEC);
   b42d0:	f004 f8fc 	bl	b84cc <_Z16_fetch_usbserialv>
   b42d4:	220a      	movs	r2, #10
   b42d6:	f89d 1002 	ldrb.w	r1, [sp, #2]
   b42da:	f003 fd70 	bl	b7dbe <_ZN5Print11printNumberEmh>
    Serial.print(" (");
   b42de:	f004 f8f5 	bl	b84cc <_Z16_fetch_usbserialv>
   b42e2:	494a      	ldr	r1, [pc, #296]	; (b440c <loop+0x180>)
   b42e4:	f003 fd4e 	bl	b7d84 <_ZN5Print5printEPKc>
    Serial.print(daysOfTheWeek[now.dayOfTheWeek()]);
   b42e8:	f004 f8f0 	bl	b84cc <_Z16_fetch_usbserialv>
   b42ec:	4604      	mov	r4, r0
   b42ee:	4668      	mov	r0, sp
   b42f0:	f002 ffe8 	bl	b72c4 <_ZNK8DateTime12dayOfTheWeekEv>
   b42f4:	b201      	sxth	r1, r0
   b42f6:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   b42fa:	eb05 0181 	add.w	r1, r5, r1, lsl #2
   b42fe:	4620      	mov	r0, r4
   b4300:	f003 fd40 	bl	b7d84 <_ZN5Print5printEPKc>
    Serial.print(") ");
   b4304:	f004 f8e2 	bl	b84cc <_Z16_fetch_usbserialv>
   b4308:	4941      	ldr	r1, [pc, #260]	; (b4410 <loop+0x184>)
   b430a:	f003 fd3b 	bl	b7d84 <_ZN5Print5printEPKc>
    Serial.print(now.hour(), DEC);
   b430e:	f004 f8dd 	bl	b84cc <_Z16_fetch_usbserialv>
   b4312:	220a      	movs	r2, #10
   b4314:	f89d 1003 	ldrb.w	r1, [sp, #3]
   b4318:	f003 fd51 	bl	b7dbe <_ZN5Print11printNumberEmh>
    Serial.print(':');
   b431c:	f004 f8d6 	bl	b84cc <_Z16_fetch_usbserialv>
   b4320:	213a      	movs	r1, #58	; 0x3a
   b4322:	f003 fd33 	bl	b7d8c <_ZN5Print5printEc>
    Serial.print(now.minute(), DEC);
   b4326:	f004 f8d1 	bl	b84cc <_Z16_fetch_usbserialv>
   b432a:	220a      	movs	r2, #10
   b432c:	f89d 1004 	ldrb.w	r1, [sp, #4]
   b4330:	f003 fd45 	bl	b7dbe <_ZN5Print11printNumberEmh>
    Serial.print(':');
   b4334:	f004 f8ca 	bl	b84cc <_Z16_fetch_usbserialv>
   b4338:	213a      	movs	r1, #58	; 0x3a
   b433a:	f003 fd27 	bl	b7d8c <_ZN5Print5printEc>
    Serial.print(now.second(), DEC);
   b433e:	f004 f8c5 	bl	b84cc <_Z16_fetch_usbserialv>
   b4342:	f89d 1005 	ldrb.w	r1, [sp, #5]
   b4346:	220a      	movs	r2, #10
   b4348:	f003 fd39 	bl	b7dbe <_ZN5Print11printNumberEmh>
    Serial.println();
   b434c:	f004 f8be 	bl	b84cc <_Z16_fetch_usbserialv>
   b4350:	f003 fd1f 	bl	b7d92 <_ZN5Print7printlnEv>
   b4354:	f89d 1000 	ldrb.w	r1, [sp]
   b4358:	482e      	ldr	r0, [pc, #184]	; (b4414 <loop+0x188>)
   b435a:	220a      	movs	r2, #10
   b435c:	f501 61fa 	add.w	r1, r1, #2000	; 0x7d0
   b4360:	f003 fd2d 	bl	b7dbe <_ZN5Print11printNumberEmh>



//save timestamp to sd card
    printToCard.print(now.year(), DEC);
    printToCard.print('/');
   b4364:	212f      	movs	r1, #47	; 0x2f
   b4366:	482b      	ldr	r0, [pc, #172]	; (b4414 <loop+0x188>)
   b4368:	f003 fd10 	bl	b7d8c <_ZN5Print5printEc>
   b436c:	220a      	movs	r2, #10
   b436e:	f89d 1001 	ldrb.w	r1, [sp, #1]
   b4372:	4828      	ldr	r0, [pc, #160]	; (b4414 <loop+0x188>)
   b4374:	f003 fd23 	bl	b7dbe <_ZN5Print11printNumberEmh>
    printToCard.print(now.month(), DEC);
    printToCard.print('/');
   b4378:	212f      	movs	r1, #47	; 0x2f
   b437a:	4826      	ldr	r0, [pc, #152]	; (b4414 <loop+0x188>)
   b437c:	f003 fd06 	bl	b7d8c <_ZN5Print5printEc>
   b4380:	220a      	movs	r2, #10
   b4382:	f89d 1002 	ldrb.w	r1, [sp, #2]
   b4386:	4823      	ldr	r0, [pc, #140]	; (b4414 <loop+0x188>)
   b4388:	f003 fd19 	bl	b7dbe <_ZN5Print11printNumberEmh>
    printToCard.print(now.day(), DEC);
    printToCard.print(" (");
   b438c:	491f      	ldr	r1, [pc, #124]	; (b440c <loop+0x180>)
   b438e:	4821      	ldr	r0, [pc, #132]	; (b4414 <loop+0x188>)
   b4390:	f003 fcf8 	bl	b7d84 <_ZN5Print5printEPKc>
    printToCard.print(daysOfTheWeek[now.dayOfTheWeek()]);
   b4394:	4668      	mov	r0, sp
   b4396:	f002 ff95 	bl	b72c4 <_ZNK8DateTime12dayOfTheWeekEv>
   b439a:	b200      	sxth	r0, r0
   b439c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   b43a0:	eb05 0180 	add.w	r1, r5, r0, lsl #2
   b43a4:	481b      	ldr	r0, [pc, #108]	; (b4414 <loop+0x188>)
   b43a6:	f003 fced 	bl	b7d84 <_ZN5Print5printEPKc>
    printToCard.print(") ");
   b43aa:	4919      	ldr	r1, [pc, #100]	; (b4410 <loop+0x184>)
   b43ac:	4819      	ldr	r0, [pc, #100]	; (b4414 <loop+0x188>)
   b43ae:	f003 fce9 	bl	b7d84 <_ZN5Print5printEPKc>
   b43b2:	220a      	movs	r2, #10
   b43b4:	f89d 1003 	ldrb.w	r1, [sp, #3]
   b43b8:	4816      	ldr	r0, [pc, #88]	; (b4414 <loop+0x188>)
   b43ba:	f003 fd00 	bl	b7dbe <_ZN5Print11printNumberEmh>
    printToCard.print(now.hour(), DEC);
    printToCard.print(':');
   b43be:	213a      	movs	r1, #58	; 0x3a
   b43c0:	4814      	ldr	r0, [pc, #80]	; (b4414 <loop+0x188>)
   b43c2:	f003 fce3 	bl	b7d8c <_ZN5Print5printEc>
   b43c6:	220a      	movs	r2, #10
   b43c8:	f89d 1004 	ldrb.w	r1, [sp, #4]
   b43cc:	4811      	ldr	r0, [pc, #68]	; (b4414 <loop+0x188>)
   b43ce:	f003 fcf6 	bl	b7dbe <_ZN5Print11printNumberEmh>
    printToCard.print(now.minute(), DEC);
    printToCard.print(':');
   b43d2:	213a      	movs	r1, #58	; 0x3a
   b43d4:	480f      	ldr	r0, [pc, #60]	; (b4414 <loop+0x188>)
   b43d6:	f003 fcd9 	bl	b7d8c <_ZN5Print5printEc>
   b43da:	f89d 1005 	ldrb.w	r1, [sp, #5]
   b43de:	480d      	ldr	r0, [pc, #52]	; (b4414 <loop+0x188>)
   b43e0:	220a      	movs	r2, #10
   b43e2:	f003 fcec 	bl	b7dbe <_ZN5Print11printNumberEmh>
    printToCard.print(now.second(), DEC);
    printToCard.println();
   b43e6:	480b      	ldr	r0, [pc, #44]	; (b4414 <loop+0x188>)
   b43e8:	f003 fcd3 	bl	b7d92 <_ZN5Print7printlnEv>


  uint16_t readings[12];
  float counts[12];

  if (!as7341.readAllChannels(readings)){
   b43ec:	480a      	ldr	r0, [pc, #40]	; (b4418 <loop+0x18c>)
   b43ee:	a902      	add	r1, sp, #8
   b43f0:	f002 ff0f 	bl	b7212 <_ZN15Adafruit_AS734115readAllChannelsEPt>
   b43f4:	b9a0      	cbnz	r0, b4420 <loop+0x194>
    Serial.println("Error reading all channels!");
   b43f6:	f004 f869 	bl	b84cc <_Z16_fetch_usbserialv>
   b43fa:	4908      	ldr	r1, [pc, #32]	; (b441c <loop+0x190>)
   b43fc:	f003 fcd5 	bl	b7daa <_ZN5Print7printlnEPKc>
  Serial.println();
  printToCard.println("LED OFF");
  printToCard.println();

  delay(100);
}
   b4400:	b015      	add	sp, #84	; 0x54
   b4402:	ecbd 8b0a 	vpop	{d8-d12}
   b4406:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b4408:	2003df80 	.word	0x2003df80
   b440c:	000b9b2e 	.word	0x000b9b2e
   b4410:	000b9b31 	.word	0x000b9b31
   b4414:	2003e540 	.word	0x2003e540
   b4418:	2003e4e0 	.word	0x2003e4e0
   b441c:	000b9b34 	.word	0x000b9b34
    counts[i] = as7341.toBasicCounts(readings[i]);
   b4420:	4f9e      	ldr	r7, [pc, #632]	; (b469c <loop+0x410>)
   b4422:	ad02      	add	r5, sp, #8
   b4424:	ae08      	add	r6, sp, #32
  if (!as7341.readAllChannels(readings)){
   b4426:	24fc      	movs	r4, #252	; 0xfc
    if(i == 4 || i == 5) continue;
   b4428:	2c01      	cmp	r4, #1
   b442a:	d905      	bls.n	b4438 <loop+0x1ac>
    counts[i] = as7341.toBasicCounts(readings[i]);
   b442c:	8829      	ldrh	r1, [r5, #0]
   b442e:	4638      	mov	r0, r7
   b4430:	f002 fdaa 	bl	b6f88 <_ZN15Adafruit_AS734113toBasicCountsEt>
   b4434:	ed86 0a00 	vstr	s0, [r6]
  for(uint8_t i = 0; i < 12; i++) {
   b4438:	3401      	adds	r4, #1
   b443a:	b2e4      	uxtb	r4, r4
   b443c:	2c08      	cmp	r4, #8
   b443e:	f105 0502 	add.w	r5, r5, #2
   b4442:	f106 0604 	add.w	r6, r6, #4
   b4446:	d1ef      	bne.n	b4428 <loop+0x19c>
  aw.digitalWrite(LedPin, HIGH);
   b4448:	4c95      	ldr	r4, [pc, #596]	; (b46a0 <loop+0x414>)
   b444a:	4896      	ldr	r0, [pc, #600]	; (b46a4 <loop+0x418>)
   b444c:	7821      	ldrb	r1, [r4, #0]
   b444e:	2201      	movs	r2, #1
   b4450:	f003 f824 	bl	b749c <_ZN15Adafruit_AW952312digitalWriteEhb>
  Serial.println("LED ON");
   b4454:	f004 f83a 	bl	b84cc <_Z16_fetch_usbserialv>
   b4458:	4993      	ldr	r1, [pc, #588]	; (b46a8 <loop+0x41c>)
   b445a:	f003 fca6 	bl	b7daa <_ZN5Print7printlnEPKc>
  Serial.println();
   b445e:	f004 f835 	bl	b84cc <_Z16_fetch_usbserialv>
   b4462:	f003 fc96 	bl	b7d92 <_ZN5Print7printlnEv>
  printToCard.println("LED ON");
   b4466:	4990      	ldr	r1, [pc, #576]	; (b46a8 <loop+0x41c>)
   b4468:	4890      	ldr	r0, [pc, #576]	; (b46ac <loop+0x420>)
   b446a:	f003 fc9e 	bl	b7daa <_ZN5Print7printlnEPKc>
  printToCard.println();
   b446e:	488f      	ldr	r0, [pc, #572]	; (b46ac <loop+0x420>)
   b4470:	f003 fc8f 	bl	b7d92 <_ZN5Print7printlnEv>
  delay(100);
   b4474:	2064      	movs	r0, #100	; 0x64
   b4476:	f003 fea7 	bl	b81c8 <delay>
  Serial.print("F1 415nm : ");
   b447a:	f004 f827 	bl	b84cc <_Z16_fetch_usbserialv>
   b447e:	498c      	ldr	r1, [pc, #560]	; (b46b0 <loop+0x424>)
   b4480:	f003 fc80 	bl	b7d84 <_ZN5Print5printEPKc>
  Serial.println(counts[0]);
   b4484:	f004 f822 	bl	b84cc <_Z16_fetch_usbserialv>
   b4488:	eddd ca08 	vldr	s25, [sp, #32]
   b448c:	2102      	movs	r1, #2
   b448e:	eeb0 0a6c 	vmov.f32	s0, s25
   b4492:	f003 fd86 	bl	b7fa2 <_ZN5Print7printlnEfi>
  Serial.print("F2 445nm : ");
   b4496:	f004 f819 	bl	b84cc <_Z16_fetch_usbserialv>
   b449a:	4986      	ldr	r1, [pc, #536]	; (b46b4 <loop+0x428>)
   b449c:	f003 fc72 	bl	b7d84 <_ZN5Print5printEPKc>
  Serial.println(counts[1]);
   b44a0:	f004 f814 	bl	b84cc <_Z16_fetch_usbserialv>
   b44a4:	ed9d ca09 	vldr	s24, [sp, #36]	; 0x24
   b44a8:	2102      	movs	r1, #2
   b44aa:	eeb0 0a4c 	vmov.f32	s0, s24
   b44ae:	f003 fd78 	bl	b7fa2 <_ZN5Print7printlnEfi>
  Serial.print("F3 480nm : ");
   b44b2:	f004 f80b 	bl	b84cc <_Z16_fetch_usbserialv>
   b44b6:	4980      	ldr	r1, [pc, #512]	; (b46b8 <loop+0x42c>)
   b44b8:	f003 fc64 	bl	b7d84 <_ZN5Print5printEPKc>
  Serial.println(counts[2]);
   b44bc:	f004 f806 	bl	b84cc <_Z16_fetch_usbserialv>
   b44c0:	eddd ba0a 	vldr	s23, [sp, #40]	; 0x28
   b44c4:	2102      	movs	r1, #2
   b44c6:	eeb0 0a6b 	vmov.f32	s0, s23
   b44ca:	f003 fd6a 	bl	b7fa2 <_ZN5Print7printlnEfi>
  Serial.print("F4 515nm : ");
   b44ce:	f003 fffd 	bl	b84cc <_Z16_fetch_usbserialv>
   b44d2:	497a      	ldr	r1, [pc, #488]	; (b46bc <loop+0x430>)
   b44d4:	f003 fc56 	bl	b7d84 <_ZN5Print5printEPKc>
  Serial.println(counts[3]);
   b44d8:	f003 fff8 	bl	b84cc <_Z16_fetch_usbserialv>
   b44dc:	ed9d ba0b 	vldr	s22, [sp, #44]	; 0x2c
   b44e0:	2102      	movs	r1, #2
   b44e2:	eeb0 0a4b 	vmov.f32	s0, s22
   b44e6:	f003 fd5c 	bl	b7fa2 <_ZN5Print7printlnEfi>
  Serial.print("F5 555nm : ");
   b44ea:	f003 ffef 	bl	b84cc <_Z16_fetch_usbserialv>
   b44ee:	4974      	ldr	r1, [pc, #464]	; (b46c0 <loop+0x434>)
   b44f0:	f003 fc48 	bl	b7d84 <_ZN5Print5printEPKc>
  Serial.println(counts[6]);
   b44f4:	f003 ffea 	bl	b84cc <_Z16_fetch_usbserialv>
   b44f8:	eddd aa0e 	vldr	s21, [sp, #56]	; 0x38
   b44fc:	2102      	movs	r1, #2
   b44fe:	eeb0 0a6a 	vmov.f32	s0, s21
   b4502:	f003 fd4e 	bl	b7fa2 <_ZN5Print7printlnEfi>
  Serial.print("F6 590nm : ");
   b4506:	f003 ffe1 	bl	b84cc <_Z16_fetch_usbserialv>
   b450a:	496e      	ldr	r1, [pc, #440]	; (b46c4 <loop+0x438>)
   b450c:	f003 fc3a 	bl	b7d84 <_ZN5Print5printEPKc>
  Serial.println(counts[7]);
   b4510:	f003 ffdc 	bl	b84cc <_Z16_fetch_usbserialv>
   b4514:	ed9d aa0f 	vldr	s20, [sp, #60]	; 0x3c
   b4518:	2102      	movs	r1, #2
   b451a:	eeb0 0a4a 	vmov.f32	s0, s20
   b451e:	f003 fd40 	bl	b7fa2 <_ZN5Print7printlnEfi>
  Serial.print("F7 630nm : ");
   b4522:	f003 ffd3 	bl	b84cc <_Z16_fetch_usbserialv>
   b4526:	4968      	ldr	r1, [pc, #416]	; (b46c8 <loop+0x43c>)
   b4528:	f003 fc2c 	bl	b7d84 <_ZN5Print5printEPKc>
  Serial.println(counts[8]);
   b452c:	f003 ffce 	bl	b84cc <_Z16_fetch_usbserialv>
   b4530:	eddd 9a10 	vldr	s19, [sp, #64]	; 0x40
   b4534:	2102      	movs	r1, #2
   b4536:	eeb0 0a69 	vmov.f32	s0, s19
   b453a:	f003 fd32 	bl	b7fa2 <_ZN5Print7printlnEfi>
  Serial.print("F8 680nm : ");
   b453e:	f003 ffc5 	bl	b84cc <_Z16_fetch_usbserialv>
   b4542:	4962      	ldr	r1, [pc, #392]	; (b46cc <loop+0x440>)
   b4544:	f003 fc1e 	bl	b7d84 <_ZN5Print5printEPKc>
  Serial.println(counts[9]);
   b4548:	f003 ffc0 	bl	b84cc <_Z16_fetch_usbserialv>
   b454c:	ed9d 9a11 	vldr	s18, [sp, #68]	; 0x44
   b4550:	2102      	movs	r1, #2
   b4552:	eeb0 0a49 	vmov.f32	s0, s18
   b4556:	f003 fd24 	bl	b7fa2 <_ZN5Print7printlnEfi>
  Serial.print("Clear    : ");
   b455a:	f003 ffb7 	bl	b84cc <_Z16_fetch_usbserialv>
   b455e:	495c      	ldr	r1, [pc, #368]	; (b46d0 <loop+0x444>)
   b4560:	f003 fc10 	bl	b7d84 <_ZN5Print5printEPKc>
  Serial.println(counts[10]);
   b4564:	f003 ffb2 	bl	b84cc <_Z16_fetch_usbserialv>
   b4568:	eddd 8a12 	vldr	s17, [sp, #72]	; 0x48
   b456c:	2102      	movs	r1, #2
   b456e:	eeb0 0a68 	vmov.f32	s0, s17
   b4572:	f003 fd16 	bl	b7fa2 <_ZN5Print7printlnEfi>
  Serial.print("NIR      : ");
   b4576:	f003 ffa9 	bl	b84cc <_Z16_fetch_usbserialv>
   b457a:	4956      	ldr	r1, [pc, #344]	; (b46d4 <loop+0x448>)
   b457c:	f003 fc02 	bl	b7d84 <_ZN5Print5printEPKc>
  Serial.println(counts[11]);
   b4580:	f003 ffa4 	bl	b84cc <_Z16_fetch_usbserialv>
   b4584:	ed9d 8a13 	vldr	s16, [sp, #76]	; 0x4c
   b4588:	2102      	movs	r1, #2
   b458a:	eeb0 0a48 	vmov.f32	s0, s16
   b458e:	f003 fd08 	bl	b7fa2 <_ZN5Print7printlnEfi>
  Serial.println();
   b4592:	f003 ff9b 	bl	b84cc <_Z16_fetch_usbserialv>
   b4596:	f003 fbfc 	bl	b7d92 <_ZN5Print7printlnEv>
  printToCard.print("F1 415nm : ");
   b459a:	4945      	ldr	r1, [pc, #276]	; (b46b0 <loop+0x424>)
   b459c:	4843      	ldr	r0, [pc, #268]	; (b46ac <loop+0x420>)
   b459e:	f003 fbf1 	bl	b7d84 <_ZN5Print5printEPKc>
  printToCard.println(counts[0]);
   b45a2:	eeb0 0a6c 	vmov.f32	s0, s25
   b45a6:	2102      	movs	r1, #2
   b45a8:	4840      	ldr	r0, [pc, #256]	; (b46ac <loop+0x420>)
   b45aa:	f003 fcfa 	bl	b7fa2 <_ZN5Print7printlnEfi>
  printToCard.print("F2 445nm : ");
   b45ae:	4941      	ldr	r1, [pc, #260]	; (b46b4 <loop+0x428>)
   b45b0:	483e      	ldr	r0, [pc, #248]	; (b46ac <loop+0x420>)
   b45b2:	f003 fbe7 	bl	b7d84 <_ZN5Print5printEPKc>
  printToCard.println(counts[1]);
   b45b6:	eeb0 0a4c 	vmov.f32	s0, s24
   b45ba:	2102      	movs	r1, #2
   b45bc:	483b      	ldr	r0, [pc, #236]	; (b46ac <loop+0x420>)
   b45be:	f003 fcf0 	bl	b7fa2 <_ZN5Print7printlnEfi>
  printToCard.print("F3 480nm : ");
   b45c2:	493d      	ldr	r1, [pc, #244]	; (b46b8 <loop+0x42c>)
   b45c4:	4839      	ldr	r0, [pc, #228]	; (b46ac <loop+0x420>)
   b45c6:	f003 fbdd 	bl	b7d84 <_ZN5Print5printEPKc>
  printToCard.println(counts[2]);
   b45ca:	eeb0 0a6b 	vmov.f32	s0, s23
   b45ce:	2102      	movs	r1, #2
   b45d0:	4836      	ldr	r0, [pc, #216]	; (b46ac <loop+0x420>)
   b45d2:	f003 fce6 	bl	b7fa2 <_ZN5Print7printlnEfi>
  printToCard.print("F4 515nm : ");
   b45d6:	4939      	ldr	r1, [pc, #228]	; (b46bc <loop+0x430>)
   b45d8:	4834      	ldr	r0, [pc, #208]	; (b46ac <loop+0x420>)
   b45da:	f003 fbd3 	bl	b7d84 <_ZN5Print5printEPKc>
  printToCard.println(counts[3]);
   b45de:	eeb0 0a4b 	vmov.f32	s0, s22
   b45e2:	2102      	movs	r1, #2
   b45e4:	4831      	ldr	r0, [pc, #196]	; (b46ac <loop+0x420>)
   b45e6:	f003 fcdc 	bl	b7fa2 <_ZN5Print7printlnEfi>
  printToCard.print("F5 555nm : ");
   b45ea:	4935      	ldr	r1, [pc, #212]	; (b46c0 <loop+0x434>)
   b45ec:	482f      	ldr	r0, [pc, #188]	; (b46ac <loop+0x420>)
   b45ee:	f003 fbc9 	bl	b7d84 <_ZN5Print5printEPKc>
  printToCard.println(counts[6]);
   b45f2:	eeb0 0a6a 	vmov.f32	s0, s21
   b45f6:	2102      	movs	r1, #2
   b45f8:	482c      	ldr	r0, [pc, #176]	; (b46ac <loop+0x420>)
   b45fa:	f003 fcd2 	bl	b7fa2 <_ZN5Print7printlnEfi>
  printToCard.print("F6 590nm : ");
   b45fe:	4931      	ldr	r1, [pc, #196]	; (b46c4 <loop+0x438>)
   b4600:	482a      	ldr	r0, [pc, #168]	; (b46ac <loop+0x420>)
   b4602:	f003 fbbf 	bl	b7d84 <_ZN5Print5printEPKc>
  printToCard.println(counts[7]);
   b4606:	eeb0 0a4a 	vmov.f32	s0, s20
   b460a:	2102      	movs	r1, #2
   b460c:	4827      	ldr	r0, [pc, #156]	; (b46ac <loop+0x420>)
   b460e:	f003 fcc8 	bl	b7fa2 <_ZN5Print7printlnEfi>
  printToCard.print("F7 630nm : ");
   b4612:	492d      	ldr	r1, [pc, #180]	; (b46c8 <loop+0x43c>)
   b4614:	4825      	ldr	r0, [pc, #148]	; (b46ac <loop+0x420>)
   b4616:	f003 fbb5 	bl	b7d84 <_ZN5Print5printEPKc>
  printToCard.println(counts[8]);
   b461a:	eeb0 0a69 	vmov.f32	s0, s19
   b461e:	2102      	movs	r1, #2
   b4620:	4822      	ldr	r0, [pc, #136]	; (b46ac <loop+0x420>)
   b4622:	f003 fcbe 	bl	b7fa2 <_ZN5Print7printlnEfi>
  printToCard.print("F8 680nm : ");
   b4626:	4929      	ldr	r1, [pc, #164]	; (b46cc <loop+0x440>)
   b4628:	4820      	ldr	r0, [pc, #128]	; (b46ac <loop+0x420>)
   b462a:	f003 fbab 	bl	b7d84 <_ZN5Print5printEPKc>
  printToCard.println(counts[9]);
   b462e:	eeb0 0a49 	vmov.f32	s0, s18
   b4632:	2102      	movs	r1, #2
   b4634:	481d      	ldr	r0, [pc, #116]	; (b46ac <loop+0x420>)
   b4636:	f003 fcb4 	bl	b7fa2 <_ZN5Print7printlnEfi>
  printToCard.print("Clear    : ");
   b463a:	4925      	ldr	r1, [pc, #148]	; (b46d0 <loop+0x444>)
   b463c:	481b      	ldr	r0, [pc, #108]	; (b46ac <loop+0x420>)
   b463e:	f003 fba1 	bl	b7d84 <_ZN5Print5printEPKc>
  printToCard.println(counts[10]);
   b4642:	eeb0 0a68 	vmov.f32	s0, s17
   b4646:	2102      	movs	r1, #2
   b4648:	4818      	ldr	r0, [pc, #96]	; (b46ac <loop+0x420>)
   b464a:	f003 fcaa 	bl	b7fa2 <_ZN5Print7printlnEfi>
  printToCard.print("NIR      : ");
   b464e:	4921      	ldr	r1, [pc, #132]	; (b46d4 <loop+0x448>)
   b4650:	4816      	ldr	r0, [pc, #88]	; (b46ac <loop+0x420>)
   b4652:	f003 fb97 	bl	b7d84 <_ZN5Print5printEPKc>
  printToCard.println(counts[11]);
   b4656:	eeb0 0a48 	vmov.f32	s0, s16
   b465a:	2102      	movs	r1, #2
   b465c:	4813      	ldr	r0, [pc, #76]	; (b46ac <loop+0x420>)
   b465e:	f003 fca0 	bl	b7fa2 <_ZN5Print7printlnEfi>
  delay(500);
   b4662:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   b4666:	f003 fdaf 	bl	b81c8 <delay>
  aw.digitalWrite(LedPin, LOW);
   b466a:	2200      	movs	r2, #0
   b466c:	7821      	ldrb	r1, [r4, #0]
   b466e:	480d      	ldr	r0, [pc, #52]	; (b46a4 <loop+0x418>)
   b4670:	f002 ff14 	bl	b749c <_ZN15Adafruit_AW952312digitalWriteEhb>
  Serial.println("LED OFF");
   b4674:	f003 ff2a 	bl	b84cc <_Z16_fetch_usbserialv>
   b4678:	4917      	ldr	r1, [pc, #92]	; (b46d8 <loop+0x44c>)
   b467a:	f003 fb96 	bl	b7daa <_ZN5Print7printlnEPKc>
  Serial.println();
   b467e:	f003 ff25 	bl	b84cc <_Z16_fetch_usbserialv>
   b4682:	f003 fb86 	bl	b7d92 <_ZN5Print7printlnEv>
  printToCard.println("LED OFF");
   b4686:	4914      	ldr	r1, [pc, #80]	; (b46d8 <loop+0x44c>)
   b4688:	4808      	ldr	r0, [pc, #32]	; (b46ac <loop+0x420>)
   b468a:	f003 fb8e 	bl	b7daa <_ZN5Print7printlnEPKc>
  printToCard.println();
   b468e:	4807      	ldr	r0, [pc, #28]	; (b46ac <loop+0x420>)
   b4690:	f003 fb7f 	bl	b7d92 <_ZN5Print7printlnEv>
  delay(100);
   b4694:	2064      	movs	r0, #100	; 0x64
   b4696:	f003 fd97 	bl	b81c8 <delay>
   b469a:	e6b1      	b.n	b4400 <loop+0x174>
   b469c:	2003e4e0 	.word	0x2003e4e0
   b46a0:	2003e04c 	.word	0x2003e04c
   b46a4:	2003e508 	.word	0x2003e508
   b46a8:	000b9b50 	.word	0x000b9b50
   b46ac:	2003e540 	.word	0x2003e540
   b46b0:	000b9b57 	.word	0x000b9b57
   b46b4:	000b9b63 	.word	0x000b9b63
   b46b8:	000b9b6f 	.word	0x000b9b6f
   b46bc:	000b9b7b 	.word	0x000b9b7b
   b46c0:	000b9b87 	.word	0x000b9b87
   b46c4:	000b9b93 	.word	0x000b9b93
   b46c8:	000b9b9f 	.word	0x000b9b9f
   b46cc:	000b9bab 	.word	0x000b9bab
   b46d0:	000b9bb7 	.word	0x000b9bb7
   b46d4:	000b9bc3 	.word	0x000b9bc3
   b46d8:	000b9bcf 	.word	0x000b9bcf

000b46dc <_GLOBAL__sub_I_as7341>:
}
   b46dc:	b570      	push	{r4, r5, r6, lr}
Adafruit_AS7341 as7341;
   b46de:	482b      	ldr	r0, [pc, #172]	; (b478c <_GLOBAL__sub_I_as7341+0xb0>)
 * \brief Main file system class for %SdFat library.
 */
class SdFat : public SdFileSystem<SdSpiCard> {
 public:
#if IMPLEMENT_SPI_PORT_SELECTION || defined(DOXYGEN)
  SdFat() {
   b46e0:	4c2b      	ldr	r4, [pc, #172]	; (b4790 <_GLOBAL__sub_I_as7341+0xb4>)
  {
   b46e2:	4e2c      	ldr	r6, [pc, #176]	; (b4794 <_GLOBAL__sub_I_as7341+0xb8>)

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b46e4:	4d2c      	ldr	r5, [pc, #176]	; (b4798 <_GLOBAL__sub_I_as7341+0xbc>)
}
   b46e6:	b086      	sub	sp, #24
Adafruit_AS7341 as7341;
   b46e8:	f002 fafa 	bl	b6ce0 <_ZN15Adafruit_AS7341C1Ev>
Adafruit_AW9523 aw;
   b46ec:	482b      	ldr	r0, [pc, #172]	; (b479c <_GLOBAL__sub_I_as7341+0xc0>)
   b46ee:	f002 fe98 	bl	b7422 <_ZN15Adafruit_AW9523C1Ev>
    Print() : write_error(0) {}
   b46f2:	4a2b      	ldr	r2, [pc, #172]	; (b47a0 <_GLOBAL__sub_I_as7341+0xc4>)
   b46f4:	f8c4 6470 	str.w	r6, [r4, #1136]	; 0x470
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b46f8:	2300      	movs	r3, #0
   b46fa:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   b46fe:	e9c2 3101 	strd	r3, r1, [r2, #4]
  File() {}
   b4702:	4928      	ldr	r1, [pc, #160]	; (b47a4 <_GLOBAL__sub_I_as7341+0xc8>)
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   b4704:	6113      	str	r3, [r2, #16]
   b4706:	6011      	str	r1, [r2, #0]
   b4708:	2264      	movs	r2, #100	; 0x64
   b470a:	f8c4 2460 	str.w	r2, [r4, #1120]	; 0x460
   b470e:	2201      	movs	r2, #1
   b4710:	6063      	str	r3, [r4, #4]
   b4712:	f8c4 343c 	str.w	r3, [r4, #1084]	; 0x43c
   b4716:	f8c4 3468 	str.w	r3, [r4, #1128]	; 0x468
   b471a:	f884 2474 	strb.w	r2, [r4, #1140]	; 0x474
   b471e:	f8c4 3478 	str.w	r3, [r4, #1144]	; 0x478
   b4722:	f8a4 347c 	strh.w	r3, [r4, #1148]	; 0x47c
   b4726:	7829      	ldrb	r1, [r5, #0]
   b4728:	f3bf 8f5b 	dmb	ish
   b472c:	4011      	ands	r1, r2
   b472e:	d10b      	bne.n	b4748 <_GLOBAL__sub_I_as7341+0x6c>
   b4730:	4628      	mov	r0, r5
   b4732:	9101      	str	r1, [sp, #4]
   b4734:	f7ff fcb5 	bl	b40a2 <__cxa_guard_acquire>
   b4738:	9901      	ldr	r1, [sp, #4]
   b473a:	b128      	cbz	r0, b4748 <_GLOBAL__sub_I_as7341+0x6c>
   b473c:	481a      	ldr	r0, [pc, #104]	; (b47a8 <_GLOBAL__sub_I_as7341+0xcc>)
   b473e:	f003 fa31 	bl	b7ba4 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b4742:	4628      	mov	r0, r5
   b4744:	f7ff fcb2 	bl	b40ac <__cxa_guard_release>
#if IMPLEMENT_SPI_PORT_SELECTION || defined(DOXYGEN)
  /** Set SPI port number.
   * \param[in] spiPort Hardware SPI port.
   */
  void setPort(SPIClass* spiPort) {
    m_spi = spiPort ? spiPort : &SDCARD_SPI;
   b4748:	4b17      	ldr	r3, [pc, #92]	; (b47a8 <_GLOBAL__sub_I_as7341+0xcc>)
   b474a:	f8c4 346c 	str.w	r3, [r4, #1132]	; 0x46c
      dataMode_{dataMode}
   b474e:	4b17      	ldr	r3, [pc, #92]	; (b47ac <_GLOBAL__sub_I_as7341+0xd0>)
   b4750:	9304      	str	r3, [sp, #16]
   b4752:	2400      	movs	r4, #0
SdCardPrintHandler printToCard(SD, SD_CHIP_SELECT, SPI_FULL_SPEED);
   b4754:	ab02      	add	r3, sp, #8
   b4756:	2501      	movs	r5, #1
   b4758:	2205      	movs	r2, #5
   b475a:	490d      	ldr	r1, [pc, #52]	; (b4790 <_GLOBAL__sub_I_as7341+0xb4>)
   b475c:	4814      	ldr	r0, [pc, #80]	; (b47b0 <_GLOBAL__sub_I_as7341+0xd4>)
   b475e:	9602      	str	r6, [sp, #8]
   b4760:	f88d 400c 	strb.w	r4, [sp, #12]
   b4764:	f8ad 5014 	strh.w	r5, [sp, #20]
   b4768:	f000 f8c4 	bl	b48f4 <_ZN18SdCardPrintHandlerC1ER5SdFathN8particle11SPISettingsE>
SYSTEM_THREAD(ENABLED);
   b476c:	4628      	mov	r0, r5
   b476e:	4621      	mov	r1, r4
   b4770:	f003 f8f0 	bl	b7954 <system_thread_set_state>

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b4774:	4b0f      	ldr	r3, [pc, #60]	; (b47b4 <_GLOBAL__sub_I_as7341+0xd8>)
    SleepResult() {}
   b4776:	4a10      	ldr	r2, [pc, #64]	; (b47b8 <_GLOBAL__sub_I_as7341+0xdc>)
   b4778:	609a      	str	r2, [r3, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b477a:	2002      	movs	r0, #2
              error_(SYSTEM_ERROR_NONE) {
   b477c:	e9c3 4400 	strd	r4, r4, [r3]
}
   b4780:	b006      	add	sp, #24
   b4782:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        set_system_mode(mode);
   b4786:	f003 b8d5 	b.w	b7934 <set_system_mode>
   b478a:	bf00      	nop
   b478c:	2003e4e0 	.word	0x2003e4e0
   b4790:	2003e050 	.word	0x2003e050
   b4794:	000b9be0 	.word	0x000b9be0
   b4798:	2003e040 	.word	0x2003e040
   b479c:	2003e508 	.word	0x2003e508
   b47a0:	2003e50c 	.word	0x2003e50c
   b47a4:	000b9bf4 	.word	0x000b9bf4
   b47a8:	2003e044 	.word	0x2003e044
   b47ac:	02faf080 	.word	0x02faf080
   b47b0:	2003e540 	.word	0x2003e540
   b47b4:	2003e4d4 	.word	0x2003e4d4
   b47b8:	ffff0000 	.word	0xffff0000

000b47bc <_ZN18SdCardPrintHandler16dateTimeCallbackEPtS0_>:
	// Start over at beginning of buffer
	bufOffset = 0;
}

// [static]
void SdCardPrintHandler::dateTimeCallback(uint16_t* date, uint16_t* time) {
   b47bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b47be:	460e      	mov	r6, r1
   b47c0:	4605      	mov	r5, r0
	*date = FAT_DATE(Time.year(), Time.month(), Time.day());
   b47c2:	f003 fceb 	bl	b819c <_ZN9TimeClass4yearEv>
   b47c6:	4604      	mov	r4, r0
   b47c8:	f003 fce0 	bl	b818c <_ZN9TimeClass5monthEv>
   b47cc:	4607      	mov	r7, r0
   b47ce:	f003 fcd1 	bl	b8174 <_ZN9TimeClass3dayEv>
 * \param[in] day [1,31]
 *
 * \return Packed date for dir_t entry.
 */
static inline uint16_t FAT_DATE(uint16_t year, uint8_t month, uint8_t day) {
  return (year - 1980) << 9 | month << 5 | day;
   b47d2:	017f      	lsls	r7, r7, #5
   b47d4:	b2c3      	uxtb	r3, r0
   b47d6:	b2a4      	uxth	r4, r4
   b47d8:	f407 57ff 	and.w	r7, r7, #8160	; 0x1fe0
   b47dc:	f2a4 74bc 	subw	r4, r4, #1980	; 0x7bc
   b47e0:	433b      	orrs	r3, r7
   b47e2:	ea43 2344 	orr.w	r3, r3, r4, lsl #9
   b47e6:	802b      	strh	r3, [r5, #0]
	*time = FAT_TIME(Time.hour(), Time.minute(), Time.second());
   b47e8:	f003 fca0 	bl	b812c <_ZN9TimeClass4hourEv>
   b47ec:	4604      	mov	r4, r0
   b47ee:	f003 fca9 	bl	b8144 <_ZN9TimeClass6minuteEv>
   b47f2:	4605      	mov	r5, r0
   b47f4:	f003 fcb2 	bl	b815c <_ZN9TimeClass6secondEv>
 * \param[in] second [0,59]
 *
 * \return Packed time for dir_t entry.
 */
static inline uint16_t FAT_TIME(uint8_t hour, uint8_t minute, uint8_t second) {
  return hour << 11 | minute << 5 | second >> 1;
   b47f8:	02e4      	lsls	r4, r4, #11
   b47fa:	016d      	lsls	r5, r5, #5
   b47fc:	f404 24ff 	and.w	r4, r4, #522240	; 0x7f800
   b4800:	f405 55ff 	and.w	r5, r5, #8160	; 0x1fe0
   b4804:	432c      	orrs	r4, r5
   b4806:	f3c0 0046 	ubfx	r0, r0, #1, #7
   b480a:	4304      	orrs	r4, r0
   b480c:	8034      	strh	r4, [r6, #0]
}
   b480e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b4810 <_ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE8_M_eraseEPSt13_Rb_tree_nodeIiE.isra.0>:
      }

  template<typename _Key, typename _Val, typename _KeyOfValue,
	   typename _Compare, typename _Alloc>
    void
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
   b4810:	b538      	push	{r3, r4, r5, lr}
   b4812:	4604      	mov	r4, r0
    _M_erase(_Link_type __x)
    {
      // Erase without rebalancing.
      while (__x != 0)
   b4814:	b14c      	cbz	r4, b482a <_ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE8_M_eraseEPSt13_Rb_tree_nodeIiE.isra.0+0x1a>
	{
	  _M_erase(_S_right(__x));
   b4816:	68e0      	ldr	r0, [r4, #12]
   b4818:	f7ff fffa 	bl	b4810 <_ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE8_M_eraseEPSt13_Rb_tree_nodeIiE.isra.0>
      { return static_cast<_Link_type>(__x->_M_left); }
   b481c:	68a5      	ldr	r5, [r4, #8]
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
   b481e:	4620      	mov	r0, r4
   b4820:	2114      	movs	r1, #20
   b4822:	f7ff fc3c 	bl	b409e <_ZdlPvj>
	  _Link_type __y = _S_left(__x);
	  _M_drop_node(__x);
	  __x = __y;
   b4826:	462c      	mov	r4, r5
      while (__x != 0)
   b4828:	e7f4      	b.n	b4814 <_ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE8_M_eraseEPSt13_Rb_tree_nodeIiE.isra.0+0x4>
	}
    }
   b482a:	bd38      	pop	{r3, r4, r5, pc}

000b482c <_ZN18SdCardPrintHandlerD1Ev>:
SdCardPrintHandler::~SdCardPrintHandler() {
   b482c:	b510      	push	{r4, lr}
   b482e:	4b04      	ldr	r3, [pc, #16]	; (b4840 <_ZN18SdCardPrintHandlerD1Ev+0x14>)
   b4830:	6003      	str	r3, [r0, #0]
   b4832:	4604      	mov	r4, r0
      { _M_erase(_M_begin()); }
   b4834:	f8d0 0120 	ldr.w	r0, [r0, #288]	; 0x120
   b4838:	f7ff ffea 	bl	b4810 <_ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE8_M_eraseEPSt13_Rb_tree_nodeIiE.isra.0>
}
   b483c:	4620      	mov	r0, r4
   b483e:	bd10      	pop	{r4, pc}
   b4840:	000b9cb0 	.word	0x000b9cb0

000b4844 <_ZN18SdCardPrintHandlerD0Ev>:
SdCardPrintHandler::~SdCardPrintHandler() {
   b4844:	b510      	push	{r4, lr}
   b4846:	4604      	mov	r4, r0
}
   b4848:	f7ff fff0 	bl	b482c <_ZN18SdCardPrintHandlerD1Ev>
   b484c:	4620      	mov	r0, r4
   b484e:	f44f 719a 	mov.w	r1, #308	; 0x134
   b4852:	f7ff fc24 	bl	b409e <_ZdlPvj>
   b4856:	4620      	mov	r0, r4
   b4858:	bd10      	pop	{r4, pc}

000b485a <_ZN5Print8printlnfEPKcz>:
    size_t printlnf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b485a:	b40e      	push	{r1, r2, r3}
   b485c:	b503      	push	{r0, r1, lr}
   b485e:	ab03      	add	r3, sp, #12
        auto r = this->vprintf(true, format, args);
   b4860:	2101      	movs	r1, #1
    size_t printlnf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b4862:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b4866:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(true, format, args);
   b4868:	f003 fbaa 	bl	b7fc0 <_ZN5Print7vprintfEbPKcSt9__va_list>
    }
   b486c:	b002      	add	sp, #8
   b486e:	f85d eb04 	ldr.w	lr, [sp], #4
   b4872:	b003      	add	sp, #12
   b4874:	4770      	bx	lr
	...

000b4878 <_ZN5SdFat5beginEhN8particle11SPISettingsE>:
   *
   * \param[in] csPin SD card chip select pin.
   * \param[in] spiSettings SPI speed, mode, and bit order.
   * \return true for success else false.
   */
  bool begin(uint8_t csPin = SS, SPISettings spiSettings = SPI_FULL_SPEED) {
   b4878:	b530      	push	{r4, r5, lr}
   b487a:	b085      	sub	sp, #20
class SPISettings : public Printable {
   b487c:	4b1b      	ldr	r3, [pc, #108]	; (b48ec <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x74>)
   b487e:	9300      	str	r3, [sp, #0]
   b4880:	7913      	ldrb	r3, [r2, #4]
   b4882:	f88d 3004 	strb.w	r3, [sp, #4]
   b4886:	6893      	ldr	r3, [r2, #8]
   b4888:	9302      	str	r3, [sp, #8]
    return m_card.begin(&m_spi, csPin, spiSettings) &&
   b488a:	f500 658c 	add.w	r5, r0, #1120	; 0x460
   b488e:	8993      	ldrh	r3, [r2, #12]
   b4890:	f8ad 300c 	strh.w	r3, [sp, #12]
  bool begin(uint8_t csPin = SS, SPISettings spiSettings = SPI_FULL_SPEED) {
   b4894:	4604      	mov	r4, r0
    return m_card.begin(&m_spi, csPin, spiSettings) &&
   b4896:	460a      	mov	r2, r1
   b4898:	466b      	mov	r3, sp
   b489a:	f200 416c 	addw	r1, r0, #1132	; 0x46c
   b489e:	4628      	mov	r0, r5
   b48a0:	f002 f80c 	bl	b68bc <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE>
   b48a4:	b910      	cbnz	r0, b48ac <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x34>
   b48a6:	2000      	movs	r0, #0
           SdFileSystem::begin();
  }
   b48a8:	b005      	add	sp, #20
   b48aa:	bd30      	pop	{r4, r5, pc}
   * \param[in] part partition to initialize.
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool begin(BlockDriver* blockDev, uint8_t part = 0) {
    m_blockDev = blockDev;
   b48ac:	6025      	str	r5, [r4, #0]
  FatVolume* vol() {
    return this;
  }
  /** \return a pointer to the volume working directory. */
  FatFile* vwd() {
    return &m_vwd;
   b48ae:	f204 453c 	addw	r5, r4, #1084	; 0x43c
    vwd()->close();
   b48b2:	4628      	mov	r0, r5
   b48b4:	f001 fb9c 	bl	b5ff0 <_ZN7FatFile5closeEv>
    return (part ? init(part) : init(1) || init(0))
   b48b8:	2101      	movs	r1, #1
   b48ba:	4620      	mov	r0, r4
   b48bc:	f001 fea8 	bl	b6610 <_ZN9FatVolume4initEh>
   b48c0:	4601      	mov	r1, r0
   b48c2:	b168      	cbz	r0, b48e0 <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x68>
            && vwd()->openRoot(this) && FatFile::setCwd(vwd());
   b48c4:	4621      	mov	r1, r4
   b48c6:	4628      	mov	r0, r5
   b48c8:	f001 f98c 	bl	b5be4 <_ZN7FatFile8openRootEP9FatVolume>
   b48cc:	2800      	cmp	r0, #0
   b48ce:	d0ea      	beq.n	b48a6 <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x2e>
    if (!dir->isDir()) {
   b48d0:	f894 343c 	ldrb.w	r3, [r4, #1084]	; 0x43c
   b48d4:	f013 0f70 	tst.w	r3, #112	; 0x70
   b48d8:	d0e5      	beq.n	b48a6 <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x2e>
    m_cwd = dir;
   b48da:	4b05      	ldr	r3, [pc, #20]	; (b48f0 <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x78>)
   b48dc:	601d      	str	r5, [r3, #0]
    return true;
   b48de:	e7e3      	b.n	b48a8 <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x30>
    return (part ? init(part) : init(1) || init(0))
   b48e0:	4620      	mov	r0, r4
   b48e2:	f001 fe95 	bl	b6610 <_ZN9FatVolume4initEh>
   b48e6:	2800      	cmp	r0, #0
   b48e8:	d1ec      	bne.n	b48c4 <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x4c>
   b48ea:	e7dc      	b.n	b48a6 <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x2e>
   b48ec:	000b9be0 	.word	0x000b9be0
   b48f0:	2003e67c 	.word	0x2003e67c

000b48f4 <_ZN18SdCardPrintHandlerC1ER5SdFathN8particle11SPISettingsE>:
SdCardPrintHandler::SdCardPrintHandler(SdFat &sd, uint8_t csPin, SPISettings spiSettings) : sd(sd), csPin(csPin), spiSettings(spiSettings){
   b48f4:	b570      	push	{r4, r5, r6, lr}
   b48f6:	7302      	strb	r2, [r0, #12]
   b48f8:	4a16      	ldr	r2, [pc, #88]	; (b4954 <_ZN18SdCardPrintHandlerC1ER5SdFathN8particle11SPISettingsE+0x60>)
   b48fa:	6102      	str	r2, [r0, #16]
   b48fc:	791a      	ldrb	r2, [r3, #4]
   b48fe:	7502      	strb	r2, [r0, #20]
   b4900:	689a      	ldr	r2, [r3, #8]
   b4902:	899b      	ldrh	r3, [r3, #12]
   b4904:	6182      	str	r2, [r0, #24]
   b4906:	8383      	strh	r3, [r0, #28]
   b4908:	4a13      	ldr	r2, [pc, #76]	; (b4958 <_ZN18SdCardPrintHandlerC1ER5SdFathN8particle11SPISettingsE+0x64>)
   b490a:	4b14      	ldr	r3, [pc, #80]	; (b495c <_ZN18SdCardPrintHandlerC1ER5SdFathN8particle11SPISettingsE+0x68>)
   b490c:	6203      	str	r3, [r0, #32]
   b490e:	230a      	movs	r3, #10
   b4910:	e9c0 2309 	strd	r2, r3, [r0, #36]	; 0x24
   b4914:	f242 7310 	movw	r3, #10000	; 0x2710
   b4918:	62c3      	str	r3, [r0, #44]	; 0x2c
   b491a:	2301      	movs	r3, #1
    Print() : write_error(0) {}
   b491c:	2500      	movs	r5, #0
   b491e:	4e10      	ldr	r6, [pc, #64]	; (b4960 <_ZN18SdCardPrintHandlerC1ER5SdFathN8particle11SPISettingsE+0x6c>)
   b4920:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
   b4924:	f8a0 30c8 	strh.w	r3, [r0, #200]	; 0xc8
   b4928:	f8c0 30cc 	str.w	r3, [r0, #204]	; 0xcc
	  : _Node_allocator()
   b492c:	f500 738e 	add.w	r3, r0, #284	; 0x11c
   b4930:	e9c0 550d 	strd	r5, r5, [r0, #52]	; 0x34
      _M_header._M_left = &_M_header;
   b4934:	e9c0 5348 	strd	r5, r3, [r0, #288]	; 0x120
      _M_node_count = 0;
   b4938:	e9c0 354a 	strd	r3, r5, [r0, #296]	; 0x128
   b493c:	6045      	str	r5, [r0, #4]
   b493e:	6006      	str	r6, [r0, #0]
   b4940:	6081      	str	r1, [r0, #8]
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   b4942:	f8a0 50d0 	strh.w	r5, [r0, #208]	; 0xd0
   b4946:	f8a0 50f4 	strh.w	r5, [r0, #244]	; 0xf4
      _M_header._M_color = _S_red;
   b494a:	f880 511c 	strb.w	r5, [r0, #284]	; 0x11c
   b494e:	f8c0 5130 	str.w	r5, [r0, #304]	; 0x130
}
   b4952:	bd70      	pop	{r4, r5, r6, pc}
   b4954:	000b9be0 	.word	0x000b9be0
   b4958:	000f4240 	.word	0x000f4240
   b495c:	000b9c14 	.word	0x000b9c14
   b4960:	000b9cb0 	.word	0x000b9cb0

000b4964 <_ZN18SdCardPrintHandler7getNameEi>:
const char *SdCardPrintHandler::getName(int num) {
   b4964:	b510      	push	{r4, lr}
	snprintf(nameBuf, sizeof(nameBuf), "%06u.txt", num);
   b4966:	f100 04bc 	add.w	r4, r0, #188	; 0xbc
const char *SdCardPrintHandler::getName(int num) {
   b496a:	460b      	mov	r3, r1
	snprintf(nameBuf, sizeof(nameBuf), "%06u.txt", num);
   b496c:	4a03      	ldr	r2, [pc, #12]	; (b497c <_ZN18SdCardPrintHandler7getNameEi+0x18>)
   b496e:	210c      	movs	r1, #12
   b4970:	4620      	mov	r0, r4
   b4972:	f003 f8a3 	bl	b7abc <snprintf>
}
   b4976:	4620      	mov	r0, r4
   b4978:	bd10      	pop	{r4, pc}
   b497a:	bf00      	nop
   b497c:	000b9c19 	.word	0x000b9c19

000b4980 <_ZN18SdCardPrintHandler13checkMaxFilesEv>:
void SdCardPrintHandler::checkMaxFiles() {
   b4980:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		DEBUG_NORMAL(("removing old log file %s", name));
   b4984:	f8df 9060 	ldr.w	r9, [pc, #96]	; b49e8 <_ZN18SdCardPrintHandler13checkMaxFilesEv+0x68>
      { return const_iterator(this->_M_impl._M_header._M_left); }
   b4988:	f8d0 5124 	ldr.w	r5, [r0, #292]	; 0x124
void SdCardPrintHandler::checkMaxFiles() {
   b498c:	4604      	mov	r4, r0
		FatFile::remove(&logsDir, name);
   b498e:	f100 08d0 	add.w	r8, r0, #208	; 0xd0
    _M_erase_aux(const_iterator __position)
    {
      _Link_type __y =
	static_cast<_Link_type>(_Rb_tree_rebalance_for_erase
				(const_cast<_Base_ptr>(__position._M_node),
				 this->_M_impl._M_header));
   b4992:	f500 778e 	add.w	r7, r0, #284	; 0x11c
	while(fileNums.size() > maxFilesToKeep) {
   b4996:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   b4998:	f8d4 312c 	ldr.w	r3, [r4, #300]	; 0x12c
   b499c:	429a      	cmp	r2, r3
   b499e:	d220      	bcs.n	b49e2 <_ZN18SdCardPrintHandler13checkMaxFilesEv+0x62>
		const char *name = getName(*it);
   b49a0:	6929      	ldr	r1, [r5, #16]
   b49a2:	4620      	mov	r0, r4
   b49a4:	f7ff ffde 	bl	b4964 <_ZN18SdCardPrintHandler7getNameEi>
   b49a8:	4606      	mov	r6, r0
		DEBUG_NORMAL(("removing old log file %s", name));
   b49aa:	f003 fd8f 	bl	b84cc <_Z16_fetch_usbserialv>
   b49ae:	4632      	mov	r2, r6
   b49b0:	4649      	mov	r1, r9
   b49b2:	f7ff ff52 	bl	b485a <_ZN5Print8printlnfEPKcz>
		FatFile::remove(&logsDir, name);
   b49b6:	4631      	mov	r1, r6
   b49b8:	4640      	mov	r0, r8
   b49ba:	f001 fb6c 	bl	b6096 <_ZN7FatFile6removeEPS_PKc>
	_M_node = _Rb_tree_increment(_M_node);
   b49be:	4628      	mov	r0, r5
   b49c0:	f004 f8b4 	bl	b8b2c <_ZSt18_Rb_tree_incrementPKSt18_Rb_tree_node_base>
				(const_cast<_Base_ptr>(__position._M_node),
   b49c4:	4639      	mov	r1, r7
	_M_node = _Rb_tree_increment(_M_node);
   b49c6:	4606      	mov	r6, r0
				(const_cast<_Base_ptr>(__position._M_node),
   b49c8:	4628      	mov	r0, r5
   b49ca:	f004 f90e 	bl	b8bea <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_>
   b49ce:	2114      	movs	r1, #20
   b49d0:	f7ff fb65 	bl	b409e <_ZdlPvj>
      _M_drop_node(__y);
      --_M_impl._M_node_count;
   b49d4:	f8d4 312c 	ldr.w	r3, [r4, #300]	; 0x12c
   b49d8:	3b01      	subs	r3, #1
   b49da:	f8c4 312c 	str.w	r3, [r4, #300]	; 0x12c
		it = fileNums.erase(it);
   b49de:	4635      	mov	r5, r6
	while(fileNums.size() > maxFilesToKeep) {
   b49e0:	e7d9      	b.n	b4996 <_ZN18SdCardPrintHandler13checkMaxFilesEv+0x16>
}
   b49e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b49e6:	bf00      	nop
   b49e8:	000b9c22 	.word	0x000b9c22

000b49ec <_ZNSt3setIiSt4lessIiESaIiEE6insertERKi>:
       *  not already present in the %set.
       *
       *  Insertion requires logarithmic time.
       */
      std::pair<iterator, bool>
      insert(const value_type& __x)
   b49ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b49f0:	4617      	mov	r7, r2
      { return &this->_M_impl._M_header; }
   b49f2:	f101 0a04 	add.w	sl, r1, #4
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
   b49f6:	688a      	ldr	r2, [r1, #8]
   b49f8:	4680      	mov	r8, r0
   b49fa:	460e      	mov	r6, r1
      { return &this->_M_impl._M_header; }
   b49fc:	4655      	mov	r5, sl
      bool __comp = true;
   b49fe:	2301      	movs	r3, #1
      while (__x != 0)
   b4a00:	b15a      	cbz	r2, b4a1a <_ZNSt3setIiSt4lessIiESaIiEE6insertERKi+0x2e>
	  __x = __comp ? _S_left(__x) : _S_right(__x);
   b4a02:	6913      	ldr	r3, [r2, #16]
   b4a04:	6838      	ldr	r0, [r7, #0]
      { return static_cast<_Link_type>(__x->_M_right); }
   b4a06:	e9d2 4102 	ldrd	r4, r1, [r2, #8]
   b4a0a:	4298      	cmp	r0, r3
	  __x = __comp ? _S_left(__x) : _S_right(__x);
   b4a0c:	4615      	mov	r5, r2
   b4a0e:	bfb5      	itete	lt
   b4a10:	2301      	movlt	r3, #1
   b4a12:	2300      	movge	r3, #0
   b4a14:	4622      	movlt	r2, r4
   b4a16:	460a      	movge	r2, r1
   b4a18:	e7f2      	b.n	b4a00 <_ZNSt3setIiSt4lessIiESaIiEE6insertERKi+0x14>
      if (__comp)
   b4a1a:	b193      	cbz	r3, b4a42 <_ZNSt3setIiSt4lessIiESaIiEE6insertERKi+0x56>
	  if (__j == begin())
   b4a1c:	68f3      	ldr	r3, [r6, #12]
   b4a1e:	42ab      	cmp	r3, r5
   b4a20:	d02a      	beq.n	b4a78 <_ZNSt3setIiSt4lessIiESaIiEE6insertERKi+0x8c>
	_M_node = _Rb_tree_decrement(_M_node);
   b4a22:	4628      	mov	r0, r5
   b4a24:	f004 f884 	bl	b8b30 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
   b4a28:	4604      	mov	r4, r0
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
   b4a2a:	6922      	ldr	r2, [r4, #16]
   b4a2c:	683b      	ldr	r3, [r7, #0]
   b4a2e:	429a      	cmp	r2, r3
   b4a30:	db22      	blt.n	b4a78 <_ZNSt3setIiSt4lessIiESaIiEE6insertERKi+0x8c>
			   _MoveConstructiblePair<_U1, _U2>()
			  && _PCCP::template
			   _ImplicitlyMoveConvertiblePair<_U1, _U2>(),
                         bool>::type=true>
	constexpr pair(_U1&& __x, _U2&& __y)
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
   b4a32:	2300      	movs	r3, #0
      : _M_node(__it._M_node) { }
   b4a34:	f8c8 4000 	str.w	r4, [r8]
   b4a38:	f888 3004 	strb.w	r3, [r8, #4]
      {
	std::pair<typename _Rep_type::iterator, bool> __p =
	  _M_t._M_insert_unique(__x);
	return std::pair<iterator, bool>(__p.first, __p.second);
      }
   b4a3c:	4640      	mov	r0, r8
   b4a3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b4a42:	462c      	mov	r4, r5
   b4a44:	e7f1      	b.n	b4a2a <_ZNSt3setIiSt4lessIiESaIiEE6insertERKi+0x3e>
			      || _M_impl._M_key_compare(_KeyOfValue()(__v),
   b4a46:	683a      	ldr	r2, [r7, #0]
   b4a48:	692b      	ldr	r3, [r5, #16]
   b4a4a:	429a      	cmp	r2, r3
   b4a4c:	bfac      	ite	ge
   b4a4e:	f04f 0900 	movge.w	r9, #0
   b4a52:	f04f 0901 	movlt.w	r9, #1
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b4a56:	2014      	movs	r0, #20
   b4a58:	f7ff fb1d 	bl	b4096 <_Znwj>
#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b4a5c:	683b      	ldr	r3, [r7, #0]
   b4a5e:	6103      	str	r3, [r0, #16]
	_Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
   b4a60:	4601      	mov	r1, r0
   b4a62:	4653      	mov	r3, sl
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b4a64:	4604      	mov	r4, r0
   b4a66:	462a      	mov	r2, r5
   b4a68:	4648      	mov	r0, r9
   b4a6a:	f004 f863 	bl	b8b34 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>
	++_M_impl._M_node_count;
   b4a6e:	6973      	ldr	r3, [r6, #20]
   b4a70:	3301      	adds	r3, #1
   b4a72:	6173      	str	r3, [r6, #20]
   b4a74:	2301      	movs	r3, #1
   b4a76:	e7dd      	b.n	b4a34 <_ZNSt3setIiSt4lessIiESaIiEE6insertERKi+0x48>
	bool __insert_left = (__x != 0 || __p == _M_end()
   b4a78:	45aa      	cmp	sl, r5
   b4a7a:	d1e4      	bne.n	b4a46 <_ZNSt3setIiSt4lessIiESaIiEE6insertERKi+0x5a>
			      || _M_impl._M_key_compare(_KeyOfValue()(__v),
   b4a7c:	f04f 0901 	mov.w	r9, #1
   b4a80:	e7e9      	b.n	b4a56 <_ZNSt3setIiSt4lessIiESaIiEE6insertERKi+0x6a>

000b4a82 <_ZN18SdCardPrintHandler11openLogFileEv>:
bool SdCardPrintHandler::openLogFile() {
   b4a82:	b537      	push	{r0, r1, r2, r4, r5, lr}
	const char *name = getName(lastFileNum);
   b4a84:	f8d0 10cc 	ldr.w	r1, [r0, #204]	; 0xcc
bool SdCardPrintHandler::openLogFile() {
   b4a88:	4604      	mov	r4, r0
	const char *name = getName(lastFileNum);
   b4a8a:	f7ff ff6b 	bl	b4964 <_ZN18SdCardPrintHandler7getNameEi>
	if (curLogFile.open(&logsDir, name, O_RDWR | O_APPEND | O_CREAT)) {
   b4a8e:	f240 230a 	movw	r3, #522	; 0x20a
	const char *name = getName(lastFileNum);
   b4a92:	4602      	mov	r2, r0
	if (curLogFile.open(&logsDir, name, O_RDWR | O_APPEND | O_CREAT)) {
   b4a94:	f104 01d0 	add.w	r1, r4, #208	; 0xd0
   b4a98:	f104 00f4 	add.w	r0, r4, #244	; 0xf4
   b4a9c:	f001 faaf 	bl	b5ffe <_ZN7FatFile4openEPS_PKci>
   b4aa0:	4605      	mov	r5, r0
   b4aa2:	b130      	cbz	r0, b4ab2 <_ZN18SdCardPrintHandler11openLogFileEv+0x30>
		fileNums.insert(lastFileNum);
   b4aa4:	f104 02cc 	add.w	r2, r4, #204	; 0xcc
   b4aa8:	f504 718c 	add.w	r1, r4, #280	; 0x118
   b4aac:	4668      	mov	r0, sp
   b4aae:	f7ff ff9d 	bl	b49ec <_ZNSt3setIiSt4lessIiESaIiEE6insertERKi>
}
   b4ab2:	4628      	mov	r0, r5
   b4ab4:	b003      	add	sp, #12
   b4ab6:	bd30      	pop	{r4, r5, pc}

000b4ab8 <_ZN18SdCardPrintHandler8scanCardEv>:
void SdCardPrintHandler::scanCard() {
   b4ab8:	b530      	push	{r4, r5, lr}
	needsScanCard = false;
   b4aba:	2300      	movs	r3, #0
   b4abc:	f880 30c8 	strb.w	r3, [r0, #200]	; 0xc8
	if (!lastBeginResult) {
   b4ac0:	f890 30c9 	ldrb.w	r3, [r0, #201]	; 0xc9
void SdCardPrintHandler::scanCard() {
   b4ac4:	b09d      	sub	sp, #116	; 0x74
   b4ac6:	4604      	mov	r4, r0
	if (!lastBeginResult) {
   b4ac8:	bb03      	cbnz	r3, b4b0c <_ZN18SdCardPrintHandler8scanCardEv+0x54>
    m_dateTime = dateTime;
   b4aca:	4b42      	ldr	r3, [pc, #264]	; (b4bd4 <_ZN18SdCardPrintHandler8scanCardEv+0x11c>)
   b4acc:	4a42      	ldr	r2, [pc, #264]	; (b4bd8 <_ZN18SdCardPrintHandler8scanCardEv+0x120>)
		pinMode(csPin, OUTPUT);
   b4ace:	7b00      	ldrb	r0, [r0, #12]
   b4ad0:	601a      	str	r2, [r3, #0]
   b4ad2:	2101      	movs	r1, #1
   b4ad4:	f003 ff2a 	bl	b892c <pinMode>
   b4ad8:	4b40      	ldr	r3, [pc, #256]	; (b4bdc <_ZN18SdCardPrintHandler8scanCardEv+0x124>)
   b4ada:	930c      	str	r3, [sp, #48]	; 0x30
   b4adc:	7d23      	ldrb	r3, [r4, #20]
   b4ade:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
   b4ae2:	69a3      	ldr	r3, [r4, #24]
   b4ae4:	930e      	str	r3, [sp, #56]	; 0x38
		lastBeginResult = sd.begin(csPin, spiSettings);
   b4ae6:	7b21      	ldrb	r1, [r4, #12]
   b4ae8:	8ba3      	ldrh	r3, [r4, #28]
   b4aea:	68a0      	ldr	r0, [r4, #8]
   b4aec:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
   b4af0:	aa0c      	add	r2, sp, #48	; 0x30
   b4af2:	f7ff fec1 	bl	b4878 <_ZN5SdFat5beginEhN8particle11SPISettingsE>
   b4af6:	f884 00c9 	strb.w	r0, [r4, #201]	; 0xc9
		if (!lastBeginResult) {
   b4afa:	b938      	cbnz	r0, b4b0c <_ZN18SdCardPrintHandler8scanCardEv+0x54>
		needsScanCard = true;
   b4afc:	2301      	movs	r3, #1
   b4afe:	f884 30c8 	strb.w	r3, [r4, #200]	; 0xc8

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b4b02:	f002 fdbf 	bl	b7684 <HAL_Timer_Get_Milli_Seconds>
		lastCardCheck = millis();
   b4b06:	f8c4 0130 	str.w	r0, [r4, #304]	; 0x130
   b4b0a:	e05a      	b.n	b4bc2 <_ZN18SdCardPrintHandler8scanCardEv+0x10a>
	if (logsDirName != NULL && !sd.exists(logsDirName)) {
   b4b0c:	6a22      	ldr	r2, [r4, #32]
   b4b0e:	b1f2      	cbz	r2, b4b4e <_ZN18SdCardPrintHandler8scanCardEv+0x96>
   b4b10:	68a1      	ldr	r1, [r4, #8]
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   b4b12:	2300      	movs	r3, #0
    return file.open(this, path, O_RDONLY);
   b4b14:	f201 413c 	addw	r1, r1, #1084	; 0x43c
   b4b18:	a80c      	add	r0, sp, #48	; 0x30
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   b4b1a:	930c      	str	r3, [sp, #48]	; 0x30
    return file.open(this, path, O_RDONLY);
   b4b1c:	f001 fa6f 	bl	b5ffe <_ZN7FatFile4openEPS_PKci>
   b4b20:	4605      	mov	r5, r0
   b4b22:	b9a0      	cbnz	r0, b4b4e <_ZN18SdCardPrintHandler8scanCardEv+0x96>
		DEBUG_NORMAL(("creating logs dir %s", logsDirName));
   b4b24:	f003 fcd2 	bl	b84cc <_Z16_fetch_usbserialv>
   b4b28:	6a22      	ldr	r2, [r4, #32]
   b4b2a:	492d      	ldr	r1, [pc, #180]	; (b4be0 <_ZN18SdCardPrintHandler8scanCardEv+0x128>)
   b4b2c:	f7ff fe95 	bl	b485a <_ZN5Print8printlnfEPKcz>
		if (!sd.mkdir(logsDirName)) {
   b4b30:	68a1      	ldr	r1, [r4, #8]
    return sub.mkdir(vwd(), path, pFlag);
   b4b32:	6a22      	ldr	r2, [r4, #32]
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   b4b34:	950c      	str	r5, [sp, #48]	; 0x30
   b4b36:	2301      	movs	r3, #1
   b4b38:	f201 413c 	addw	r1, r1, #1084	; 0x43c
   b4b3c:	a80c      	add	r0, sp, #48	; 0x30
   b4b3e:	f001 fb32 	bl	b61a6 <_ZN7FatFile5mkdirEPS_PKcb>
   b4b42:	b920      	cbnz	r0, b4b4e <_ZN18SdCardPrintHandler8scanCardEv+0x96>
			DEBUG_NORMAL(("mkdir failed"));
   b4b44:	f003 fcc2 	bl	b84cc <_Z16_fetch_usbserialv>
   b4b48:	4926      	ldr	r1, [pc, #152]	; (b4be4 <_ZN18SdCardPrintHandler8scanCardEv+0x12c>)
   b4b4a:	f7ff fe86 	bl	b485a <_ZN5Print8printlnfEPKcz>
    return &m_vwd;
   b4b4e:	68a1      	ldr	r1, [r4, #8]
	if (logsDir.open(sd.vwd(), logsDirName, O_READ)) {
   b4b50:	6a22      	ldr	r2, [r4, #32]
   b4b52:	f104 05d0 	add.w	r5, r4, #208	; 0xd0
   b4b56:	2300      	movs	r3, #0
   b4b58:	f201 413c 	addw	r1, r1, #1084	; 0x43c
   b4b5c:	4628      	mov	r0, r5
   b4b5e:	f001 fa4e 	bl	b5ffe <_ZN7FatFile4openEPS_PKci>
   b4b62:	b380      	cbz	r0, b4bc6 <_ZN18SdCardPrintHandler8scanCardEv+0x10e>
    seekSet(0);
   b4b64:	2100      	movs	r1, #0
   b4b66:	4628      	mov	r0, r5
   b4b68:	f001 f922 	bl	b5db0 <_ZN7FatFile7seekSetEm>
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   b4b6c:	2300      	movs	r3, #0
   b4b6e:	9303      	str	r3, [sp, #12]
		while (tempFile.openNext(&logsDir, O_READ)) {
   b4b70:	2200      	movs	r2, #0
   b4b72:	4629      	mov	r1, r5
   b4b74:	a803      	add	r0, sp, #12
   b4b76:	f001 f9c8 	bl	b5f0a <_ZN7FatFile8openNextEPS_i>
   b4b7a:	b1d0      	cbz	r0, b4bb2 <_ZN18SdCardPrintHandler8scanCardEv+0xfa>
			tempFile.getName(name, sizeof(name));
   b4b7c:	2240      	movs	r2, #64	; 0x40
   b4b7e:	a90c      	add	r1, sp, #48	; 0x30
   b4b80:	a803      	add	r0, sp, #12
   b4b82:	f000 fbc4 	bl	b530e <_ZN7FatFile7getNameEPcj>
			int num = atoi(name);
   b4b86:	a80c      	add	r0, sp, #48	; 0x30
   b4b88:	f004 fe1e 	bl	b97c8 <atoi>
   b4b8c:	9000      	str	r0, [sp, #0]
			if (num != 0) {
   b4b8e:	b160      	cbz	r0, b4baa <_ZN18SdCardPrintHandler8scanCardEv+0xf2>
				fileNums.insert(num);
   b4b90:	466a      	mov	r2, sp
   b4b92:	f504 718c 	add.w	r1, r4, #280	; 0x118
   b4b96:	a801      	add	r0, sp, #4
   b4b98:	f7ff ff28 	bl	b49ec <_ZNSt3setIiSt4lessIiESaIiEE6insertERKi>
				if (num > lastFileNum) {
   b4b9c:	9b00      	ldr	r3, [sp, #0]
   b4b9e:	f8d4 20cc 	ldr.w	r2, [r4, #204]	; 0xcc
   b4ba2:	429a      	cmp	r2, r3
					lastFileNum = num;
   b4ba4:	bfb8      	it	lt
   b4ba6:	f8c4 30cc 	strlt.w	r3, [r4, #204]	; 0xcc
			tempFile.close();
   b4baa:	a803      	add	r0, sp, #12
   b4bac:	f001 fa20 	bl	b5ff0 <_ZN7FatFile5closeEv>
		while (tempFile.openNext(&logsDir, O_READ)) {
   b4bb0:	e7de      	b.n	b4b70 <_ZN18SdCardPrintHandler8scanCardEv+0xb8>
		checkMaxFiles();
   b4bb2:	4620      	mov	r0, r4
   b4bb4:	f7ff fee4 	bl	b4980 <_ZN18SdCardPrintHandler13checkMaxFilesEv>
		if (!openLogFile()) {
   b4bb8:	4620      	mov	r0, r4
   b4bba:	f7ff ff62 	bl	b4a82 <_ZN18SdCardPrintHandler11openLogFileEv>
   b4bbe:	2800      	cmp	r0, #0
   b4bc0:	d09c      	beq.n	b4afc <_ZN18SdCardPrintHandler8scanCardEv+0x44>
}
   b4bc2:	b01d      	add	sp, #116	; 0x74
   b4bc4:	bd30      	pop	{r4, r5, pc}
		DEBUG_NORMAL(("failed to open logs dir"));
   b4bc6:	f003 fc81 	bl	b84cc <_Z16_fetch_usbserialv>
   b4bca:	4907      	ldr	r1, [pc, #28]	; (b4be8 <_ZN18SdCardPrintHandler8scanCardEv+0x130>)
   b4bcc:	f7ff fe45 	bl	b485a <_ZN5Print8printlnfEPKcz>
   b4bd0:	e794      	b.n	b4afc <_ZN18SdCardPrintHandler8scanCardEv+0x44>
   b4bd2:	bf00      	nop
   b4bd4:	2003e678 	.word	0x2003e678
   b4bd8:	000b47bd 	.word	0x000b47bd
   b4bdc:	000b9be0 	.word	0x000b9be0
   b4be0:	000b9c3b 	.word	0x000b9c3b
   b4be4:	000b9c50 	.word	0x000b9c50
   b4be8:	000b9c5d 	.word	0x000b9c5d

000b4bec <_ZN18SdCardPrintHandler8writeBufEv>:
void SdCardPrintHandler::writeBuf() {
   b4bec:	b538      	push	{r3, r4, r5, lr}
   b4bee:	4604      	mov	r4, r0
	if (writeToStream) {
   b4bf0:	6b40      	ldr	r0, [r0, #52]	; 0x34
   b4bf2:	b128      	cbz	r0, b4c00 <_ZN18SdCardPrintHandler8writeBufEv+0x14>
		writeToStream->write(buf, bufOffset);
   b4bf4:	6803      	ldr	r3, [r0, #0]
   b4bf6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   b4bf8:	68db      	ldr	r3, [r3, #12]
   b4bfa:	f104 013c 	add.w	r1, r4, #60	; 0x3c
   b4bfe:	4798      	blx	r3
	if (needsScanCard) {
   b4c00:	f894 30c8 	ldrb.w	r3, [r4, #200]	; 0xc8
   b4c04:	b12b      	cbz	r3, b4c12 <_ZN18SdCardPrintHandler8writeBufEv+0x26>
		if (lastCardCheck == 0 || millis() - lastCardCheck >= cardCheckPeriod) {
   b4c06:	f8d4 3130 	ldr.w	r3, [r4, #304]	; 0x130
   b4c0a:	bbab      	cbnz	r3, b4c78 <_ZN18SdCardPrintHandler8writeBufEv+0x8c>
			scanCard();
   b4c0c:	4620      	mov	r0, r4
   b4c0e:	f7ff ff53 	bl	b4ab8 <_ZN18SdCardPrintHandler8scanCardEv>
	if (lastBeginResult) {
   b4c12:	f894 30c9 	ldrb.w	r3, [r4, #201]	; 0xc9
   b4c16:	b363      	cbz	r3, b4c72 <_ZN18SdCardPrintHandler8writeBufEv+0x86>
		if (curLogFile.isOpen()) {
   b4c18:	f894 30f4 	ldrb.w	r3, [r4, #244]	; 0xf4
   b4c1c:	b34b      	cbz	r3, b4c72 <_ZN18SdCardPrintHandler8writeBufEv+0x86>
			if (curLogFile.write(buf, bufOffset) > 0) {
   b4c1e:	f104 05f4 	add.w	r5, r4, #244	; 0xf4
   b4c22:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   b4c24:	f104 013c 	add.w	r1, r4, #60	; 0x3c
   b4c28:	4628      	mov	r0, r5
   b4c2a:	f001 fb0b 	bl	b6244 <_ZN7FatFile5writeEPKvj>
   b4c2e:	2800      	cmp	r0, #0
   b4c30:	dd2b      	ble.n	b4c8a <_ZN18SdCardPrintHandler8writeBufEv+0x9e>
				if (syncEveryEntry) {
   b4c32:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
   b4c36:	b113      	cbz	r3, b4c3e <_ZN18SdCardPrintHandler8writeBufEv+0x52>
					curLogFile.sync();
   b4c38:	4628      	mov	r0, r5
   b4c3a:	f001 f9a3 	bl	b5f84 <_ZN7FatFile4syncEv>
				if (curLogFile.fileSize() > desiredFileSize) {
   b4c3e:	6a62      	ldr	r2, [r4, #36]	; 0x24
   b4c40:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
   b4c44:	429a      	cmp	r2, r3
   b4c46:	d214      	bcs.n	b4c72 <_ZN18SdCardPrintHandler8writeBufEv+0x86>
					curLogFile.close();
   b4c48:	4628      	mov	r0, r5
   b4c4a:	f001 f9d1 	bl	b5ff0 <_ZN7FatFile5closeEv>
					lastFileNum++;
   b4c4e:	f8d4 30cc 	ldr.w	r3, [r4, #204]	; 0xcc
   b4c52:	3301      	adds	r3, #1
   b4c54:	f8c4 30cc 	str.w	r3, [r4, #204]	; 0xcc
					DEBUG_NORMAL(("creating new log file %04d", lastFileNum));
   b4c58:	f003 fc38 	bl	b84cc <_Z16_fetch_usbserialv>
   b4c5c:	f8d4 20cc 	ldr.w	r2, [r4, #204]	; 0xcc
   b4c60:	4913      	ldr	r1, [pc, #76]	; (b4cb0 <_ZN18SdCardPrintHandler8writeBufEv+0xc4>)
   b4c62:	f7ff fdfa 	bl	b485a <_ZN5Print8printlnfEPKcz>
					openLogFile();
   b4c66:	4620      	mov	r0, r4
   b4c68:	f7ff ff0b 	bl	b4a82 <_ZN18SdCardPrintHandler11openLogFileEv>
					checkMaxFiles();
   b4c6c:	4620      	mov	r0, r4
   b4c6e:	f7ff fe87 	bl	b4980 <_ZN18SdCardPrintHandler13checkMaxFilesEv>
	bufOffset = 0;
   b4c72:	2300      	movs	r3, #0
   b4c74:	63a3      	str	r3, [r4, #56]	; 0x38
}
   b4c76:	bd38      	pop	{r3, r4, r5, pc}
   b4c78:	f002 fd04 	bl	b7684 <HAL_Timer_Get_Milli_Seconds>
		if (lastCardCheck == 0 || millis() - lastCardCheck >= cardCheckPeriod) {
   b4c7c:	f8d4 3130 	ldr.w	r3, [r4, #304]	; 0x130
   b4c80:	1ac0      	subs	r0, r0, r3
   b4c82:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   b4c84:	4298      	cmp	r0, r3
   b4c86:	d2c1      	bcs.n	b4c0c <_ZN18SdCardPrintHandler8writeBufEv+0x20>
   b4c88:	e7c3      	b.n	b4c12 <_ZN18SdCardPrintHandler8writeBufEv+0x26>
				DEBUG_NORMAL(("write to sd card failed"));
   b4c8a:	f003 fc1f 	bl	b84cc <_Z16_fetch_usbserialv>
   b4c8e:	4909      	ldr	r1, [pc, #36]	; (b4cb4 <_ZN18SdCardPrintHandler8writeBufEv+0xc8>)
   b4c90:	f7ff fde3 	bl	b485a <_ZN5Print8printlnfEPKcz>
				curLogFile.close();
   b4c94:	4628      	mov	r0, r5
   b4c96:	f001 f9ab 	bl	b5ff0 <_ZN7FatFile5closeEv>
				logsDir.close();
   b4c9a:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
   b4c9e:	f001 f9a7 	bl	b5ff0 <_ZN7FatFile5closeEv>
				needsScanCard = true;
   b4ca2:	2301      	movs	r3, #1
   b4ca4:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
				lastCardCheck = 0;
   b4ca8:	2300      	movs	r3, #0
   b4caa:	f8c4 3130 	str.w	r3, [r4, #304]	; 0x130
   b4cae:	e7e0      	b.n	b4c72 <_ZN18SdCardPrintHandler8writeBufEv+0x86>
   b4cb0:	000b9c75 	.word	0x000b9c75
   b4cb4:	000b9c90 	.word	0x000b9c90

000b4cb8 <_ZN18SdCardPrintHandler5writeEh>:
size_t SdCardPrintHandler::write(uint8_t c) {
   b4cb8:	b508      	push	{r3, lr}
	buf[bufOffset++] = c;
   b4cba:	6b83      	ldr	r3, [r0, #56]	; 0x38
   b4cbc:	1c5a      	adds	r2, r3, #1
   b4cbe:	4403      	add	r3, r0
	if (bufOffset >= BUF_SIZE || c == '\n') {
   b4cc0:	2a7f      	cmp	r2, #127	; 0x7f
	buf[bufOffset++] = c;
   b4cc2:	6382      	str	r2, [r0, #56]	; 0x38
   b4cc4:	f883 103c 	strb.w	r1, [r3, #60]	; 0x3c
	if (bufOffset >= BUF_SIZE || c == '\n') {
   b4cc8:	d801      	bhi.n	b4cce <_ZN18SdCardPrintHandler5writeEh+0x16>
   b4cca:	290a      	cmp	r1, #10
   b4ccc:	d101      	bne.n	b4cd2 <_ZN18SdCardPrintHandler5writeEh+0x1a>
		writeBuf();
   b4cce:	f7ff ff8d 	bl	b4bec <_ZN18SdCardPrintHandler8writeBufEv>
}
   b4cd2:	2001      	movs	r0, #1
   b4cd4:	bd08      	pop	{r3, pc}

000b4cd6 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>:
 *    @param  byteorder The byte order of the register (used when width is > 1),
 * defaults to LSBFIRST
 *    @param  address_width The width of the register address itself, defaults
 * to 1 byte
 */
Adafruit_BusIO_Register::Adafruit_BusIO_Register(Adafruit_I2CDevice *i2cdevice,
   b4cd6:	b530      	push	{r4, r5, lr}
                                                 uint16_t reg_addr,
                                                 uint8_t width,
                                                 uint8_t byteorder,
                                                 uint8_t address_width) {
   b4cd8:	2500      	movs	r5, #0
  _i2cdevice = i2cdevice;
  _spidevice = nullptr;
   b4cda:	e9c0 1500 	strd	r1, r5, [r0]
  _addrwidth = address_width;
  _address = reg_addr;
   b4cde:	8142      	strh	r2, [r0, #10]
  _addrwidth = address_width;
   b4ce0:	f89d 1010 	ldrb.w	r1, [sp, #16]
  _byteorder = byteorder;
   b4ce4:	f89d 200c 	ldrb.w	r2, [sp, #12]
                                                 uint8_t address_width) {
   b4ce8:	6145      	str	r5, [r0, #20]
  _addrwidth = address_width;
   b4cea:	7341      	strb	r1, [r0, #13]
  _byteorder = byteorder;
   b4cec:	7382      	strb	r2, [r0, #14]
  _width = width;
   b4cee:	7303      	strb	r3, [r0, #12]
}
   b4cf0:	bd30      	pop	{r4, r5, pc}

000b4cf2 <_ZN23Adafruit_BusIO_Register5writeEPhh>:
 *    @param  buffer Pointer to data to write
 *    @param  len Number of bytes to write
 *    @return True on successful write (only really useful for I2C as SPI is
 * uncheckable)
 */
bool Adafruit_BusIO_Register::write(uint8_t *buffer, uint8_t len) {
   b4cf2:	b5f0      	push	{r4, r5, r6, r7, lr}

  uint8_t addrbuffer[2] = {(uint8_t)(_address & 0xFF),
   b4cf4:	8945      	ldrh	r5, [r0, #10]
                           (uint8_t)(_address >> 8)};
   b4cf6:	7a84      	ldrb	r4, [r0, #10]
bool Adafruit_BusIO_Register::write(uint8_t *buffer, uint8_t len) {
   b4cf8:	b085      	sub	sp, #20
   b4cfa:	4603      	mov	r3, r0

  if (_i2cdevice) {
   b4cfc:	6800      	ldr	r0, [r0, #0]
                           (uint8_t)(_address >> 8)};
   b4cfe:	f88d 400c 	strb.w	r4, [sp, #12]
   b4d02:	0a2d      	lsrs	r5, r5, #8
bool Adafruit_BusIO_Register::write(uint8_t *buffer, uint8_t len) {
   b4d04:	460e      	mov	r6, r1
   b4d06:	4617      	mov	r7, r2
                           (uint8_t)(_address >> 8)};
   b4d08:	f88d 500d 	strb.w	r5, [sp, #13]
  if (_i2cdevice) {
   b4d0c:	b140      	cbz	r0, b4d20 <_ZN23Adafruit_BusIO_Register5writeEPhh+0x2e>
    return _i2cdevice->write(buffer, len, true, addrbuffer, _addrwidth);
   b4d0e:	7b5b      	ldrb	r3, [r3, #13]
   b4d10:	9301      	str	r3, [sp, #4]
   b4d12:	ab03      	add	r3, sp, #12
   b4d14:	9300      	str	r3, [sp, #0]
   b4d16:	2301      	movs	r3, #1
   b4d18:	f000 fa2d 	bl	b5176 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>
      addrbuffer[0] |= 0x40;
    }
    return _spidevice->write(buffer, len, addrbuffer, _addrwidth);
  }
  return false;
}
   b4d1c:	b005      	add	sp, #20
   b4d1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (_spidevice) {
   b4d20:	6858      	ldr	r0, [r3, #4]
   b4d22:	2800      	cmp	r0, #0
   b4d24:	d0fa      	beq.n	b4d1c <_ZN23Adafruit_BusIO_Register5writeEPhh+0x2a>
    if (_spiregtype == ADDRESSED_OPCODE_BIT0_LOW_TO_WRITE) {
   b4d26:	f893 e008 	ldrb.w	lr, [r3, #8]
    return _i2cdevice->write(buffer, len, true, addrbuffer, _addrwidth);
   b4d2a:	f893 c00d 	ldrb.w	ip, [r3, #13]
    if (_spiregtype == ADDRESSED_OPCODE_BIT0_LOW_TO_WRITE) {
   b4d2e:	f1be 0f03 	cmp.w	lr, #3
   b4d32:	d10c      	bne.n	b4d4e <_ZN23Adafruit_BusIO_Register5writeEPhh+0x5c>
      return _spidevice->write(buffer, len, addrbuffer, _addrwidth + 1);
   b4d34:	f10c 0301 	add.w	r3, ip, #1
          (uint8_t)(_address >> 8) & ~0x01; // set bottom bit low to write
   b4d38:	f025 0501 	bic.w	r5, r5, #1
      return _spidevice->write(buffer, len, addrbuffer, _addrwidth + 1);
   b4d3c:	9300      	str	r3, [sp, #0]
      addrbuffer[0] =
   b4d3e:	f88d 500c 	strb.w	r5, [sp, #12]
      addrbuffer[1] = (uint8_t)(_address & 0xFF);
   b4d42:	f88d 400d 	strb.w	r4, [sp, #13]
      return _spidevice->write(buffer, len, addrbuffer, _addrwidth + 1);
   b4d46:	ab03      	add	r3, sp, #12
    return _spidevice->write(buffer, len, addrbuffer, _addrwidth);
   b4d48:	f000 f9a4 	bl	b5094 <_ZN18Adafruit_SPIDevice5writeEPKhjS1_j>
   b4d4c:	e7e6      	b.n	b4d1c <_ZN23Adafruit_BusIO_Register5writeEPhh+0x2a>
    if (_spiregtype == ADDRBIT8_HIGH_TOREAD) {
   b4d4e:	f1be 0f00 	cmp.w	lr, #0
   b4d52:	d109      	bne.n	b4d68 <_ZN23Adafruit_BusIO_Register5writeEPhh+0x76>
      addrbuffer[0] &= ~0x80;
   b4d54:	f004 047f 	and.w	r4, r4, #127	; 0x7f
      addrbuffer[0] |= 0x80;
   b4d58:	f88d 400c 	strb.w	r4, [sp, #12]
    return _spidevice->write(buffer, len, addrbuffer, _addrwidth);
   b4d5c:	f8cd c000 	str.w	ip, [sp]
   b4d60:	ab03      	add	r3, sp, #12
   b4d62:	463a      	mov	r2, r7
   b4d64:	4631      	mov	r1, r6
   b4d66:	e7ef      	b.n	b4d48 <_ZN23Adafruit_BusIO_Register5writeEPhh+0x56>
    if (_spiregtype == ADDRBIT8_HIGH_TOWRITE) {
   b4d68:	f1be 0f02 	cmp.w	lr, #2
   b4d6c:	d102      	bne.n	b4d74 <_ZN23Adafruit_BusIO_Register5writeEPhh+0x82>
      addrbuffer[0] |= 0x80;
   b4d6e:	f064 047f 	orn	r4, r4, #127	; 0x7f
   b4d72:	e7f1      	b.n	b4d58 <_ZN23Adafruit_BusIO_Register5writeEPhh+0x66>
    if (_spiregtype == AD8_HIGH_TOREAD_AD7_HIGH_TOINC) {
   b4d74:	f1be 0f01 	cmp.w	lr, #1
      addrbuffer[0] &= ~0x80;
   b4d78:	bf01      	itttt	eq
   b4d7a:	f89d 300c 	ldrbeq.w	r3, [sp, #12]
   b4d7e:	f003 037f 	andeq.w	r3, r3, #127	; 0x7f
      addrbuffer[0] |= 0x40;
   b4d82:	f043 0340 	orreq.w	r3, r3, #64	; 0x40
   b4d86:	f88d 300c 	strbeq.w	r3, [sp, #12]
   b4d8a:	e7e7      	b.n	b4d5c <_ZN23Adafruit_BusIO_Register5writeEPhh+0x6a>

000b4d8c <_ZN23Adafruit_BusIO_Register5writeEmh>:
 *    @param  value Data to write
 *    @param  numbytes How many bytes from 'value' to write
 *    @return True on successful write (only really useful for I2C as SPI is
 * uncheckable)
 */
bool Adafruit_BusIO_Register::write(uint32_t value, uint8_t numbytes) {
   b4d8c:	b4f0      	push	{r4, r5, r6, r7}
   b4d8e:	460b      	mov	r3, r1
  if (numbytes == 0) {
   b4d90:	b902      	cbnz	r2, b4d94 <_ZN23Adafruit_BusIO_Register5writeEmh+0x8>
    numbytes = _width;
   b4d92:	7b02      	ldrb	r2, [r0, #12]
  }
  if (numbytes > 4) {
   b4d94:	2a04      	cmp	r2, #4
   b4d96:	d814      	bhi.n	b4dc2 <_ZN23Adafruit_BusIO_Register5writeEmh+0x36>
    return false;
  }

  // store a copy
  _cached = value;
   b4d98:	f100 050f 	add.w	r5, r0, #15
   b4d9c:	6143      	str	r3, [r0, #20]

  for (int i = 0; i < numbytes; i++) {
   b4d9e:	1884      	adds	r4, r0, r2
   b4da0:	4629      	mov	r1, r5
   b4da2:	4284      	cmp	r4, r0
   b4da4:	d009      	beq.n	b4dba <_ZN23Adafruit_BusIO_Register5writeEmh+0x2e>
    if (_byteorder == LSBFIRST) {
   b4da6:	7b87      	ldrb	r7, [r0, #14]
      _buffer[i] = value & 0xFF;
   b4da8:	b2de      	uxtb	r6, r3
    if (_byteorder == LSBFIRST) {
   b4daa:	b927      	cbnz	r7, b4db6 <_ZN23Adafruit_BusIO_Register5writeEmh+0x2a>
      _buffer[i] = value & 0xFF;
   b4dac:	702e      	strb	r6, [r5, #0]
    } else {
      _buffer[numbytes - i - 1] = value & 0xFF;
    }
    value >>= 8;
   b4dae:	0a1b      	lsrs	r3, r3, #8
  for (int i = 0; i < numbytes; i++) {
   b4db0:	3501      	adds	r5, #1
   b4db2:	3c01      	subs	r4, #1
   b4db4:	e7f5      	b.n	b4da2 <_ZN23Adafruit_BusIO_Register5writeEmh+0x16>
      _buffer[numbytes - i - 1] = value & 0xFF;
   b4db6:	73a6      	strb	r6, [r4, #14]
   b4db8:	e7f9      	b.n	b4dae <_ZN23Adafruit_BusIO_Register5writeEmh+0x22>
  }
  return write(_buffer, numbytes);
   b4dba:	4620      	mov	r0, r4
}
   b4dbc:	bcf0      	pop	{r4, r5, r6, r7}
  return write(_buffer, numbytes);
   b4dbe:	f7ff bf98 	b.w	b4cf2 <_ZN23Adafruit_BusIO_Register5writeEPhh>
}
   b4dc2:	2000      	movs	r0, #0
   b4dc4:	bcf0      	pop	{r4, r5, r6, r7}
   b4dc6:	4770      	bx	lr

000b4dc8 <_ZN23Adafruit_BusIO_Register4readEPhh>:
 *    @param  buffer Pointer to data to read into
 *    @param  len Number of bytes to read
 *    @return True on successful write (only really useful for I2C as SPI is
 * uncheckable)
 */
bool Adafruit_BusIO_Register::read(uint8_t *buffer, uint8_t len) {
   b4dc8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  uint8_t addrbuffer[2] = {(uint8_t)(_address & 0xFF),
   b4dca:	8946      	ldrh	r6, [r0, #10]
                           (uint8_t)(_address >> 8)};
   b4dcc:	7a85      	ldrb	r5, [r0, #10]
   b4dce:	f88d 500c 	strb.w	r5, [sp, #12]
bool Adafruit_BusIO_Register::read(uint8_t *buffer, uint8_t len) {
   b4dd2:	4604      	mov	r4, r0

  if (_i2cdevice) {
   b4dd4:	6800      	ldr	r0, [r0, #0]
                           (uint8_t)(_address >> 8)};
   b4dd6:	0a36      	lsrs	r6, r6, #8
bool Adafruit_BusIO_Register::read(uint8_t *buffer, uint8_t len) {
   b4dd8:	460b      	mov	r3, r1
                           (uint8_t)(_address >> 8)};
   b4dda:	f88d 600d 	strb.w	r6, [sp, #13]
  if (_i2cdevice) {
   b4dde:	b140      	cbz	r0, b4df2 <_ZN23Adafruit_BusIO_Register4readEPhh+0x2a>
    return _i2cdevice->write_then_read(addrbuffer, _addrwidth, buffer, len);
   b4de0:	2100      	movs	r1, #0
   b4de2:	e9cd 2100 	strd	r2, r1, [sp]
   b4de6:	a903      	add	r1, sp, #12
   b4de8:	7b62      	ldrb	r2, [r4, #13]
   b4dea:	f000 fa32 	bl	b5252 <_ZN18Adafruit_I2CDevice15write_then_readEPKhjPhjb>
      addrbuffer[0] |= 0x80 | 0x40;
    }
    return _spidevice->write_then_read(addrbuffer, _addrwidth, buffer, len);
  }
  return false;
}
   b4dee:	b004      	add	sp, #16
   b4df0:	bd70      	pop	{r4, r5, r6, pc}
  if (_spidevice) {
   b4df2:	6860      	ldr	r0, [r4, #4]
   b4df4:	2800      	cmp	r0, #0
   b4df6:	d0fa      	beq.n	b4dee <_ZN23Adafruit_BusIO_Register4readEPhh+0x26>
    if (_spiregtype == ADDRESSED_OPCODE_BIT0_LOW_TO_WRITE) {
   b4df8:	7a21      	ldrb	r1, [r4, #8]
    return _i2cdevice->write_then_read(addrbuffer, _addrwidth, buffer, len);
   b4dfa:	7b64      	ldrb	r4, [r4, #13]
    if (_spiregtype == ADDRESSED_OPCODE_BIT0_LOW_TO_WRITE) {
   b4dfc:	2903      	cmp	r1, #3
   b4dfe:	d10d      	bne.n	b4e1c <_ZN23Adafruit_BusIO_Register4readEPhh+0x54>
          (uint8_t)(_address >> 8) | 0x01; // set bottom bit high to read
   b4e00:	f046 0601 	orr.w	r6, r6, #1
      return _spidevice->write_then_read(addrbuffer, _addrwidth + 1, buffer,
   b4e04:	21ff      	movs	r1, #255	; 0xff
   b4e06:	e9cd 2100 	strd	r2, r1, [sp]
      addrbuffer[0] =
   b4e0a:	f88d 600c 	strb.w	r6, [sp, #12]
      addrbuffer[1] = (uint8_t)(_address & 0xFF);
   b4e0e:	f88d 500d 	strb.w	r5, [sp, #13]
      return _spidevice->write_then_read(addrbuffer, _addrwidth + 1, buffer,
   b4e12:	1c62      	adds	r2, r4, #1
    return _spidevice->write_then_read(addrbuffer, _addrwidth, buffer, len);
   b4e14:	a903      	add	r1, sp, #12
   b4e16:	f000 f95f 	bl	b50d8 <_ZN18Adafruit_SPIDevice15write_then_readEPKhjPhjh>
   b4e1a:	e7e8      	b.n	b4dee <_ZN23Adafruit_BusIO_Register4readEPhh+0x26>
    if (_spiregtype == ADDRBIT8_HIGH_TOREAD) {
   b4e1c:	b941      	cbnz	r1, b4e30 <_ZN23Adafruit_BusIO_Register4readEPhh+0x68>
      addrbuffer[0] |= 0x80;
   b4e1e:	f065 057f 	orn	r5, r5, #127	; 0x7f
      addrbuffer[0] &= ~0x80;
   b4e22:	f88d 500c 	strb.w	r5, [sp, #12]
    return _spidevice->write_then_read(addrbuffer, _addrwidth, buffer, len);
   b4e26:	21ff      	movs	r1, #255	; 0xff
   b4e28:	e9cd 2100 	strd	r2, r1, [sp]
   b4e2c:	4622      	mov	r2, r4
   b4e2e:	e7f1      	b.n	b4e14 <_ZN23Adafruit_BusIO_Register4readEPhh+0x4c>
    if (_spiregtype == ADDRBIT8_HIGH_TOWRITE) {
   b4e30:	2902      	cmp	r1, #2
   b4e32:	d102      	bne.n	b4e3a <_ZN23Adafruit_BusIO_Register4readEPhh+0x72>
      addrbuffer[0] &= ~0x80;
   b4e34:	f005 057f 	and.w	r5, r5, #127	; 0x7f
   b4e38:	e7f3      	b.n	b4e22 <_ZN23Adafruit_BusIO_Register4readEPhh+0x5a>
    if (_spiregtype == AD8_HIGH_TOREAD_AD7_HIGH_TOINC) {
   b4e3a:	2901      	cmp	r1, #1
      addrbuffer[0] |= 0x80 | 0x40;
   b4e3c:	bf02      	ittt	eq
   b4e3e:	f89d 100c 	ldrbeq.w	r1, [sp, #12]
   b4e42:	f061 013f 	orneq	r1, r1, #63	; 0x3f
   b4e46:	f88d 100c 	strbeq.w	r1, [sp, #12]
   b4e4a:	e7ec      	b.n	b4e26 <_ZN23Adafruit_BusIO_Register4readEPhh+0x5e>

000b4e4c <_ZN23Adafruit_BusIO_Register4readEv>:
uint32_t Adafruit_BusIO_Register::read(void) {
   b4e4c:	b538      	push	{r3, r4, r5, lr}
  if (!read(_buffer, _width)) {
   b4e4e:	f100 050f 	add.w	r5, r0, #15
   b4e52:	7b02      	ldrb	r2, [r0, #12]
   b4e54:	4629      	mov	r1, r5
uint32_t Adafruit_BusIO_Register::read(void) {
   b4e56:	4604      	mov	r4, r0
  if (!read(_buffer, _width)) {
   b4e58:	f7ff ffb6 	bl	b4dc8 <_ZN23Adafruit_BusIO_Register4readEPhh>
   b4e5c:	b178      	cbz	r0, b4e7e <_ZN23Adafruit_BusIO_Register4readEv+0x32>
   b4e5e:	7b22      	ldrb	r2, [r4, #12]
   b4e60:	4629      	mov	r1, r5
   b4e62:	4422      	add	r2, r4
  uint32_t value = 0;
   b4e64:	2000      	movs	r0, #0
  for (int i = 0; i < _width; i++) {
   b4e66:	42a2      	cmp	r2, r4
   b4e68:	d00b      	beq.n	b4e82 <_ZN23Adafruit_BusIO_Register4readEv+0x36>
    value <<= 8;
   b4e6a:	0203      	lsls	r3, r0, #8
    if (_byteorder == LSBFIRST) {
   b4e6c:	7ba0      	ldrb	r0, [r4, #14]
   b4e6e:	b920      	cbnz	r0, b4e7a <_ZN23Adafruit_BusIO_Register4readEv+0x2e>
      value |= _buffer[_width - i - 1];
   b4e70:	7b90      	ldrb	r0, [r2, #14]
      value |= _buffer[i];
   b4e72:	4318      	orrs	r0, r3
  for (int i = 0; i < _width; i++) {
   b4e74:	3a01      	subs	r2, #1
   b4e76:	3101      	adds	r1, #1
   b4e78:	e7f5      	b.n	b4e66 <_ZN23Adafruit_BusIO_Register4readEv+0x1a>
      value |= _buffer[i];
   b4e7a:	7808      	ldrb	r0, [r1, #0]
   b4e7c:	e7f9      	b.n	b4e72 <_ZN23Adafruit_BusIO_Register4readEv+0x26>
    return -1;
   b4e7e:	f04f 30ff 	mov.w	r0, #4294967295
}
   b4e82:	bd38      	pop	{r3, r4, r5, pc}

000b4e84 <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>:
 * touching other bits
 *    @param  reg The Adafruit_BusIO_Register which defines the bus/register
 *    @param  bits The number of bits wide we are slicing
 *    @param  shift The number of bits that our bit-slice is shifted from LSB
 */
Adafruit_BusIO_RegisterBits::Adafruit_BusIO_RegisterBits(
   b4e84:	b510      	push	{r4, lr}
    Adafruit_BusIO_Register *reg, uint8_t bits, uint8_t shift) {
  _register = reg;
   b4e86:	6001      	str	r1, [r0, #0]
  _bits = bits;
   b4e88:	7102      	strb	r2, [r0, #4]
  _shift = shift;
   b4e8a:	7143      	strb	r3, [r0, #5]
}
   b4e8c:	bd10      	pop	{r4, pc}

000b4e8e <_ZN27Adafruit_BusIO_RegisterBits4readEv>:

/*!
 *    @brief  Read 4 bytes of data from the register
 *    @return  data The 4 bytes to read
 */
uint32_t Adafruit_BusIO_RegisterBits::read(void) {
   b4e8e:	b510      	push	{r4, lr}
   b4e90:	4604      	mov	r4, r0
  uint32_t val = _register->read();
   b4e92:	6800      	ldr	r0, [r0, #0]
   b4e94:	f7ff ffda 	bl	b4e4c <_ZN23Adafruit_BusIO_Register4readEv>
  val >>= _shift;
  return val & ((1 << (_bits)) - 1);
   b4e98:	7922      	ldrb	r2, [r4, #4]
   b4e9a:	2301      	movs	r3, #1
   b4e9c:	4093      	lsls	r3, r2
  val >>= _shift;
   b4e9e:	7962      	ldrb	r2, [r4, #5]
  return val & ((1 << (_bits)) - 1);
   b4ea0:	3b01      	subs	r3, #1
  val >>= _shift;
   b4ea2:	40d0      	lsrs	r0, r2
}
   b4ea4:	4018      	ands	r0, r3
   b4ea6:	bd10      	pop	{r4, pc}

000b4ea8 <_ZN27Adafruit_BusIO_RegisterBits5writeEm>:
 *    @brief  Write 4 bytes of data to the register
 *    @param  data The 4 bytes to write
 *    @return True on successful write (only really useful for I2C as SPI is
 * uncheckable)
 */
bool Adafruit_BusIO_RegisterBits::write(uint32_t data) {
   b4ea8:	b570      	push	{r4, r5, r6, lr}
   b4eaa:	4604      	mov	r4, r0
  uint32_t val = _register->read();
   b4eac:	6800      	ldr	r0, [r0, #0]
bool Adafruit_BusIO_RegisterBits::write(uint32_t data) {
   b4eae:	460e      	mov	r6, r1
  uint32_t val = _register->read();
   b4eb0:	f7ff ffcc 	bl	b4e4c <_ZN23Adafruit_BusIO_Register4readEv>

  // mask off the data before writing
  uint32_t mask = (1 << (_bits)) - 1;
   b4eb4:	7923      	ldrb	r3, [r4, #4]
  data &= mask;

  mask <<= _shift;
   b4eb6:	7961      	ldrb	r1, [r4, #5]
  uint32_t mask = (1 << (_bits)) - 1;
   b4eb8:	2201      	movs	r2, #1
   b4eba:	409a      	lsls	r2, r3
   b4ebc:	1e53      	subs	r3, r2, #1
  mask <<= _shift;
   b4ebe:	fa03 f501 	lsl.w	r5, r3, r1
  val &= ~mask;          // remove the current data at that spot
   b4ec2:	ea20 0505 	bic.w	r5, r0, r5
  data &= mask;
   b4ec6:	4033      	ands	r3, r6
  val |= data << _shift; // and add in the new data

  return _register->write(val, _register->width());
   b4ec8:	6820      	ldr	r0, [r4, #0]
  val |= data << _shift; // and add in the new data
   b4eca:	fa03 f101 	lsl.w	r1, r3, r1
  return _register->write(val, _register->width());
   b4ece:	4329      	orrs	r1, r5
   b4ed0:	7b02      	ldrb	r2, [r0, #12]
}
   b4ed2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  return _register->write(val, _register->width());
   b4ed6:	f7ff bf59 	b.w	b4d8c <_ZN23Adafruit_BusIO_Register5writeEmh>
	...

000b4edc <_ZN18Adafruit_SPIDevice8transferEPhj>:
 *    @brief  Transfer (send/receive) a buffer over hard/soft SPI, without
 * transaction management
 *    @param  buffer The buffer to send and receive at the same time
 *    @param  len    The number of bytes to transfer
 */
void Adafruit_SPIDevice::transfer(uint8_t *buffer, size_t len) {
   b4edc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b4ee0:	4604      	mov	r4, r0
  //
  // HARDWARE SPI
  //
  if (_spi) {
   b4ee2:	6800      	ldr	r0, [r0, #0]
void Adafruit_SPIDevice::transfer(uint8_t *buffer, size_t len) {
   b4ee4:	b085      	sub	sp, #20
   b4ee6:	460d      	mov	r5, r1
  if (_spi) {
   b4ee8:	b140      	cbz	r0, b4efc <_ZN18Adafruit_SPIDevice8transferEPhj+0x20>
#ifdef BUSIO_HAS_HW_SPI
#if defined(SPARK)
    _spi->transfer(buffer, buffer, len, nullptr);
   b4eea:	2300      	movs	r3, #0
   b4eec:	9300      	str	r3, [sp, #0]
   b4eee:	4613      	mov	r3, r2
   b4ef0:	460a      	mov	r2, r1
   b4ef2:	f002 ff03 	bl	b7cfc <_ZN8SPIClass8transferEPKvPvjPFvvE>
        buffer[i] = reply;
      }
    }
  }
  return;
}
   b4ef6:	b005      	add	sp, #20
   b4ef8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (_dataOrder == SPI_BITORDER_LSBFIRST) {
   b4efc:	7b23      	ldrb	r3, [r4, #12]
  uint8_t bitdelay_us = (1000000 / _freq) / 2;
   b4efe:	68a0      	ldr	r0, [r4, #8]
   b4f00:	4f48      	ldr	r7, [pc, #288]	; (b5024 <_ZN18Adafruit_SPIDevice8transferEPhj+0x148>)
   b4f02:	fbb7 f7f0 	udiv	r7, r7, r0
    startbit = 0x80;
   b4f06:	2b00      	cmp	r3, #0
  bool towrite, lastmosi = !(buffer[0] & startbit);
   b4f08:	780b      	ldrb	r3, [r1, #0]
    startbit = 0x80;
   b4f0a:	bf0c      	ite	eq
   b4f0c:	f04f 0b01 	moveq.w	fp, #1
   b4f10:	f04f 0b80 	movne.w	fp, #128	; 0x80
  bool towrite, lastmosi = !(buffer[0] & startbit);
   b4f14:	ea1b 0f03 	tst.w	fp, r3
   b4f18:	eb01 0302 	add.w	r3, r1, r2
   b4f1c:	bf0c      	ite	eq
   b4f1e:	f04f 0901 	moveq.w	r9, #1
   b4f22:	f04f 0900 	movne.w	r9, #0
  uint8_t bitdelay_us = (1000000 / _freq) / 2;
   b4f26:	b2ff      	uxtb	r7, r7
  for (size_t i = 0; i < len; i++) {
   b4f28:	9303      	str	r3, [sp, #12]
   b4f2a:	9b03      	ldr	r3, [sp, #12]
   b4f2c:	42ab      	cmp	r3, r5
   b4f2e:	d0e2      	beq.n	b4ef6 <_ZN18Adafruit_SPIDevice8transferEPhj+0x1a>
    uint8_t send = buffer[i];
   b4f30:	f895 a000 	ldrb.w	sl, [r5]
    for (uint8_t b = startbit; b != 0;
   b4f34:	465e      	mov	r6, fp
    uint8_t reply = 0;
   b4f36:	f04f 0800 	mov.w	r8, #0
      if (bitdelay_us) {
   b4f3a:	b117      	cbz	r7, b4f42 <_ZN18Adafruit_SPIDevice8transferEPhj+0x66>
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   b4f3c:	4638      	mov	r0, r7
   b4f3e:	f002 fb91 	bl	b7664 <HAL_Delay_Microseconds>
      if (_dataMode == SPI_MODE0 || _dataMode == SPI_MODE2) {
   b4f42:	7b63      	ldrb	r3, [r4, #13]
   b4f44:	f013 0ffd 	tst.w	r3, #253	; 0xfd
   b4f48:	d141      	bne.n	b4fce <_ZN18Adafruit_SPIDevice8transferEPhj+0xf2>
        if ((_mosi != -1) && (lastmosi != towrite)) {
   b4f4a:	f994 3010 	ldrsb.w	r3, [r4, #16]
   b4f4e:	1c5a      	adds	r2, r3, #1
   b4f50:	d00f      	beq.n	b4f72 <_ZN18Adafruit_SPIDevice8transferEPhj+0x96>
        towrite = send & b;
   b4f52:	ea1a 0106 	ands.w	r1, sl, r6
        if ((_mosi != -1) && (lastmosi != towrite)) {
   b4f56:	bf14      	ite	ne
   b4f58:	2301      	movne	r3, #1
   b4f5a:	2300      	moveq	r3, #0
   b4f5c:	454b      	cmp	r3, r9
   b4f5e:	d008      	beq.n	b4f72 <_ZN18Adafruit_SPIDevice8transferEPhj+0x96>
            *mosiPort |= mosiPinMask;
   b4f60:	6963      	ldr	r3, [r4, #20]
   b4f62:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b4f64:	681a      	ldr	r2, [r3, #0]
          if (towrite)
   b4f66:	2900      	cmp	r1, #0
   b4f68:	d02c      	beq.n	b4fc4 <_ZN18Adafruit_SPIDevice8transferEPhj+0xe8>
            *mosiPort |= mosiPinMask;
   b4f6a:	4302      	orrs	r2, r0
   b4f6c:	601a      	str	r2, [r3, #0]
   b4f6e:	f04f 0901 	mov.w	r9, #1
        *clkPort |= clkPinMask; // Clock high
   b4f72:	69a1      	ldr	r1, [r4, #24]
   b4f74:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   b4f76:	680a      	ldr	r2, [r1, #0]
   b4f78:	4313      	orrs	r3, r2
   b4f7a:	600b      	str	r3, [r1, #0]
        if (bitdelay_us) {
   b4f7c:	b117      	cbz	r7, b4f84 <_ZN18Adafruit_SPIDevice8transferEPhj+0xa8>
   b4f7e:	4638      	mov	r0, r7
   b4f80:	f002 fb70 	bl	b7664 <HAL_Delay_Microseconds>
        if (_miso != -1) {
   b4f84:	f994 3011 	ldrsb.w	r3, [r4, #17]
   b4f88:	3301      	adds	r3, #1
   b4f8a:	d006      	beq.n	b4f9a <_ZN18Adafruit_SPIDevice8transferEPhj+0xbe>
          if (*misoPort & misoPinMask) {
   b4f8c:	69e3      	ldr	r3, [r4, #28]
   b4f8e:	681a      	ldr	r2, [r3, #0]
   b4f90:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   b4f92:	421a      	tst	r2, r3
            reply |= b;
   b4f94:	bf18      	it	ne
   b4f96:	ea46 0808 	orrne.w	r8, r6, r8
        *clkPort &= ~clkPinMask; // Clock low
   b4f9a:	69a1      	ldr	r1, [r4, #24]
   b4f9c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   b4f9e:	680a      	ldr	r2, [r1, #0]
   b4fa0:	ea22 0303 	bic.w	r3, r2, r3
   b4fa4:	600b      	str	r3, [r1, #0]
      if (_miso != -1) {
   b4fa6:	f994 3011 	ldrsb.w	r3, [r4, #17]
   b4faa:	3301      	adds	r3, #1
        buffer[i] = reply;
   b4fac:	bf18      	it	ne
   b4fae:	f885 8000 	strbne.w	r8, [r5]
    for (uint8_t b = startbit; b != 0;
   b4fb2:	7b23      	ldrb	r3, [r4, #12]
   b4fb4:	2b00      	cmp	r3, #0
   b4fb6:	d132      	bne.n	b501e <_ZN18Adafruit_SPIDevice8transferEPhj+0x142>
   b4fb8:	0076      	lsls	r6, r6, #1
   b4fba:	b2f6      	uxtb	r6, r6
   b4fbc:	2e00      	cmp	r6, #0
   b4fbe:	d1bc      	bne.n	b4f3a <_ZN18Adafruit_SPIDevice8transferEPhj+0x5e>
  for (size_t i = 0; i < len; i++) {
   b4fc0:	3501      	adds	r5, #1
   b4fc2:	e7b2      	b.n	b4f2a <_ZN18Adafruit_SPIDevice8transferEPhj+0x4e>
            *mosiPort &= ~mosiPinMask;
   b4fc4:	ea22 0200 	bic.w	r2, r2, r0
   b4fc8:	601a      	str	r2, [r3, #0]
   b4fca:	4689      	mov	r9, r1
   b4fcc:	e7d1      	b.n	b4f72 <_ZN18Adafruit_SPIDevice8transferEPhj+0x96>
        *clkPort |= clkPinMask; // Clock high
   b4fce:	69a1      	ldr	r1, [r4, #24]
   b4fd0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   b4fd2:	680a      	ldr	r2, [r1, #0]
   b4fd4:	4313      	orrs	r3, r2
   b4fd6:	600b      	str	r3, [r1, #0]
        if (bitdelay_us) {
   b4fd8:	b117      	cbz	r7, b4fe0 <_ZN18Adafruit_SPIDevice8transferEPhj+0x104>
   b4fda:	4638      	mov	r0, r7
   b4fdc:	f002 fb42 	bl	b7664 <HAL_Delay_Microseconds>
        if (_mosi != -1) {
   b4fe0:	f994 3010 	ldrsb.w	r3, [r4, #16]
   b4fe4:	3301      	adds	r3, #1
   b4fe6:	d008      	beq.n	b4ffa <_ZN18Adafruit_SPIDevice8transferEPhj+0x11e>
            *mosiPort |= mosiPinMask;
   b4fe8:	6963      	ldr	r3, [r4, #20]
   b4fea:	6a61      	ldr	r1, [r4, #36]	; 0x24
   b4fec:	681a      	ldr	r2, [r3, #0]
          if (send & b)
   b4fee:	ea1a 0f06 	tst.w	sl, r6
            *mosiPort |= mosiPinMask;
   b4ff2:	bf14      	ite	ne
   b4ff4:	430a      	orrne	r2, r1
            *mosiPort &= ~mosiPinMask;
   b4ff6:	438a      	biceq	r2, r1
   b4ff8:	601a      	str	r2, [r3, #0]
        *clkPort &= ~clkPinMask; // Clock low
   b4ffa:	69a1      	ldr	r1, [r4, #24]
   b4ffc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   b4ffe:	680a      	ldr	r2, [r1, #0]
   b5000:	ea22 0303 	bic.w	r3, r2, r3
   b5004:	600b      	str	r3, [r1, #0]
        if (_miso != -1) {
   b5006:	f994 3011 	ldrsb.w	r3, [r4, #17]
   b500a:	3301      	adds	r3, #1
   b500c:	d0cb      	beq.n	b4fa6 <_ZN18Adafruit_SPIDevice8transferEPhj+0xca>
          if (*misoPort & misoPinMask) {
   b500e:	69e3      	ldr	r3, [r4, #28]
   b5010:	681a      	ldr	r2, [r3, #0]
   b5012:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   b5014:	421a      	tst	r2, r3
            reply |= b;
   b5016:	bf18      	it	ne
   b5018:	ea46 0808 	orrne.w	r8, r6, r8
   b501c:	e7c3      	b.n	b4fa6 <_ZN18Adafruit_SPIDevice8transferEPhj+0xca>
    for (uint8_t b = startbit; b != 0;
   b501e:	0876      	lsrs	r6, r6, #1
   b5020:	e7cc      	b.n	b4fbc <_ZN18Adafruit_SPIDevice8transferEPhj+0xe0>
   b5022:	bf00      	nop
   b5024:	0007a120 	.word	0x0007a120

000b5028 <_ZN18Adafruit_SPIDevice8transferEh>:
 *    @brief  Transfer (send/receive) one byte over hard/soft SPI, without
 * transaction management
 *    @param  send The byte to send
 *    @return The byte received while transmitting
 */
uint8_t Adafruit_SPIDevice::transfer(uint8_t send) {
   b5028:	b507      	push	{r0, r1, r2, lr}
  uint8_t data = send;
  transfer(&data, 1);
   b502a:	2201      	movs	r2, #1
  uint8_t data = send;
   b502c:	f88d 1007 	strb.w	r1, [sp, #7]
  transfer(&data, 1);
   b5030:	f10d 0107 	add.w	r1, sp, #7
   b5034:	f7ff ff52 	bl	b4edc <_ZN18Adafruit_SPIDevice8transferEPhj>
  return data;
}
   b5038:	f89d 0007 	ldrb.w	r0, [sp, #7]
   b503c:	b003      	add	sp, #12
   b503e:	f85d fb04 	ldr.w	pc, [sp], #4

000b5042 <_ZN18Adafruit_SPIDevice16beginTransactionEv>:
/*!
 *    @brief  Manually begin a transaction (calls beginTransaction if hardware
 * SPI)
 */
void Adafruit_SPIDevice::beginTransaction(void) {
  if (_spi) {
   b5042:	6803      	ldr	r3, [r0, #0]
   b5044:	b11b      	cbz	r3, b504e <_ZN18Adafruit_SPIDevice16beginTransactionEv+0xc>
#ifdef BUSIO_HAS_HW_SPI
    _spi->beginTransaction(*_spiSetting);
   b5046:	6841      	ldr	r1, [r0, #4]
   b5048:	4618      	mov	r0, r3
   b504a:	f002 bde3 	b.w	b7c14 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
#endif
  }
}
   b504e:	4770      	bx	lr

000b5050 <_ZN18Adafruit_SPIDevice14endTransactionEv>:

/*!
 *    @brief  Manually end a transaction (calls endTransaction if hardware SPI)
 */
void Adafruit_SPIDevice::endTransaction(void) {
  if (_spi) {
   b5050:	6800      	ldr	r0, [r0, #0]
   b5052:	b108      	cbz	r0, b5058 <_ZN18Adafruit_SPIDevice14endTransactionEv+0x8>
#ifdef BUSIO_HAS_HW_SPI
    _spi->endTransaction();
   b5054:	f002 bdc4 	b.w	b7be0 <_ZN8SPIClass14endTransactionEv>
#endif
  }
}
   b5058:	4770      	bx	lr

000b505a <_ZN18Adafruit_SPIDevice13setChipSelectEi>:
/*!
 *    @brief  Assert/Deassert the CS pin if it is defined
 *    @param  value The state the CS is set to
 */
void Adafruit_SPIDevice::setChipSelect(int value) {
  if (_cs != -1) {
   b505a:	f990 000e 	ldrsb.w	r0, [r0, #14]
   b505e:	1c43      	adds	r3, r0, #1
   b5060:	d003      	beq.n	b506a <_ZN18Adafruit_SPIDevice13setChipSelectEi+0x10>
    digitalWrite(_cs, value);
   b5062:	b2c9      	uxtb	r1, r1
   b5064:	b280      	uxth	r0, r0
   b5066:	f003 bc72 	b.w	b894e <digitalWrite>
  }
}
   b506a:	4770      	bx	lr

000b506c <_ZN18Adafruit_SPIDevice31beginTransactionWithAssertingCSEv>:
 *    @brief  Write a buffer or two to the SPI device, with transaction
 * management.
 *    @brief  Manually begin a transaction (calls beginTransaction if hardware
 *            SPI) with asserting the CS pin
 */
void Adafruit_SPIDevice::beginTransactionWithAssertingCS() {
   b506c:	b510      	push	{r4, lr}
   b506e:	4604      	mov	r4, r0
  beginTransaction();
   b5070:	f7ff ffe7 	bl	b5042 <_ZN18Adafruit_SPIDevice16beginTransactionEv>
  setChipSelect(LOW);
   b5074:	4620      	mov	r0, r4
   b5076:	2100      	movs	r1, #0
}
   b5078:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  setChipSelect(LOW);
   b507c:	f7ff bfed 	b.w	b505a <_ZN18Adafruit_SPIDevice13setChipSelectEi>

000b5080 <_ZN18Adafruit_SPIDevice31endTransactionWithDeassertingCSEv>:

/*!
 *    @brief  Manually end a transaction (calls endTransaction if hardware SPI)
 *            with deasserting the CS pin
 */
void Adafruit_SPIDevice::endTransactionWithDeassertingCS() {
   b5080:	b510      	push	{r4, lr}
  setChipSelect(HIGH);
   b5082:	2101      	movs	r1, #1
void Adafruit_SPIDevice::endTransactionWithDeassertingCS() {
   b5084:	4604      	mov	r4, r0
  setChipSelect(HIGH);
   b5086:	f7ff ffe8 	bl	b505a <_ZN18Adafruit_SPIDevice13setChipSelectEi>
  endTransaction();
   b508a:	4620      	mov	r0, r4
}
   b508c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  endTransaction();
   b5090:	f7ff bfde 	b.w	b5050 <_ZN18Adafruit_SPIDevice14endTransactionEv>

000b5094 <_ZN18Adafruit_SPIDevice5writeEPKhjS1_j>:
 *    @return Always returns true because there's no way to test success of SPI
 * writes
 */
bool Adafruit_SPIDevice::write(const uint8_t *buffer, size_t len,
                               const uint8_t *prefix_buffer,
                               size_t prefix_len) {
   b5094:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b5098:	461c      	mov	r4, r3
   b509a:	4606      	mov	r6, r0
   b509c:	460d      	mov	r5, r1
   b509e:	4617      	mov	r7, r2
  beginTransactionWithAssertingCS();
   b50a0:	f7ff ffe4 	bl	b506c <_ZN18Adafruit_SPIDevice31beginTransactionWithAssertingCSEv>
      _spi->transferBytes(buffer, nullptr, len);
    }
  } else
#endif
  {
    for (size_t i = 0; i < prefix_len; i++) {
   b50a4:	9b06      	ldr	r3, [sp, #24]
   b50a6:	eb04 0803 	add.w	r8, r4, r3
   b50aa:	4544      	cmp	r4, r8
   b50ac:	d108      	bne.n	b50c0 <_ZN18Adafruit_SPIDevice5writeEPKhjS1_j+0x2c>
   b50ae:	442f      	add	r7, r5
      transfer(prefix_buffer[i]);
    }
    for (size_t i = 0; i < len; i++) {
   b50b0:	42bd      	cmp	r5, r7
   b50b2:	d00b      	beq.n	b50cc <_ZN18Adafruit_SPIDevice5writeEPKhjS1_j+0x38>
      transfer(buffer[i]);
   b50b4:	f815 1b01 	ldrb.w	r1, [r5], #1
   b50b8:	4630      	mov	r0, r6
   b50ba:	f7ff ffb5 	bl	b5028 <_ZN18Adafruit_SPIDevice8transferEh>
    for (size_t i = 0; i < len; i++) {
   b50be:	e7f7      	b.n	b50b0 <_ZN18Adafruit_SPIDevice5writeEPKhjS1_j+0x1c>
      transfer(prefix_buffer[i]);
   b50c0:	f814 1b01 	ldrb.w	r1, [r4], #1
   b50c4:	4630      	mov	r0, r6
   b50c6:	f7ff ffaf 	bl	b5028 <_ZN18Adafruit_SPIDevice8transferEh>
    for (size_t i = 0; i < prefix_len; i++) {
   b50ca:	e7ee      	b.n	b50aa <_ZN18Adafruit_SPIDevice5writeEPKhjS1_j+0x16>
    }
  }
  endTransactionWithDeassertingCS();
   b50cc:	4630      	mov	r0, r6
   b50ce:	f7ff ffd7 	bl	b5080 <_ZN18Adafruit_SPIDevice31endTransactionWithDeassertingCSEv>
  }
  DEBUG_SERIAL.println();
#endif

  return true;
}
   b50d2:	2001      	movs	r0, #1
   b50d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b50d8 <_ZN18Adafruit_SPIDevice15write_then_readEPKhjPhjh>:
 *    @return Always returns true because there's no way to test success of SPI
 * writes
 */
bool Adafruit_SPIDevice::write_then_read(const uint8_t *write_buffer,
                                         size_t write_len, uint8_t *read_buffer,
                                         size_t read_len, uint8_t sendvalue) {
   b50d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b50dc:	460d      	mov	r5, r1
   b50de:	4617      	mov	r7, r2
   b50e0:	f89d 801c 	ldrb.w	r8, [sp, #28]
   b50e4:	4606      	mov	r6, r0
   b50e6:	461c      	mov	r4, r3
  beginTransactionWithAssertingCS();
   b50e8:	f7ff ffc0 	bl	b506c <_ZN18Adafruit_SPIDevice31beginTransactionWithAssertingCSEv>
      _spi->transferBytes(write_buffer, nullptr, write_len);
    }
  } else
#endif
  {
    for (size_t i = 0; i < write_len; i++) {
   b50ec:	442f      	add	r7, r5
   b50ee:	42bd      	cmp	r5, r7
   b50f0:	d10a      	bne.n	b5108 <_ZN18Adafruit_SPIDevice15write_then_readEPKhjPhjh+0x30>
   b50f2:	9b06      	ldr	r3, [sp, #24]
   b50f4:	18e5      	adds	r5, r4, r3
  }
  DEBUG_SERIAL.println();
#endif

  // do the reading
  for (size_t i = 0; i < read_len; i++) {
   b50f6:	42ac      	cmp	r4, r5
   b50f8:	d00c      	beq.n	b5114 <_ZN18Adafruit_SPIDevice15write_then_readEPKhjPhjh+0x3c>
    read_buffer[i] = transfer(sendvalue);
   b50fa:	4641      	mov	r1, r8
   b50fc:	4630      	mov	r0, r6
   b50fe:	f7ff ff93 	bl	b5028 <_ZN18Adafruit_SPIDevice8transferEh>
   b5102:	f804 0b01 	strb.w	r0, [r4], #1
  for (size_t i = 0; i < read_len; i++) {
   b5106:	e7f6      	b.n	b50f6 <_ZN18Adafruit_SPIDevice15write_then_readEPKhjPhjh+0x1e>
      transfer(write_buffer[i]);
   b5108:	f815 1b01 	ldrb.w	r1, [r5], #1
   b510c:	4630      	mov	r0, r6
   b510e:	f7ff ff8b 	bl	b5028 <_ZN18Adafruit_SPIDevice8transferEh>
    for (size_t i = 0; i < write_len; i++) {
   b5112:	e7ec      	b.n	b50ee <_ZN18Adafruit_SPIDevice15write_then_readEPKhjPhjh+0x16>
    }
  }
  DEBUG_SERIAL.println();
#endif

  endTransactionWithDeassertingCS();
   b5114:	4630      	mov	r0, r6
   b5116:	f7ff ffb3 	bl	b5080 <_ZN18Adafruit_SPIDevice31endTransactionWithDeassertingCSEv>

  return true;
}
   b511a:	2001      	movs	r0, #1
   b511c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b5120 <_ZN18Adafruit_I2CDeviceC1EhP7TwoWire>:
 *    @param  addr The 7-bit I2C address for the device
 *    @param  theWire The I2C bus to use, defaults to &Wire
 */
Adafruit_I2CDevice::Adafruit_I2CDevice(uint8_t addr, TwoWire *theWire) {
  _addr = addr;
  _wire = theWire;
   b5120:	6042      	str	r2, [r0, #4]
  _begun = false;
   b5122:	2200      	movs	r2, #0
   b5124:	7202      	strb	r2, [r0, #8]
#ifdef ARDUINO_ARCH_SAMD
  _maxBufferSize = 250; // as defined in Wire.h's RingBuffer
#elif defined(ESP32)
  _maxBufferSize = I2C_BUFFER_LENGTH;
#else
  _maxBufferSize = 32;
   b5126:	2220      	movs	r2, #32
  _addr = addr;
   b5128:	7001      	strb	r1, [r0, #0]
  _maxBufferSize = 32;
   b512a:	60c2      	str	r2, [r0, #12]
#endif
}
   b512c:	4770      	bx	lr

000b512e <_ZN18Adafruit_I2CDevice8detectedEv>:
/*!
 *    @brief  Scans I2C for the address - note will give a false-positive
 *    if there's no pullups on I2C
 *    @return True if I2C initialized and a device with the addr found
 */
bool Adafruit_I2CDevice::detected(void) {
   b512e:	b510      	push	{r4, lr}
  // Init I2C if not done yet
  if (!_begun && !begin()) {
   b5130:	7a03      	ldrb	r3, [r0, #8]
bool Adafruit_I2CDevice::detected(void) {
   b5132:	4604      	mov	r4, r0
  if (!_begun && !begin()) {
   b5134:	b153      	cbz	r3, b514c <_ZN18Adafruit_I2CDevice8detectedEv+0x1e>
    return false;
  }

  // A basic scanner, see if it ACK's
  _wire->beginTransmission(_addr);
   b5136:	7821      	ldrb	r1, [r4, #0]
   b5138:	6860      	ldr	r0, [r4, #4]
   b513a:	f003 fabb 	bl	b86b4 <_ZN7TwoWire17beginTransmissionEh>
  if (_wire->endTransmission() == 0) {
   b513e:	6860      	ldr	r0, [r4, #4]
   b5140:	f003 fac3 	bl	b86ca <_ZN7TwoWire15endTransmissionEv>
   b5144:	fab0 f080 	clz	r0, r0
   b5148:	0940      	lsrs	r0, r0, #5
  }
#ifdef DEBUG_SERIAL
  DEBUG_SERIAL.println(F("Not detected"));
#endif
  return false;
}
   b514a:	bd10      	pop	{r4, pc}
  if (!_begun && !begin()) {
   b514c:	2101      	movs	r1, #1
   b514e:	f000 f803 	bl	b5158 <_ZN18Adafruit_I2CDevice5beginEb>
   b5152:	2800      	cmp	r0, #0
   b5154:	d1ef      	bne.n	b5136 <_ZN18Adafruit_I2CDevice8detectedEv+0x8>
   b5156:	e7f8      	b.n	b514a <_ZN18Adafruit_I2CDevice8detectedEv+0x1c>

000b5158 <_ZN18Adafruit_I2CDevice5beginEb>:
bool Adafruit_I2CDevice::begin(bool addr_detect) {
   b5158:	b538      	push	{r3, r4, r5, lr}
   b515a:	4604      	mov	r4, r0
  _wire->begin();
   b515c:	6840      	ldr	r0, [r0, #4]
bool Adafruit_I2CDevice::begin(bool addr_detect) {
   b515e:	460d      	mov	r5, r1
  _wire->begin();
   b5160:	f003 fa76 	bl	b8650 <_ZN7TwoWire5beginEv>
  _begun = true;
   b5164:	2001      	movs	r0, #1
   b5166:	7220      	strb	r0, [r4, #8]
  if (addr_detect) {
   b5168:	b125      	cbz	r5, b5174 <_ZN18Adafruit_I2CDevice5beginEb+0x1c>
    return detected();
   b516a:	4620      	mov	r0, r4
}
   b516c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return detected();
   b5170:	f7ff bfdd 	b.w	b512e <_ZN18Adafruit_I2CDevice8detectedEv>
}
   b5174:	bd38      	pop	{r3, r4, r5, pc}

000b5176 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>:
 *    @param  stop Whether to send an I2C STOP signal on write
 *    @return True if write was successful, otherwise false.
 */
bool Adafruit_I2CDevice::write(const uint8_t *buffer, size_t len, bool stop,
                               const uint8_t *prefix_buffer,
                               size_t prefix_len) {
   b5176:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b517a:	e9dd 9608 	ldrd	r9, r6, [sp, #32]
   b517e:	461f      	mov	r7, r3
  if ((len + prefix_len) > maxBufferSize()) {
   b5180:	68c3      	ldr	r3, [r0, #12]
                               size_t prefix_len) {
   b5182:	4615      	mov	r5, r2
  if ((len + prefix_len) > maxBufferSize()) {
   b5184:	4432      	add	r2, r6
   b5186:	429a      	cmp	r2, r3
                               size_t prefix_len) {
   b5188:	4604      	mov	r4, r0
   b518a:	4688      	mov	r8, r1
  if ((len + prefix_len) > maxBufferSize()) {
   b518c:	d902      	bls.n	b5194 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x1e>
    // we will need to find out if some platforms have larger
    // I2C buffer sizes :/
#ifdef DEBUG_SERIAL
    DEBUG_SERIAL.println(F("\tI2CDevice could not write such a large buffer"));
#endif
    return false;
   b518e:	2000      	movs	r0, #0
#ifdef DEBUG_SERIAL
    DEBUG_SERIAL.println("\tFailed to send!");
#endif
    return false;
  }
}
   b5190:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  _wire->beginTransmission(_addr);
   b5194:	7801      	ldrb	r1, [r0, #0]
   b5196:	6840      	ldr	r0, [r0, #4]
   b5198:	f003 fa8c 	bl	b86b4 <_ZN7TwoWire17beginTransmissionEh>
  if ((prefix_len != 0) && (prefix_buffer != nullptr)) {
   b519c:	b97e      	cbnz	r6, b51be <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x48>
  if (_wire->write(buffer, len) != len) {
   b519e:	6860      	ldr	r0, [r4, #4]
   b51a0:	6803      	ldr	r3, [r0, #0]
   b51a2:	462a      	mov	r2, r5
   b51a4:	68db      	ldr	r3, [r3, #12]
   b51a6:	4641      	mov	r1, r8
   b51a8:	4798      	blx	r3
   b51aa:	4285      	cmp	r5, r0
   b51ac:	d1ef      	bne.n	b518e <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x18>
  if (_wire->endTransmission(stop) == 0) {
   b51ae:	6860      	ldr	r0, [r4, #4]
   b51b0:	4639      	mov	r1, r7
   b51b2:	f003 fa86 	bl	b86c2 <_ZN7TwoWire15endTransmissionEh>
   b51b6:	fab0 f080 	clz	r0, r0
   b51ba:	0940      	lsrs	r0, r0, #5
   b51bc:	e7e8      	b.n	b5190 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x1a>
  if ((prefix_len != 0) && (prefix_buffer != nullptr)) {
   b51be:	f1b9 0f00 	cmp.w	r9, #0
   b51c2:	d0ec      	beq.n	b519e <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x28>
    if (_wire->write(prefix_buffer, prefix_len) != prefix_len) {
   b51c4:	6860      	ldr	r0, [r4, #4]
   b51c6:	6803      	ldr	r3, [r0, #0]
   b51c8:	4632      	mov	r2, r6
   b51ca:	68db      	ldr	r3, [r3, #12]
   b51cc:	4649      	mov	r1, r9
   b51ce:	4798      	blx	r3
   b51d0:	4286      	cmp	r6, r0
   b51d2:	d1dc      	bne.n	b518e <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x18>
   b51d4:	e7e3      	b.n	b519e <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x28>

000b51d6 <_ZN18Adafruit_I2CDevice5_readEPhjb>:
    pos += read_len;
  }
  return true;
}

bool Adafruit_I2CDevice::_read(uint8_t *buffer, size_t len, bool stop) {
   b51d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b51da:	4615      	mov	r5, r2
   b51dc:	4604      	mov	r4, r0
   b51de:	460e      	mov	r6, r1
#if defined(TinyWireM_h)
  size_t recv = _wire->requestFrom((uint8_t)_addr, (uint8_t)len);
#elif defined(ARDUINO_ARCH_MEGAAVR)
  size_t recv = _wire->requestFrom(_addr, len, stop);
#else
  size_t recv = _wire->requestFrom((uint8_t)_addr, (uint8_t)len, (uint8_t)stop);
   b51e0:	b2d2      	uxtb	r2, r2
   b51e2:	7801      	ldrb	r1, [r0, #0]
   b51e4:	6840      	ldr	r0, [r0, #4]
   b51e6:	f003 fa50 	bl	b868a <_ZN7TwoWire11requestFromEhjh>
#endif

  if (recv != len) {
   b51ea:	4285      	cmp	r5, r0
   b51ec:	d10d      	bne.n	b520a <_ZN18Adafruit_I2CDevice5_readEPhjb+0x34>
   b51ee:	2700      	movs	r7, #0
    DEBUG_SERIAL.println(recv);
#endif
    return false;
  }

  for (uint16_t i = 0; i < len; i++) {
   b51f0:	fa1f f887 	uxth.w	r8, r7
   b51f4:	45a8      	cmp	r8, r5
   b51f6:	f107 0701 	add.w	r7, r7, #1
   b51fa:	d209      	bcs.n	b5210 <_ZN18Adafruit_I2CDevice5_readEPhjb+0x3a>
    buffer[i] = _wire->read();
   b51fc:	6860      	ldr	r0, [r4, #4]
   b51fe:	6803      	ldr	r3, [r0, #0]
   b5200:	695b      	ldr	r3, [r3, #20]
   b5202:	4798      	blx	r3
   b5204:	f806 0008 	strb.w	r0, [r6, r8]
  for (uint16_t i = 0; i < len; i++) {
   b5208:	e7f2      	b.n	b51f0 <_ZN18Adafruit_I2CDevice5_readEPhjb+0x1a>
    return false;
   b520a:	2000      	movs	r0, #0
  }
  DEBUG_SERIAL.println();
#endif

  return true;
}
   b520c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b5210:	2001      	movs	r0, #1
   b5212:	e7fb      	b.n	b520c <_ZN18Adafruit_I2CDevice5_readEPhjb+0x36>

000b5214 <_ZN18Adafruit_I2CDevice4readEPhjb>:
bool Adafruit_I2CDevice::read(uint8_t *buffer, size_t len, bool stop) {
   b5214:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b5218:	4607      	mov	r7, r0
   b521a:	4688      	mov	r8, r1
   b521c:	4616      	mov	r6, r2
   b521e:	4699      	mov	r9, r3
  size_t pos = 0;
   b5220:	2500      	movs	r5, #0
  while (pos < len) {
   b5222:	42b5      	cmp	r5, r6
   b5224:	d212      	bcs.n	b524c <_ZN18Adafruit_I2CDevice4readEPhjb+0x38>
                       bool stop = false);
  bool setSpeed(uint32_t desiredclk);

  /*!   @brief  How many bytes we can read in a transaction
   *    @return The size of the Wire receive/transmit buffer */
  size_t maxBufferSize() { return _maxBufferSize; }
   b5226:	68fa      	ldr	r2, [r7, #12]
        ((len - pos) > maxBufferSize()) ? maxBufferSize() : (len - pos);
   b5228:	1b74      	subs	r4, r6, r5
   b522a:	4294      	cmp	r4, r2
   b522c:	bf28      	it	cs
   b522e:	4614      	movcs	r4, r2
    bool read_stop = (pos < (len - read_len)) ? false : stop;
   b5230:	1b33      	subs	r3, r6, r4
    if (!_read(buffer + pos, read_len, read_stop))
   b5232:	42ab      	cmp	r3, r5
   b5234:	bf94      	ite	ls
   b5236:	464b      	movls	r3, r9
   b5238:	2300      	movhi	r3, #0
   b523a:	4622      	mov	r2, r4
   b523c:	eb08 0105 	add.w	r1, r8, r5
   b5240:	4638      	mov	r0, r7
   b5242:	f7ff ffc8 	bl	b51d6 <_ZN18Adafruit_I2CDevice5_readEPhjb>
   b5246:	b110      	cbz	r0, b524e <_ZN18Adafruit_I2CDevice4readEPhjb+0x3a>
    pos += read_len;
   b5248:	4425      	add	r5, r4
  while (pos < len) {
   b524a:	e7ea      	b.n	b5222 <_ZN18Adafruit_I2CDevice4readEPhjb+0xe>
  return true;
   b524c:	2001      	movs	r0, #1
}
   b524e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000b5252 <_ZN18Adafruit_I2CDevice15write_then_readEPKhjPhjb>:
 *    @param  stop Whether to send an I2C STOP signal between the write and read
 *    @return True if write & read was successful, otherwise false.
 */
bool Adafruit_I2CDevice::write_then_read(const uint8_t *write_buffer,
                                         size_t write_len, uint8_t *read_buffer,
                                         size_t read_len, bool stop) {
   b5252:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b5254:	461d      	mov	r5, r3
  if (!write(write_buffer, write_len, stop)) {
   b5256:	2300      	movs	r3, #0
   b5258:	e9cd 3300 	strd	r3, r3, [sp]
   b525c:	f89d 301c 	ldrb.w	r3, [sp, #28]
                                         size_t read_len, bool stop) {
   b5260:	9e06      	ldr	r6, [sp, #24]
   b5262:	4604      	mov	r4, r0
  if (!write(write_buffer, write_len, stop)) {
   b5264:	f7ff ff87 	bl	b5176 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>
   b5268:	b140      	cbz	r0, b527c <_ZN18Adafruit_I2CDevice15write_then_readEPKhjPhjb+0x2a>
    return false;
  }

  return read(read_buffer, read_len);
   b526a:	2301      	movs	r3, #1
   b526c:	4632      	mov	r2, r6
   b526e:	4629      	mov	r1, r5
   b5270:	4620      	mov	r0, r4
}
   b5272:	b002      	add	sp, #8
   b5274:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  return read(read_buffer, read_len);
   b5278:	f7ff bfcc 	b.w	b5214 <_ZN18Adafruit_I2CDevice4readEPhjb>
}
   b527c:	b002      	add	sp, #8
   b527e:	bd70      	pop	{r4, r5, r6, pc}

000b5280 <_ZL10lfnGetCharP18longDirectoryEntryh>:
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \return The 16-bit character.
 */
static uint16_t lfnGetChar(ldir_t *ldir, uint8_t i) {
  if (i < LDIR_NAME1_DIM) {
   b5280:	2904      	cmp	r1, #4
   b5282:	d804      	bhi.n	b528e <_ZL10lfnGetCharP18longDirectoryEntryh+0xe>
    return ldir->name1[i];
   b5284:	eb00 0041 	add.w	r0, r0, r1, lsl #1
   b5288:	f8b0 0001 	ldrh.w	r0, [r0, #1]
   b528c:	4770      	bx	lr
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
   b528e:	290a      	cmp	r1, #10
    return ldir->name2[i - LDIR_NAME1_DIM];
   b5290:	bf9b      	ittet	ls
   b5292:	f101 31ff 	addls.w	r1, r1, #4294967295
   b5296:	eb00 0041 	addls.w	r0, r0, r1, lsl #1
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
   b529a:	3101      	addhi	r1, #1
    return ldir->name2[i - LDIR_NAME1_DIM];
   b529c:	88c0      	ldrhls	r0, [r0, #6]
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
   b529e:	bf84      	itt	hi
   b52a0:	eb00 0041 	addhi.w	r0, r0, r1, lsl #1
   b52a4:	8880      	ldrhhi	r0, [r0, #4]
  }
  return 0;
}
   b52a6:	4770      	bx	lr

000b52a8 <_ZN9FatVolume9cacheSyncEv>:
  FatCache m_fatCache;
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
   b52a8:	b510      	push	{r4, lr}
   b52aa:	4604      	mov	r4, r0
    return m_cache.sync() && m_fatCache.sync() && syncBlocks();
   b52ac:	3024      	adds	r0, #36	; 0x24
   b52ae:	f001 f8a1 	bl	b63f4 <_ZN8FatCache4syncEv>
   b52b2:	b128      	cbz	r0, b52c0 <_ZN9FatVolume9cacheSyncEv+0x18>
   b52b4:	f504 700c 	add.w	r0, r4, #560	; 0x230
  }
   b52b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return m_cache.sync() && m_fatCache.sync() && syncBlocks();
   b52bc:	f001 b89a 	b.w	b63f4 <_ZN8FatCache4syncEv>
  }
   b52c0:	bd10      	pop	{r4, pc}

000b52c2 <_ZN7FatFile11lfnChecksumEPh>:
  for (uint8_t i = 0; i < 11; i++) {
   b52c2:	1e41      	subs	r1, r0, #1
   b52c4:	f100 030a 	add.w	r3, r0, #10
  uint8_t sum = 0;
   b52c8:	2000      	movs	r0, #0
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
   b52ca:	0842      	lsrs	r2, r0, #1
   b52cc:	ea42 10c0 	orr.w	r0, r2, r0, lsl #7
   b52d0:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   b52d4:	fa52 f080 	uxtab	r0, r2, r0
  for (uint8_t i = 0; i < 11; i++) {
   b52d8:	428b      	cmp	r3, r1
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
   b52da:	b2c0      	uxtb	r0, r0
  for (uint8_t i = 0; i < 11; i++) {
   b52dc:	d1f5      	bne.n	b52ca <_ZN7FatFile11lfnChecksumEPh+0x8>
}
   b52de:	4770      	bx	lr

000b52e0 <_ZN7FatFile11openClusterEPS_>:
fail:
  name[0] = 0;
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openCluster(FatFile* file) {
   b52e0:	b538      	push	{r3, r4, r5, lr}
  if (file->m_dirCluster == 0) {
   b52e2:	68cb      	ldr	r3, [r1, #12]
bool FatFile::openCluster(FatFile* file) {
   b52e4:	4604      	mov	r4, r0
   b52e6:	460d      	mov	r5, r1
  if (file->m_dirCluster == 0) {
   b52e8:	b923      	cbnz	r3, b52f4 <_ZN7FatFile11openClusterEPS_+0x14>
  m_attr = FILE_ATTR_SUBDIR;
  m_flags = F_READ;
  m_vol = file->m_vol;
  m_firstCluster = file->m_dirCluster;
  return true;
}
   b52ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return openRoot(file->m_vol);
   b52ee:	6889      	ldr	r1, [r1, #8]
   b52f0:	f000 bc78 	b.w	b5be4 <_ZN7FatFile8openRootEP9FatVolume>
  memset(this, 0, sizeof(FatFile));
   b52f4:	2224      	movs	r2, #36	; 0x24
   b52f6:	2100      	movs	r1, #0
   b52f8:	f004 fa88 	bl	b980c <memset>
  m_attr = FILE_ATTR_SUBDIR;
   b52fc:	2310      	movs	r3, #16
  m_flags = F_READ;
   b52fe:	2001      	movs	r0, #1
  m_attr = FILE_ATTR_SUBDIR;
   b5300:	7023      	strb	r3, [r4, #0]
  m_flags = F_READ;
   b5302:	70a0      	strb	r0, [r4, #2]
  m_vol = file->m_vol;
   b5304:	68ab      	ldr	r3, [r5, #8]
   b5306:	60a3      	str	r3, [r4, #8]
  m_firstCluster = file->m_dirCluster;
   b5308:	68eb      	ldr	r3, [r5, #12]
   b530a:	6223      	str	r3, [r4, #32]
}
   b530c:	bd38      	pop	{r3, r4, r5, pc}

000b530e <_ZN7FatFile7getNameEPcj>:
bool FatFile::getName(char* name, size_t size) {
   b530e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5312:	b08d      	sub	sp, #52	; 0x34
  if (!isOpen() || size < 13) {
   b5314:	7803      	ldrb	r3, [r0, #0]
   b5316:	f04f 0900 	mov.w	r9, #0
bool FatFile::getName(char* name, size_t size) {
   b531a:	4606      	mov	r6, r0
   b531c:	460f      	mov	r7, r1
   b531e:	4690      	mov	r8, r2
   b5320:	f8cd 900c 	str.w	r9, [sp, #12]
  if (!isOpen() || size < 13) {
   b5324:	2b00      	cmp	r3, #0
   b5326:	d05d      	beq.n	b53e4 <_ZN7FatFile7getNameEPcj+0xd6>
   b5328:	2a0c      	cmp	r2, #12
   b532a:	d95b      	bls.n	b53e4 <_ZN7FatFile7getNameEPcj+0xd6>
  if (!isLFN()) {
   b532c:	78c3      	ldrb	r3, [r0, #3]
   b532e:	b933      	cbnz	r3, b533e <_ZN7FatFile7getNameEPcj+0x30>
    return getSFN(name);
   b5330:	f000 fba8 	bl	b5a84 <_ZN7FatFile6getSFNEPc>
   b5334:	4604      	mov	r4, r0
}
   b5336:	4620      	mov	r0, r4
   b5338:	b00d      	add	sp, #52	; 0x34
   b533a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (!dirFile.openCluster(this)) {
   b533e:	4601      	mov	r1, r0
   b5340:	a803      	add	r0, sp, #12
   b5342:	f7ff ffcd 	bl	b52e0 <_ZN7FatFile11openClusterEPS_>
   b5346:	2800      	cmp	r0, #0
   b5348:	d04c      	beq.n	b53e4 <_ZN7FatFile7getNameEPcj+0xd6>
  name[n - 1] = 0;
   b534a:	eb07 0308 	add.w	r3, r7, r8
   b534e:	f04f 0b01 	mov.w	fp, #1
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   b5352:	f04f 0a0d 	mov.w	sl, #13
  name[n - 1] = 0;
   b5356:	9300      	str	r3, [sp, #0]
  for (uint8_t ord = 1; ord <= m_lfnOrd; ord++) {
   b5358:	78f3      	ldrb	r3, [r6, #3]
   b535a:	fa5f f58b 	uxtb.w	r5, fp
   b535e:	42ab      	cmp	r3, r5
   b5360:	d340      	bcc.n	b53e4 <_ZN7FatFile7getNameEPcj+0xd6>
    if (!dirFile.seekSet(32UL*(m_dirIndex - ord))) {
   b5362:	88b1      	ldrh	r1, [r6, #4]
   b5364:	eba1 010b 	sub.w	r1, r1, fp
   b5368:	0149      	lsls	r1, r1, #5
   b536a:	a803      	add	r0, sp, #12
   b536c:	f000 fd20 	bl	b5db0 <_ZN7FatFile7seekSetEm>
   b5370:	4604      	mov	r4, r0
   b5372:	2800      	cmp	r0, #0
   b5374:	d036      	beq.n	b53e4 <_ZN7FatFile7getNameEPcj+0xd6>
    ldir = reinterpret_cast<ldir_t*>(dirFile.readDirCache());
   b5376:	2100      	movs	r1, #0
   b5378:	a803      	add	r0, sp, #12
   b537a:	f000 fcfa 	bl	b5d72 <_ZN7FatFile12readDirCacheEb>
    if (!ldir) {
   b537e:	4603      	mov	r3, r0
   b5380:	b380      	cbz	r0, b53e4 <_ZN7FatFile7getNameEPcj+0xd6>
    if (ldir->attr != DIR_ATT_LONG_NAME) {
   b5382:	7ac2      	ldrb	r2, [r0, #11]
   b5384:	2a0f      	cmp	r2, #15
   b5386:	d12d      	bne.n	b53e4 <_ZN7FatFile7getNameEPcj+0xd6>
    if (ord != (ldir->ord & 0X1F)) {
   b5388:	7802      	ldrb	r2, [r0, #0]
   b538a:	f002 021f 	and.w	r2, r2, #31
   b538e:	42aa      	cmp	r2, r5
   b5390:	d128      	bne.n	b53e4 <_ZN7FatFile7getNameEPcj+0xd6>
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   b5392:	f10b 35ff 	add.w	r5, fp, #4294967295
   b5396:	fb0a f505 	mul.w	r5, sl, r5
  for (i = 0; i < 13; i++) {
   b539a:	197a      	adds	r2, r7, r5
   b539c:	2100      	movs	r1, #0
    uint16_t c = lfnGetChar(ldir, i);
   b539e:	4618      	mov	r0, r3
   b53a0:	9101      	str	r1, [sp, #4]
   b53a2:	f7ff ff6d 	bl	b5280 <_ZL10lfnGetCharP18longDirectoryEntryh>
    if (c == 0 || k >= n) {
   b53a6:	b168      	cbz	r0, b53c4 <_ZN7FatFile7getNameEPcj+0xb6>
   b53a8:	45a8      	cmp	r8, r5
   b53aa:	d912      	bls.n	b53d2 <_ZN7FatFile7getNameEPcj+0xc4>
  for (i = 0; i < 13; i++) {
   b53ac:	9901      	ldr	r1, [sp, #4]
   b53ae:	3101      	adds	r1, #1
   b53b0:	287f      	cmp	r0, #127	; 0x7f
   b53b2:	b2c9      	uxtb	r1, r1
   b53b4:	bf28      	it	cs
   b53b6:	203f      	movcs	r0, #63	; 0x3f
   b53b8:	290d      	cmp	r1, #13
    name[k++] = c >= 0X7F ? '?' : c;
   b53ba:	f802 0b01 	strb.w	r0, [r2], #1
   b53be:	f105 0501 	add.w	r5, r5, #1
  for (i = 0; i < 13; i++) {
   b53c2:	d1ec      	bne.n	b539e <_ZN7FatFile7getNameEPcj+0x90>
  if (k < n && (ldir->ord & LDIR_ORD_LAST_LONG_ENTRY)) {
   b53c4:	45a8      	cmp	r8, r5
   b53c6:	d904      	bls.n	b53d2 <_ZN7FatFile7getNameEPcj+0xc4>
   b53c8:	781a      	ldrb	r2, [r3, #0]
   b53ca:	0652      	lsls	r2, r2, #25
    name[k] = 0;
   b53cc:	bf48      	it	mi
   b53ce:	f807 9005 	strbmi.w	r9, [r7, r5]
  name[n - 1] = 0;
   b53d2:	9a00      	ldr	r2, [sp, #0]
   b53d4:	f802 9c01 	strb.w	r9, [r2, #-1]
    if (ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) {
   b53d8:	781b      	ldrb	r3, [r3, #0]
   b53da:	065b      	lsls	r3, r3, #25
   b53dc:	f10b 0b01 	add.w	fp, fp, #1
   b53e0:	d5ba      	bpl.n	b5358 <_ZN7FatFile7getNameEPcj+0x4a>
   b53e2:	e7a8      	b.n	b5336 <_ZN7FatFile7getNameEPcj+0x28>
  name[0] = 0;
   b53e4:	2400      	movs	r4, #0
   b53e6:	703c      	strb	r4, [r7, #0]
  return false;
   b53e8:	e7a5      	b.n	b5336 <_ZN7FatFile7getNameEPcj+0x28>
	...

000b53ec <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_>:
//------------------------------------------------------------------------------
bool FatFile::parsePathName(const char* path,
                            fname_t* fname, const char** ptr) {
   b53ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b53f0:	4606      	mov	r6, r0
  int len = 0;
  int si;
  int dot;

  // Skip leading spaces.
  while (*path == ' ') {
   b53f2:	f810 3b01 	ldrb.w	r3, [r0], #1
   b53f6:	2b20      	cmp	r3, #32
   b53f8:	d0fa      	beq.n	b53f0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4>
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   b53fa:	4d6a      	ldr	r5, [pc, #424]	; (b55a4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1b8>)
    path++;
  }
  fname->lfn = path;
   b53fc:	608e      	str	r6, [r1, #8]

  for (len = 0; ; len++) {
   b53fe:	2400      	movs	r4, #0
    c = path[len];
   b5400:	5d33      	ldrb	r3, [r6, r4]
    if (c == 0 || isDirSeparator(c)) {
   b5402:	b1c3      	cbz	r3, b5436 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4a>
   b5404:	2b2f      	cmp	r3, #47	; 0x2f
   b5406:	d016      	beq.n	b5436 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4a>
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   b5408:	2b5c      	cmp	r3, #92	; 0x5c
   b540a:	d102      	bne.n	b5412 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x26>
      break;
    }
    if (!lfnLegalChar(c)) {
      return false;
   b540c:	2000      	movs	r0, #0
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
}
   b540e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   b5412:	f1a3 0022 	sub.w	r0, r3, #34	; 0x22
   b5416:	b2c0      	uxtb	r0, r0
   b5418:	281d      	cmp	r0, #29
   b541a:	d803      	bhi.n	b5424 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x38>
   b541c:	fa25 f000 	lsr.w	r0, r5, r0
   b5420:	07c0      	lsls	r0, r0, #31
   b5422:	d4f3      	bmi.n	b540c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
      c == ':' || c == '<' || c == '>' || c == '?' || c == '|') {
   b5424:	f003 00bf 	and.w	r0, r3, #191	; 0xbf
   b5428:	283c      	cmp	r0, #60	; 0x3c
   b542a:	d0ef      	beq.n	b540c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
    if (!lfnLegalChar(c)) {
   b542c:	3b20      	subs	r3, #32
   b542e:	2b5e      	cmp	r3, #94	; 0x5e
   b5430:	d8ec      	bhi.n	b540c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
  for (len = 0; ; len++) {
   b5432:	3401      	adds	r4, #1
    c = path[len];
   b5434:	e7e4      	b.n	b5400 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x14>
   b5436:	1933      	adds	r3, r6, r4
  for (len = 0; ; len++) {
   b5438:	4618      	mov	r0, r3
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
   b543a:	4607      	mov	r7, r0
   b543c:	f810 5b01 	ldrb.w	r5, [r0], #1
   b5440:	2d20      	cmp	r5, #32
   b5442:	d0fa      	beq.n	b543a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4e>
   b5444:	2d2f      	cmp	r5, #47	; 0x2f
   b5446:	d0f8      	beq.n	b543a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4e>
  *ptr = &path[end];
   b5448:	6017      	str	r7, [r2, #0]
  while (len) {
   b544a:	b14c      	cbz	r4, b5460 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x74>
    c = path[len - 1];
   b544c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
    if (c != '.' && c != ' ') {
   b5450:	2a2e      	cmp	r2, #46	; 0x2e
   b5452:	d001      	beq.n	b5458 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x6c>
   b5454:	2a20      	cmp	r2, #32
   b5456:	d101      	bne.n	b545c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x70>
    len--;
   b5458:	3c01      	subs	r4, #1
  while (len) {
   b545a:	e7f6      	b.n	b544a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x5e>
  if (len > 255) {
   b545c:	2cff      	cmp	r4, #255	; 0xff
   b545e:	dcd5      	bgt.n	b540c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
    fname->sfn[k] = ' ';
   b5460:	f04f 3320 	mov.w	r3, #538976288	; 0x20202020
   b5464:	f8c1 3011 	str.w	r3, [r1, #17]
  fname->len = len;
   b5468:	604c      	str	r4, [r1, #4]
    fname->sfn[k] = ' ';
   b546a:	f8c1 300d 	str.w	r3, [r1, #13]
   b546e:	614b      	str	r3, [r1, #20]
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
   b5470:	f04f 0800 	mov.w	r8, #0
   b5474:	f816 3008 	ldrb.w	r3, [r6, r8]
   b5478:	2b2e      	cmp	r3, #46	; 0x2e
   b547a:	d001      	beq.n	b5480 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x94>
   b547c:	2b20      	cmp	r3, #32
   b547e:	d102      	bne.n	b5486 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x9a>
   b5480:	f108 0801 	add.w	r8, r8, #1
   b5484:	e7f6      	b.n	b5474 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x88>
  is83 = !si;
   b5486:	fab8 f088 	clz	r0, r8
   b548a:	0940      	lsrs	r0, r0, #5
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
   b548c:	1e65      	subs	r5, r4, #1
   b548e:	1c6b      	adds	r3, r5, #1
   b5490:	d002      	beq.n	b5498 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xac>
   b5492:	5d73      	ldrb	r3, [r6, r5]
   b5494:	2b2e      	cmp	r3, #46	; 0x2e
   b5496:	d114      	bne.n	b54c2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd6>
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
   b5498:	f04f 0900 	mov.w	r9, #0
   b549c:	2707      	movs	r7, #7
   b549e:	464a      	mov	r2, r9
   b54a0:	46ca      	mov	sl, r9
   b54a2:	f04f 0e08 	mov.w	lr, #8
  for (; si < len; si++) {
   b54a6:	45a0      	cmp	r8, r4
   b54a8:	da68      	bge.n	b557c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x190>
    c = path[si];
   b54aa:	f816 3008 	ldrb.w	r3, [r6, r8]
    if (c == ' ' || (c == '.' && dot != si)) {
   b54ae:	2b20      	cmp	r3, #32
   b54b0:	d003      	beq.n	b54ba <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xce>
   b54b2:	2b2e      	cmp	r3, #46	; 0x2e
   b54b4:	d107      	bne.n	b54c6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xda>
   b54b6:	45a8      	cmp	r8, r5
   b54b8:	d012      	beq.n	b54e0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf4>
      is83 = false;
   b54ba:	2000      	movs	r0, #0
  for (; si < len; si++) {
   b54bc:	f108 0801 	add.w	r8, r8, #1
   b54c0:	e7f1      	b.n	b54a6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xba>
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
   b54c2:	3d01      	subs	r5, #1
   b54c4:	e7e3      	b.n	b548e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xa2>
    if (c == '"' || c == '|') {
   b54c6:	2b22      	cmp	r3, #34	; 0x22
   b54c8:	d008      	beq.n	b54dc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf0>
   b54ca:	2b7c      	cmp	r3, #124	; 0x7c
   b54cc:	d006      	beq.n	b54dc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf0>
    if (0X2A <= c && c <= 0X2F && c != 0X2D) {
   b54ce:	f1a3 0c2a 	sub.w	ip, r3, #42	; 0x2a
   b54d2:	f1bc 0f05 	cmp.w	ip, #5
   b54d6:	d80a      	bhi.n	b54ee <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x102>
   b54d8:	2b2d      	cmp	r3, #45	; 0x2d
   b54da:	d012      	beq.n	b5502 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x116>
    if (!legal83Char(c) && si != dot) {
   b54dc:	45a8      	cmp	r8, r5
   b54de:	d15b      	bne.n	b5598 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1ac>
      if (in == 10) {
   b54e0:	2f0a      	cmp	r7, #10
   b54e2:	d04a      	beq.n	b557a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x18e>
      in = 10;  // Max index for full 8.3 name.
   b54e4:	270a      	movs	r7, #10
      i = 8;    // Place for extension.
   b54e6:	2208      	movs	r2, #8
      bit = DIR_NT_LC_EXT;  // bit for extension.
   b54e8:	f04f 0e10 	mov.w	lr, #16
   b54ec:	e7e6      	b.n	b54bc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd0>
    if (0X3A <= c && c <= 0X3F) {
   b54ee:	f1a3 0c3a 	sub.w	ip, r3, #58	; 0x3a
   b54f2:	f1bc 0f05 	cmp.w	ip, #5
   b54f6:	d9f1      	bls.n	b54dc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf0>
    if (0X5B <= c && c <= 0X5D) {
   b54f8:	f1a3 0c5b 	sub.w	ip, r3, #91	; 0x5b
   b54fc:	f1bc 0f02 	cmp.w	ip, #2
   b5500:	d9ec      	bls.n	b54dc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf0>
    if (!legal83Char(c) && si != dot) {
   b5502:	f1a3 0c21 	sub.w	ip, r3, #33	; 0x21
   b5506:	f1bc 0f5d 	cmp.w	ip, #93	; 0x5d
   b550a:	d8e7      	bhi.n	b54dc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf0>
    if (si == dot || i > in) {
   b550c:	45a8      	cmp	r8, r5
   b550e:	d0e7      	beq.n	b54e0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf4>
   b5510:	42ba      	cmp	r2, r7
   b5512:	d830      	bhi.n	b5576 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x18a>
      if ('a' <= c && c <= 'z') {
   b5514:	f1a3 0c61 	sub.w	ip, r3, #97	; 0x61
   b5518:	f1bc 0f19 	cmp.w	ip, #25
   b551c:	d81a      	bhi.n	b5554 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x168>
        c += 'A' - 'a';
   b551e:	3b20      	subs	r3, #32
        lc |= bit;
   b5520:	ea4e 0909 	orr.w	r9, lr, r9
        c += 'A' - 'a';
   b5524:	b2db      	uxtb	r3, r3
        lc |= bit;
   b5526:	fa5f f989 	uxtb.w	r9, r9
      fname->sfn[i++] = c;
   b552a:	f102 0c01 	add.w	ip, r2, #1
   b552e:	fa5f fc8c 	uxtb.w	ip, ip
   b5532:	440a      	add	r2, r1
      if (i < 7) {
   b5534:	f1bc 0f06 	cmp.w	ip, #6
      fname->sfn[i++] = c;
   b5538:	7353      	strb	r3, [r2, #13]
      if (i < 7) {
   b553a:	d801      	bhi.n	b5540 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x154>
        fname->seqPos = i;
   b553c:	f881 c00c 	strb.w	ip, [r1, #12]
   b5540:	4662      	mov	r2, ip
   b5542:	e7bb      	b.n	b54bc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd0>
      if (si > dot) {
   b5544:	45a8      	cmp	r8, r5
   b5546:	dc18      	bgt.n	b557a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x18e>
   b5548:	46a8      	mov	r8, r5
      in = 10;  // Max index for full 8.3 name.
   b554a:	270a      	movs	r7, #10
      i = 8;    // Place for extension.
   b554c:	2208      	movs	r2, #8
      bit = DIR_NT_LC_EXT;  // bit for extension.
   b554e:	f04f 0e10 	mov.w	lr, #16
   b5552:	e7b2      	b.n	b54ba <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xce>
      } else if ('A' <= c && c <= 'Z') {
   b5554:	f1a3 0c41 	sub.w	ip, r3, #65	; 0x41
   b5558:	f1bc 0f19 	cmp.w	ip, #25
        uc |= bit;
   b555c:	bf98      	it	ls
   b555e:	ea4e 0a0a 	orrls.w	sl, lr, sl
   b5562:	e7e2      	b.n	b552a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x13e>
    fname->sfn[fname->seqPos] = '~';
   b5564:	7b0b      	ldrb	r3, [r1, #12]
    fname->flags = FNAME_FLAG_LOST_CHARS;
   b5566:	2001      	movs	r0, #1
   b5568:	7008      	strb	r0, [r1, #0]
    fname->sfn[fname->seqPos] = '~';
   b556a:	4419      	add	r1, r3
   b556c:	237e      	movs	r3, #126	; 0x7e
   b556e:	734b      	strb	r3, [r1, #13]
    fname->sfn[fname->seqPos + 1] = '1';
   b5570:	2331      	movs	r3, #49	; 0x31
   b5572:	738b      	strb	r3, [r1, #14]
   b5574:	e74b      	b.n	b540e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x22>
      if (in == 10) {
   b5576:	2f0a      	cmp	r7, #10
   b5578:	d1e4      	bne.n	b5544 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x158>
        is83 = false;
   b557a:	2000      	movs	r0, #0
  if (fname->sfn[0] == ' ') {
   b557c:	7b4b      	ldrb	r3, [r1, #13]
   b557e:	2b20      	cmp	r3, #32
   b5580:	f43f af44 	beq.w	b540c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
  if (is83) {
   b5584:	2800      	cmp	r0, #0
   b5586:	d0ed      	beq.n	b5564 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x178>
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
   b5588:	ea1a 0f09 	tst.w	sl, r9
   b558c:	bf18      	it	ne
   b558e:	f04f 0902 	movne.w	r9, #2
   b5592:	f881 9000 	strb.w	r9, [r1]
   b5596:	e73a      	b.n	b540e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x22>
    if (si == dot || i > in) {
   b5598:	42ba      	cmp	r2, r7
   b559a:	d8ec      	bhi.n	b5576 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x18a>
      is83 = false;
   b559c:	2000      	movs	r0, #0
      c = '_';
   b559e:	235f      	movs	r3, #95	; 0x5f
   b55a0:	e7c3      	b.n	b552a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x13e>
   b55a2:	bf00      	nop
   b55a4:	31000101 	.word	0x31000101

000b55a8 <_ZN7FatFile6removeEv>:

fail:
  return 0;
}
//------------------------------------------------------------------------------
bool FatFile::remove() {
   b55a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b55ac:	b08a      	sub	sp, #40	; 0x28
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   b55ae:	2300      	movs	r3, #0
   b55b0:	9301      	str	r3, [sp, #4]
  FatFile dirFile;
  dir_t* dir;
  ldir_t* ldir;

  // Cant' remove not open for write.
  if (!isFile() || !(m_flags & F_WRITE)) {
   b55b2:	7803      	ldrb	r3, [r0, #0]
   b55b4:	0719      	lsls	r1, r3, #28
bool FatFile::remove() {
   b55b6:	4604      	mov	r4, r0
  if (!isFile() || !(m_flags & F_WRITE)) {
   b55b8:	d50a      	bpl.n	b55d0 <_ZN7FatFile6removeEv+0x28>
   b55ba:	7883      	ldrb	r3, [r0, #2]
   b55bc:	079a      	lsls	r2, r3, #30
   b55be:	d507      	bpl.n	b55d0 <_ZN7FatFile6removeEv+0x28>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Free any clusters.
  if (m_firstCluster && !m_vol->freeChain(m_firstCluster)) {
   b55c0:	6a01      	ldr	r1, [r0, #32]
   b55c2:	b939      	cbnz	r1, b55d4 <_ZN7FatFile6removeEv+0x2c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Cache directory entry.
  dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
   b55c4:	2101      	movs	r1, #1
   b55c6:	4620      	mov	r0, r4
   b55c8:	f000 fad2 	bl	b5b70 <_ZN7FatFile13cacheDirEntryEh>
  if (!dir) {
   b55cc:	4605      	mov	r5, r0
   b55ce:	b938      	cbnz	r0, b55e0 <_ZN7FatFile6removeEv+0x38>
  }
  // Fall into fail.
  DBG_FAIL_MACRO;

fail:
  return false;
   b55d0:	2000      	movs	r0, #0
   b55d2:	e048      	b.n	b5666 <_ZN7FatFile6removeEv+0xbe>
  if (m_firstCluster && !m_vol->freeChain(m_firstCluster)) {
   b55d4:	6880      	ldr	r0, [r0, #8]
   b55d6:	f000 fffe 	bl	b65d6 <_ZN9FatVolume9freeChainEm>
   b55da:	2800      	cmp	r0, #0
   b55dc:	d1f2      	bne.n	b55c4 <_ZN7FatFile6removeEv+0x1c>
   b55de:	e7f7      	b.n	b55d0 <_ZN7FatFile6removeEv+0x28>
  chksum = lfnChecksum(dir->name);
   b55e0:	f7ff fe6f 	bl	b52c2 <_ZN7FatFile11lfnChecksumEPh>
  dir->name[0] = DIR_NAME_DELETED;
   b55e4:	27e5      	movs	r7, #229	; 0xe5
   b55e6:	702f      	strb	r7, [r5, #0]
  m_attr = FILE_ATTR_CLOSED;
   b55e8:	2300      	movs	r3, #0
  chksum = lfnChecksum(dir->name);
   b55ea:	4606      	mov	r6, r0
  m_attr = FILE_ATTR_CLOSED;
   b55ec:	7023      	strb	r3, [r4, #0]
  if (!m_vol->cacheSync()) {
   b55ee:	68a0      	ldr	r0, [r4, #8]
   b55f0:	f7ff fe5a 	bl	b52a8 <_ZN9FatVolume9cacheSyncEv>
   b55f4:	2800      	cmp	r0, #0
   b55f6:	d0eb      	beq.n	b55d0 <_ZN7FatFile6removeEv+0x28>
  if (!isLFN()) {
   b55f8:	78e3      	ldrb	r3, [r4, #3]
   b55fa:	2b00      	cmp	r3, #0
   b55fc:	d033      	beq.n	b5666 <_ZN7FatFile6removeEv+0xbe>
  if (!dirFile.openCluster(this)) {
   b55fe:	4621      	mov	r1, r4
   b5600:	a801      	add	r0, sp, #4
   b5602:	f7ff fe6d 	bl	b52e0 <_ZN7FatFile11openClusterEPS_>
   b5606:	2800      	cmp	r0, #0
   b5608:	d0e2      	beq.n	b55d0 <_ZN7FatFile6removeEv+0x28>
   b560a:	2501      	movs	r5, #1
  for (ord = 1; ord <= m_lfnOrd; ord++) {
   b560c:	78e3      	ldrb	r3, [r4, #3]
   b560e:	fa5f f885 	uxtb.w	r8, r5
   b5612:	4543      	cmp	r3, r8
   b5614:	d3dc      	bcc.n	b55d0 <_ZN7FatFile6removeEv+0x28>
    if (!dirFile.seekSet(32UL*(m_dirIndex - ord))) {
   b5616:	88a1      	ldrh	r1, [r4, #4]
   b5618:	1b49      	subs	r1, r1, r5
   b561a:	0149      	lsls	r1, r1, #5
   b561c:	a801      	add	r0, sp, #4
   b561e:	f000 fbc7 	bl	b5db0 <_ZN7FatFile7seekSetEm>
   b5622:	2800      	cmp	r0, #0
   b5624:	d0d4      	beq.n	b55d0 <_ZN7FatFile6removeEv+0x28>
    ldir = reinterpret_cast<ldir_t*>(dirFile.readDirCache());
   b5626:	2100      	movs	r1, #0
   b5628:	a801      	add	r0, sp, #4
   b562a:	f000 fba2 	bl	b5d72 <_ZN7FatFile12readDirCacheEb>
    if (!ldir) {
   b562e:	2800      	cmp	r0, #0
   b5630:	d0ce      	beq.n	b55d0 <_ZN7FatFile6removeEv+0x28>
    if (ldir->attr != DIR_ATT_LONG_NAME ||
   b5632:	7ac3      	ldrb	r3, [r0, #11]
   b5634:	2b0f      	cmp	r3, #15
   b5636:	d1cb      	bne.n	b55d0 <_ZN7FatFile6removeEv+0x28>
        ord != (ldir->ord & 0X1F) ||
   b5638:	7802      	ldrb	r2, [r0, #0]
    if (ldir->attr != DIR_ATT_LONG_NAME ||
   b563a:	f002 031f 	and.w	r3, r2, #31
   b563e:	4543      	cmp	r3, r8
   b5640:	d1c6      	bne.n	b55d0 <_ZN7FatFile6removeEv+0x28>
        ord != (ldir->ord & 0X1F) ||
   b5642:	7b43      	ldrb	r3, [r0, #13]
   b5644:	42b3      	cmp	r3, r6
   b5646:	d1c3      	bne.n	b55d0 <_ZN7FatFile6removeEv+0x28>
    ldir->ord = DIR_NAME_DELETED;
   b5648:	7007      	strb	r7, [r0, #0]
    m_vol->cacheDirty();
   b564a:	68a1      	ldr	r1, [r4, #8]
    m_status |= CACHE_STATUS_DIRTY;
   b564c:	f891 3024 	ldrb.w	r3, [r1, #36]	; 0x24
   b5650:	f043 0301 	orr.w	r3, r3, #1
   b5654:	f881 3024 	strb.w	r3, [r1, #36]	; 0x24
    if (last) {
   b5658:	0653      	lsls	r3, r2, #25
   b565a:	f105 0501 	add.w	r5, r5, #1
   b565e:	d5d5      	bpl.n	b560c <_ZN7FatFile6removeEv+0x64>
      if (!m_vol->cacheSync()) {
   b5660:	68a0      	ldr	r0, [r4, #8]
   b5662:	f7ff fe21 	bl	b52a8 <_ZN9FatVolume9cacheSyncEv>
}
   b5666:	b00a      	add	sp, #40	; 0x28
   b5668:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b566c <_ZN7FatFile12lfnUniqueSfnEP7fname_t>:
//------------------------------------------------------------------------------
bool FatFile::lfnUniqueSfn(fname_t* fname) {
   b566c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;;
   b5670:	f891 900c 	ldrb.w	r9, [r1, #12]
bool FatFile::lfnUniqueSfn(fname_t* fname) {
   b5674:	4606      	mov	r6, r0
   b5676:	460c      	mov	r4, r1
  uint8_t pos = fname->seqPos;;
   b5678:	2502      	movs	r5, #2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
        hex >>= 4;
      }
    }
    fname->sfn[pos] = '~';
   b567a:	277e      	movs	r7, #126	; 0x7e
        goto fail;
      }
      if (dir->name[0] == DIR_NAME_FREE) {
        goto done;
      }
      if (DIR_IS_FILE_OR_SUBDIR(dir) && !memcmp(fname->sfn, dir->name, 11)) {
   b567c:	f101 080d 	add.w	r8, r1, #13
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
   b5680:	6861      	ldr	r1, [r4, #4]
   b5682:	68a2      	ldr	r2, [r4, #8]
   b5684:	186b      	adds	r3, r5, r1
   b5686:	b29b      	uxth	r3, r3
  for (size_t i = 0; i < len; i++) {
   b5688:	4411      	add	r1, r2
   b568a:	4291      	cmp	r1, r2
   b568c:	d006      	beq.n	b569c <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x30>
    hash = ((hash << 5) + hash) ^ str[i];
   b568e:	f812 0b01 	ldrb.w	r0, [r2], #1
   b5692:	eb03 1343 	add.w	r3, r3, r3, lsl #5
   b5696:	4043      	eors	r3, r0
   b5698:	b29b      	uxth	r3, r3
  for (size_t i = 0; i < len; i++) {
   b569a:	e7f6      	b.n	b568a <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x1e>
      if (pos > 3) {
   b569c:	f1b9 0f03 	cmp.w	r9, #3
   b56a0:	bf28      	it	cs
   b56a2:	f04f 0903 	movcs.w	r9, #3
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   b56a6:	f109 0204 	add.w	r2, r9, #4
   b56aa:	b2d2      	uxtb	r2, r2
        uint8_t h = hex & 0XF;
   b56ac:	f003 010f 	and.w	r1, r3, #15
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   b56b0:	18a0      	adds	r0, r4, r2
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   b56b2:	3a01      	subs	r2, #1
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   b56b4:	2909      	cmp	r1, #9
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   b56b6:	b2d2      	uxtb	r2, r2
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   b56b8:	bf94      	ite	ls
   b56ba:	3130      	addls	r1, #48	; 0x30
   b56bc:	3137      	addhi	r1, #55	; 0x37
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   b56be:	4591      	cmp	r9, r2
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   b56c0:	7341      	strb	r1, [r0, #13]
        hex >>= 4;
   b56c2:	ea4f 1313 	mov.w	r3, r3, lsr #4
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   b56c6:	d1f1      	bne.n	b56ac <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x40>
    fname->sfn[pos] = '~';
   b56c8:	eb04 0309 	add.w	r3, r4, r9
    seekSet(0);
   b56cc:	2100      	movs	r1, #0
   b56ce:	735f      	strb	r7, [r3, #13]
   b56d0:	4630      	mov	r0, r6
   b56d2:	f000 fb6d 	bl	b5db0 <_ZN7FatFile7seekSetEm>
      dir = readDirCache(true);
   b56d6:	2101      	movs	r1, #1
   b56d8:	4630      	mov	r0, r6
   b56da:	f000 fb4a 	bl	b5d72 <_ZN7FatFile12readDirCacheEb>
      if (!dir) {
   b56de:	4601      	mov	r1, r0
   b56e0:	b928      	cbnz	r0, b56ee <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x82>
        if (!getError()) {
   b56e2:	7870      	ldrb	r0, [r6, #1]
   b56e4:	fab0 f080 	clz	r0, r0
   b56e8:	0940      	lsrs	r0, r0, #5
fail:
  return false;

done:
  return true;
}
   b56ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (dir->name[0] == DIR_NAME_FREE) {
   b56ee:	7803      	ldrb	r3, [r0, #0]
   b56f0:	b16b      	cbz	r3, b570e <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0xa2>
      if (DIR_IS_FILE_OR_SUBDIR(dir) && !memcmp(fname->sfn, dir->name, 11)) {
   b56f2:	7ac3      	ldrb	r3, [r0, #11]
   b56f4:	071b      	lsls	r3, r3, #28
   b56f6:	d4ee      	bmi.n	b56d6 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x6a>
   b56f8:	220b      	movs	r2, #11
   b56fa:	4640      	mov	r0, r8
   b56fc:	f004 f868 	bl	b97d0 <memcmp>
   b5700:	2800      	cmp	r0, #0
   b5702:	d1e8      	bne.n	b56d6 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x6a>
  for (uint8_t seq = 2; seq < 100; seq++) {
   b5704:	3501      	adds	r5, #1
   b5706:	b2ad      	uxth	r5, r5
   b5708:	2d64      	cmp	r5, #100	; 0x64
   b570a:	d1b9      	bne.n	b5680 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x14>
   b570c:	e7ed      	b.n	b56ea <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x7e>
  return true;
   b570e:	2001      	movs	r0, #1
   b5710:	e7eb      	b.n	b56ea <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x7e>
	...

000b5714 <_ZN7FatFile4openEPS_P7fname_ti>:
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   b5714:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5718:	ed2d 8b02 	vpush	{d8}
   b571c:	b08b      	sub	sp, #44	; 0x2c
   b571e:	460d      	mov	r5, r1
   b5720:	9306      	str	r3, [sp, #24]
  if (!dirFile->isDir() || isOpen()) {
   b5722:	780b      	ldrb	r3, [r1, #0]
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   b5724:	9007      	str	r0, [sp, #28]
  if (!dirFile->isDir() || isOpen()) {
   b5726:	f013 0f70 	tst.w	r3, #112	; 0x70
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   b572a:	4617      	mov	r7, r2
  if (!dirFile->isDir() || isOpen()) {
   b572c:	d105      	bne.n	b573a <_ZN7FatFile4openEPS_P7fname_ti+0x26>
  return false;
   b572e:	2000      	movs	r0, #0
}
   b5730:	b00b      	add	sp, #44	; 0x2c
   b5732:	ecbd 8b02 	vpop	{d8}
   b5736:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return m_attr;
   b573a:	9b07      	ldr	r3, [sp, #28]
   b573c:	781b      	ldrb	r3, [r3, #0]
  if (!dirFile->isDir() || isOpen()) {
   b573e:	2b00      	cmp	r3, #0
   b5740:	d1f5      	bne.n	b572e <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  size_t len = fname->len;
   b5742:	6853      	ldr	r3, [r2, #4]
   b5744:	9305      	str	r3, [sp, #20]
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
   b5746:	7813      	ldrb	r3, [r2, #0]
   b5748:	079c      	lsls	r4, r3, #30
   b574a:	bf1f      	itttt	ne
   b574c:	9b05      	ldrne	r3, [sp, #20]
   b574e:	330c      	addne	r3, #12
   b5750:	220d      	movne	r2, #13
   b5752:	fbb3 f3f2 	udivne	r3, r3, r2
   b5756:	bf1a      	itte	ne
   b5758:	3301      	addne	r3, #1
   b575a:	b2db      	uxtbne	r3, r3
   b575c:	2301      	moveq	r3, #1
    seekSet(0);
   b575e:	2100      	movs	r1, #0
   b5760:	4628      	mov	r0, r5
   b5762:	9303      	str	r3, [sp, #12]
   b5764:	f000 fb24 	bl	b5db0 <_ZN7FatFile7seekSetEm>
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
   b5768:	f107 030d 	add.w	r3, r7, #13
  }
   b576c:	f04f 0b00 	mov.w	fp, #0
   b5770:	ee08 3a10 	vmov	s16, r3
   b5774:	46da      	mov	sl, fp
   b5776:	465c      	mov	r4, fp
   b5778:	465e      	mov	r6, fp
   b577a:	f8cd b010 	str.w	fp, [sp, #16]
   b577e:	46d9      	mov	r9, fp
    curIndex = dirFile->m_curPosition/32;
   b5780:	696b      	ldr	r3, [r5, #20]
    dir = dirFile->readDirCache(true);
   b5782:	2101      	movs	r1, #1
   b5784:	4628      	mov	r0, r5
    curIndex = dirFile->m_curPosition/32;
   b5786:	f3c3 184f 	ubfx	r8, r3, #5, #16
    dir = dirFile->readDirCache(true);
   b578a:	f000 faf2 	bl	b5d72 <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
   b578e:	4603      	mov	r3, r0
   b5790:	2800      	cmp	r0, #0
   b5792:	d171      	bne.n	b5878 <_ZN7FatFile4openEPS_P7fname_ti+0x164>
      if (dirFile->getError()) {
   b5794:	786b      	ldrb	r3, [r5, #1]
   b5796:	2b00      	cmp	r3, #0
   b5798:	d1c9      	bne.n	b572e <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  if (!(oflag & O_CREAT) || !isWriteMode(oflag)) {
   b579a:	9b06      	ldr	r3, [sp, #24]
   b579c:	059a      	lsls	r2, r3, #22
   b579e:	d5c6      	bpl.n	b572e <_ZN7FatFile4openEPS_P7fname_ti+0x1a>

#define O_READ    O_RDONLY
#define O_WRITE   O_WRONLY

inline bool isWriteMode(oflag_t oflag) {
  oflag &= O_ACCMODE;
   b57a0:	f003 0303 	and.w	r3, r3, #3
  return oflag == O_WRONLY || oflag == O_RDWR;
   b57a4:	3b01      	subs	r3, #1
   b57a6:	2b01      	cmp	r3, #1
   b57a8:	d8c1      	bhi.n	b572e <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  if (freeFound == 0) {
   b57aa:	9b04      	ldr	r3, [sp, #16]
   b57ac:	2c00      	cmp	r4, #0
   b57ae:	bf08      	it	eq
   b57b0:	4643      	moveq	r3, r8
   b57b2:	9304      	str	r3, [sp, #16]
  while (freeFound < freeNeed) {
   b57b4:	9b03      	ldr	r3, [sp, #12]
   b57b6:	429c      	cmp	r4, r3
   b57b8:	f0c0 80f1 	bcc.w	b599e <_ZN7FatFile4openEPS_P7fname_ti+0x28a>
  if (fnameFound) {
   b57bc:	f1b9 0f00 	cmp.w	r9, #0
   b57c0:	f040 810a 	bne.w	b59d8 <_ZN7FatFile4openEPS_P7fname_ti+0x2c4>
  if (!dirFile->seekSet(32UL*freeIndex)) {
   b57c4:	9b04      	ldr	r3, [sp, #16]
   b57c6:	4628      	mov	r0, r5
   b57c8:	0159      	lsls	r1, r3, #5
   b57ca:	f000 faf1 	bl	b5db0 <_ZN7FatFile7seekSetEm>
   b57ce:	2800      	cmp	r0, #0
   b57d0:	d0ad      	beq.n	b572e <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  lfnOrd = freeNeed - 1;
   b57d2:	9b03      	ldr	r3, [sp, #12]
   b57d4:	f103 39ff 	add.w	r9, r3, #4294967295
   b57d8:	fa5f f989 	uxtb.w	r9, r9
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
   b57dc:	464e      	mov	r6, r9
    ldir = reinterpret_cast<ldir_t*>(dirFile->readDirCache());
   b57de:	f04f 0a00 	mov.w	sl, #0
    ldir->attr = DIR_ATT_LONG_NAME;
   b57e2:	f04f 080f 	mov.w	r8, #15
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
   b57e6:	2e00      	cmp	r6, #0
   b57e8:	f000 810d 	beq.w	b5a06 <_ZN7FatFile4openEPS_P7fname_ti+0x2f2>
    ldir = reinterpret_cast<ldir_t*>(dirFile->readDirCache());
   b57ec:	2100      	movs	r1, #0
   b57ee:	4628      	mov	r0, r5
   b57f0:	f000 fabf 	bl	b5d72 <_ZN7FatFile12readDirCacheEb>
    if (!ldir) {
   b57f4:	4604      	mov	r4, r0
   b57f6:	2800      	cmp	r0, #0
   b57f8:	d099      	beq.n	b572e <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
    dirFile->m_vol->cacheDirty();
   b57fa:	68aa      	ldr	r2, [r5, #8]
   b57fc:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
   b5800:	454e      	cmp	r6, r9
   b5802:	f043 0301 	orr.w	r3, r3, #1
   b5806:	bf0c      	ite	eq
   b5808:	f046 0b40 	orreq.w	fp, r6, #64	; 0x40
   b580c:	46b3      	movne	fp, r6
   b580e:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
   b5812:	f880 b000 	strb.w	fp, [r0]
    ldir->attr = DIR_ATT_LONG_NAME;
   b5816:	f880 800b 	strb.w	r8, [r0, #11]
    ldir->type = 0;
   b581a:	f880 a00c 	strb.w	sl, [r0, #12]
    ldir->chksum = lfnChecksum(fname->sfn);
   b581e:	f107 000d 	add.w	r0, r7, #13
   b5822:	f7ff fd4e 	bl	b52c2 <_ZN7FatFile11lfnChecksumEPh>
    ldir->mustBeZero = 0;
   b5826:	f884 a01a 	strb.w	sl, [r4, #26]
    ldir->chksum = lfnChecksum(fname->sfn);
   b582a:	7360      	strb	r0, [r4, #13]
    ldir->mustBeZero = 0;
   b582c:	f884 a01b 	strb.w	sl, [r4, #27]
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   b5830:	f00b 031f 	and.w	r3, fp, #31
   b5834:	220d      	movs	r2, #13
   b5836:	3b01      	subs	r3, #1
    lfnPutName(ldir, fname->lfn, len);
   b5838:	f8d7 c008 	ldr.w	ip, [r7, #8]
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   b583c:	4353      	muls	r3, r2
   b583e:	2200      	movs	r2, #0
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
   b5840:	9905      	ldr	r1, [sp, #20]
   b5842:	4299      	cmp	r1, r3
   b5844:	f240 80d0 	bls.w	b59e8 <_ZN7FatFile4openEPS_P7fname_ti+0x2d4>
   b5848:	f81c 1003 	ldrb.w	r1, [ip, r3]
  if (i < LDIR_NAME1_DIM) {
   b584c:	2a04      	cmp	r2, #4
   b584e:	fa5f fe82 	uxtb.w	lr, r2
   b5852:	f102 0001 	add.w	r0, r2, #1
   b5856:	f200 80cd 	bhi.w	b59f4 <_ZN7FatFile4openEPS_P7fname_ti+0x2e0>
    ldir->name1[i] = c;
   b585a:	eb04 0242 	add.w	r2, r4, r2, lsl #1
   b585e:	f8a2 1001 	strh.w	r1, [r2, #1]
  for (uint8_t i = 0; i < 13; i++, k++) {
   b5862:	280d      	cmp	r0, #13
   b5864:	f103 0301 	add.w	r3, r3, #1
   b5868:	4602      	mov	r2, r0
   b586a:	d1e9      	bne.n	b5840 <_ZN7FatFile4openEPS_P7fname_ti+0x12c>
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
   b586c:	3e01      	subs	r6, #1
   b586e:	b2f6      	uxtb	r6, r6
   b5870:	e7b9      	b.n	b57e6 <_ZN7FatFile4openEPS_P7fname_ti+0xd2>
        fnameFound = true;
   b5872:	f04f 0901 	mov.w	r9, #1
   b5876:	e783      	b.n	b5780 <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == DIR_NAME_FREE) {
   b5878:	7802      	ldrb	r2, [r0, #0]
   b587a:	2ae5      	cmp	r2, #229	; 0xe5
   b587c:	d000      	beq.n	b5880 <_ZN7FatFile4openEPS_P7fname_ti+0x16c>
   b587e:	b97a      	cbnz	r2, b58a0 <_ZN7FatFile4openEPS_P7fname_ti+0x18c>
    curIndex = dirFile->m_curPosition/32;
   b5880:	9904      	ldr	r1, [sp, #16]
   b5882:	2c00      	cmp	r4, #0
   b5884:	bf08      	it	eq
   b5886:	4641      	moveq	r1, r8
   b5888:	9104      	str	r1, [sp, #16]
      if (freeFound < freeNeed) {
   b588a:	9903      	ldr	r1, [sp, #12]
   b588c:	428c      	cmp	r4, r1
        freeFound++;
   b588e:	bf3c      	itt	cc
   b5890:	3401      	addcc	r4, #1
   b5892:	b2e4      	uxtbcc	r4, r4
      if (dir->name[0] == DIR_NAME_FREE) {
   b5894:	2a00      	cmp	r2, #0
   b5896:	d080      	beq.n	b579a <_ZN7FatFile4openEPS_P7fname_ti+0x86>
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == '.') {
   b5898:	2ae5      	cmp	r2, #229	; 0xe5
   b589a:	d105      	bne.n	b58a8 <_ZN7FatFile4openEPS_P7fname_ti+0x194>
      lfnOrd = 0;
   b589c:	2600      	movs	r6, #0
   b589e:	e76f      	b.n	b5780 <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
        freeFound = 0;
   b58a0:	9903      	ldr	r1, [sp, #12]
   b58a2:	428c      	cmp	r4, r1
   b58a4:	bf38      	it	cc
   b58a6:	2400      	movcc	r4, #0
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == '.') {
   b58a8:	2a2e      	cmp	r2, #46	; 0x2e
   b58aa:	d0f7      	beq.n	b589c <_ZN7FatFile4openEPS_P7fname_ti+0x188>
  return dir->attributes == DIR_ATT_LONG_NAME;
   b58ac:	7ad9      	ldrb	r1, [r3, #11]
    } else if (DIR_IS_LONG_NAME(dir)) {
   b58ae:	290f      	cmp	r1, #15
   b58b0:	d14a      	bne.n	b5948 <_ZN7FatFile4openEPS_P7fname_ti+0x234>
      if (!lfnOrd) {
   b58b2:	bb16      	cbnz	r6, b58fa <_ZN7FatFile4openEPS_P7fname_ti+0x1e6>
        if ((ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) == 0) {
   b58b4:	f012 0640 	ands.w	r6, r2, #64	; 0x40
   b58b8:	f43f af62 	beq.w	b5780 <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
        lfnOrd = ord = ldir->ord & 0X1F;
   b58bc:	f002 061f 	and.w	r6, r2, #31
        chksum = ldir->chksum;
   b58c0:	f893 b00d 	ldrb.w	fp, [r3, #13]
        lfnOrd = ord = ldir->ord & 0X1F;
   b58c4:	46b2      	mov	sl, r6
      size_t k = 13*(ord - 1);
   b58c6:	220d      	movs	r2, #13
   b58c8:	f10a 38ff 	add.w	r8, sl, #4294967295
   b58cc:	fb02 f808 	mul.w	r8, r2, r8
      if (k >= len) {
   b58d0:	9a05      	ldr	r2, [sp, #20]
   b58d2:	4542      	cmp	r2, r8
   b58d4:	d9e2      	bls.n	b589c <_ZN7FatFile4openEPS_P7fname_ti+0x188>
   b58d6:	eba2 0208 	sub.w	r2, r2, r8
   b58da:	9208      	str	r2, [sp, #32]
   b58dc:	2200      	movs	r2, #0
   b58de:	eb02 0108 	add.w	r1, r2, r8
   b58e2:	9109      	str	r1, [sp, #36]	; 0x24
        uint16_t u = lfnGetChar(ldir, i);
   b58e4:	4618      	mov	r0, r3
   b58e6:	b2d1      	uxtb	r1, r2
   b58e8:	f7ff fcca 	bl	b5280 <_ZL10lfnGetCharP18longDirectoryEntryh>
        if (k == len) {
   b58ec:	9908      	ldr	r1, [sp, #32]
   b58ee:	428a      	cmp	r2, r1
   b58f0:	d10d      	bne.n	b590e <_ZN7FatFile4openEPS_P7fname_ti+0x1fa>
            lfnOrd = 0;
   b58f2:	2800      	cmp	r0, #0
   b58f4:	bf18      	it	ne
   b58f6:	2600      	movne	r6, #0
   b58f8:	e742      	b.n	b5780 <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
      } else if (ldir->ord != --ord || chksum != ldir->chksum) {
   b58fa:	f10a 3aff 	add.w	sl, sl, #4294967295
   b58fe:	fa5f fa8a 	uxtb.w	sl, sl
   b5902:	4552      	cmp	r2, sl
   b5904:	d1ca      	bne.n	b589c <_ZN7FatFile4openEPS_P7fname_ti+0x188>
   b5906:	7b5a      	ldrb	r2, [r3, #13]
   b5908:	455a      	cmp	r2, fp
   b590a:	d0dc      	beq.n	b58c6 <_ZN7FatFile4openEPS_P7fname_ti+0x1b2>
   b590c:	e7c6      	b.n	b589c <_ZN7FatFile4openEPS_P7fname_ti+0x188>
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   b590e:	28ff      	cmp	r0, #255	; 0xff
   b5910:	d8c4      	bhi.n	b589c <_ZN7FatFile4openEPS_P7fname_ti+0x188>
   b5912:	fa5f fe80 	uxtb.w	lr, r0
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
   b5916:	f1ae 0141 	sub.w	r1, lr, #65	; 0x41
   b591a:	2919      	cmp	r1, #25
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   b591c:	68b9      	ldr	r1, [r7, #8]
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
   b591e:	bf9c      	itt	ls
   b5920:	f10e 0020 	addls.w	r0, lr, #32
   b5924:	fa5f fe80 	uxtbls.w	lr, r0
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   b5928:	4608      	mov	r0, r1
   b592a:	9909      	ldr	r1, [sp, #36]	; 0x24
   b592c:	5c41      	ldrb	r1, [r0, r1]
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
   b592e:	f1a1 0c41 	sub.w	ip, r1, #65	; 0x41
   b5932:	f1bc 0f19 	cmp.w	ip, #25
   b5936:	bf9c      	itt	ls
   b5938:	3120      	addls	r1, #32
   b593a:	b2c9      	uxtbls	r1, r1
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   b593c:	4571      	cmp	r1, lr
   b593e:	d1ad      	bne.n	b589c <_ZN7FatFile4openEPS_P7fname_ti+0x188>
      for (uint8_t i = 0; i < 13; i++) {
   b5940:	3201      	adds	r2, #1
   b5942:	2a0d      	cmp	r2, #13
   b5944:	d1cb      	bne.n	b58de <_ZN7FatFile4openEPS_P7fname_ti+0x1ca>
   b5946:	e71b      	b.n	b5780 <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
    } else if (DIR_IS_FILE_OR_SUBDIR(dir)) {
   b5948:	0708      	lsls	r0, r1, #28
   b594a:	d4a7      	bmi.n	b589c <_ZN7FatFile4openEPS_P7fname_ti+0x188>
      if (lfnOrd) {
   b594c:	b15e      	cbz	r6, b5966 <_ZN7FatFile4openEPS_P7fname_ti+0x252>
        if (1 == ord && lfnChecksum(dir->name) == chksum) {
   b594e:	f1ba 0f01 	cmp.w	sl, #1
   b5952:	f47f aeec 	bne.w	b572e <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
   b5956:	4618      	mov	r0, r3
   b5958:	f7ff fcb3 	bl	b52c2 <_ZN7FatFile11lfnChecksumEPh>
   b595c:	4558      	cmp	r0, fp
   b595e:	f47f aee6 	bne.w	b572e <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
   b5962:	46b1      	mov	r9, r6
   b5964:	e00e      	b.n	b5984 <_ZN7FatFile4openEPS_P7fname_ti+0x270>
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
   b5966:	ee18 1a10 	vmov	r1, s16
   b596a:	220b      	movs	r2, #11
   b596c:	4618      	mov	r0, r3
   b596e:	f003 ff2f 	bl	b97d0 <memcmp>
   b5972:	2800      	cmp	r0, #0
   b5974:	f47f af04 	bne.w	b5780 <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
        if (!(fname->flags & FNAME_FLAG_LOST_CHARS)) {
   b5978:	f897 9000 	ldrb.w	r9, [r7]
   b597c:	f019 0901 	ands.w	r9, r9, #1
   b5980:	f47f af77 	bne.w	b5872 <_ZN7FatFile4openEPS_P7fname_ti+0x15e>
  if (oflag & O_EXCL) {
   b5984:	9b06      	ldr	r3, [sp, #24]
   b5986:	0519      	lsls	r1, r3, #20
   b5988:	f53f aed1 	bmi.w	b572e <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  if (!openCachedEntry(dirFile, curIndex, oflag, lfnOrd)) {
   b598c:	9b06      	ldr	r3, [sp, #24]
   b598e:	9807      	ldr	r0, [sp, #28]
   b5990:	f8cd 9000 	str.w	r9, [sp]
   b5994:	4642      	mov	r2, r8
   b5996:	4629      	mov	r1, r5
   b5998:	f000 fa4d 	bl	b5e36 <_ZN7FatFile15openCachedEntryEPS_tih>
   b599c:	e6c8      	b.n	b5730 <_ZN7FatFile4openEPS_P7fname_ti+0x1c>
    dir = dirFile->readDirCache();
   b599e:	2100      	movs	r1, #0
   b59a0:	4628      	mov	r0, r5
   b59a2:	f000 f9e6 	bl	b5d72 <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
   b59a6:	b9a0      	cbnz	r0, b59d2 <_ZN7FatFile4openEPS_P7fname_ti+0x2be>
      if (dirFile->getError()) {
   b59a8:	786b      	ldrb	r3, [r5, #1]
   b59aa:	2b00      	cmp	r3, #0
   b59ac:	f47f aebf 	bne.w	b572e <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
    if (!dirFile->addDirCluster()) {
   b59b0:	4628      	mov	r0, r5
   b59b2:	f000 f89f 	bl	b5af4 <_ZN7FatFile13addDirClusterEv>
   b59b6:	2800      	cmp	r0, #0
   b59b8:	f43f aeb9 	beq.w	b572e <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
    return m_blocksPerCluster;
   b59bc:	68ab      	ldr	r3, [r5, #8]
    if (dirFile->m_vol->blocksPerCluster() > 1) {
   b59be:	791b      	ldrb	r3, [r3, #4]
   b59c0:	2b01      	cmp	r3, #1
   b59c2:	f63f aefb 	bhi.w	b57bc <_ZN7FatFile4openEPS_P7fname_ti+0xa8>
  while (freeFound < freeNeed) {
   b59c6:	9b03      	ldr	r3, [sp, #12]
    freeFound += 16;
   b59c8:	3410      	adds	r4, #16
   b59ca:	b2e4      	uxtb	r4, r4
  while (freeFound < freeNeed) {
   b59cc:	42a3      	cmp	r3, r4
   b59ce:	d8ef      	bhi.n	b59b0 <_ZN7FatFile4openEPS_P7fname_ti+0x29c>
   b59d0:	e6f4      	b.n	b57bc <_ZN7FatFile4openEPS_P7fname_ti+0xa8>
    freeFound++;
   b59d2:	3401      	adds	r4, #1
   b59d4:	b2e4      	uxtb	r4, r4
  while (freeFound < freeNeed) {
   b59d6:	e6ed      	b.n	b57b4 <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
    if (!dirFile->lfnUniqueSfn(fname)) {
   b59d8:	4639      	mov	r1, r7
   b59da:	4628      	mov	r0, r5
   b59dc:	f7ff fe46 	bl	b566c <_ZN7FatFile12lfnUniqueSfnEP7fname_t>
   b59e0:	2800      	cmp	r0, #0
   b59e2:	f47f aeef 	bne.w	b57c4 <_ZN7FatFile4openEPS_P7fname_ti+0xb0>
   b59e6:	e6a2      	b.n	b572e <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
   b59e8:	bf14      	ite	ne
   b59ea:	f04f 31ff 	movne.w	r1, #4294967295
   b59ee:	2100      	moveq	r1, #0
   b59f0:	b289      	uxth	r1, r1
   b59f2:	e72b      	b.n	b584c <_ZN7FatFile4openEPS_P7fname_ti+0x138>
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
   b59f4:	f1be 0f0a 	cmp.w	lr, #10
    ldir->name2[i - LDIR_NAME1_DIM] = c;
   b59f8:	bf94      	ite	ls
   b59fa:	eb04 0242 	addls.w	r2, r4, r2, lsl #1
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
   b59fe:	eb04 0240 	addhi.w	r2, r4, r0, lsl #1
   b5a02:	8091      	strh	r1, [r2, #4]
   b5a04:	e72d      	b.n	b5862 <_ZN7FatFile4openEPS_P7fname_ti+0x14e>
  dir = dirFile->readDirCache();
   b5a06:	4631      	mov	r1, r6
   b5a08:	4628      	mov	r0, r5
  curIndex = dirFile->m_curPosition/32;
   b5a0a:	f8d5 8014 	ldr.w	r8, [r5, #20]
  dir = dirFile->readDirCache();
   b5a0e:	f000 f9b0 	bl	b5d72 <_ZN7FatFile12readDirCacheEb>
  if (!dir) {
   b5a12:	4604      	mov	r4, r0
   b5a14:	2800      	cmp	r0, #0
   b5a16:	f43f ae8a 	beq.w	b572e <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  memset(dir, 0, sizeof(dir_t));
   b5a1a:	2220      	movs	r2, #32
   b5a1c:	4631      	mov	r1, r6
   b5a1e:	f003 fef5 	bl	b980c <memset>
  memcpy(dir->name, fname->sfn, 11);
   b5a22:	f8d7 300d 	ldr.w	r3, [r7, #13]
   b5a26:	6023      	str	r3, [r4, #0]
   b5a28:	f8d7 3011 	ldr.w	r3, [r7, #17]
   b5a2c:	6063      	str	r3, [r4, #4]
   b5a2e:	f8b7 3015 	ldrh.w	r3, [r7, #21]
   b5a32:	8123      	strh	r3, [r4, #8]
   b5a34:	7dfb      	ldrb	r3, [r7, #23]
   b5a36:	72a3      	strb	r3, [r4, #10]
  dir->reservedNT =  (DIR_NT_LC_BASE | DIR_NT_LC_EXT) & fname->flags;
   b5a38:	783b      	ldrb	r3, [r7, #0]
   b5a3a:	f003 0318 	and.w	r3, r3, #24
   b5a3e:	7323      	strb	r3, [r4, #12]
  if (m_dateTime) {
   b5a40:	4b0f      	ldr	r3, [pc, #60]	; (b5a80 <_ZN7FatFile4openEPS_P7fname_ti+0x36c>)
   b5a42:	681b      	ldr	r3, [r3, #0]
   b5a44:	b19b      	cbz	r3, b5a6e <_ZN7FatFile4openEPS_P7fname_ti+0x35a>
    m_dateTime(&dir->creationDate, &dir->creationTime);
   b5a46:	f104 010e 	add.w	r1, r4, #14
   b5a4a:	f104 0010 	add.w	r0, r4, #16
   b5a4e:	4798      	blx	r3
  dir->lastAccessDate = dir->creationDate;
   b5a50:	8a23      	ldrh	r3, [r4, #16]
   b5a52:	8263      	strh	r3, [r4, #18]
  dir->lastWriteDate = dir->creationDate;
   b5a54:	8323      	strh	r3, [r4, #24]
  dir->lastWriteTime = dir->creationTime;
   b5a56:	89e3      	ldrh	r3, [r4, #14]
   b5a58:	82e3      	strh	r3, [r4, #22]
  dirFile->m_vol->cacheDirty();
   b5a5a:	68aa      	ldr	r2, [r5, #8]
    m_status |= CACHE_STATUS_DIRTY;
   b5a5c:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
   b5a60:	f043 0301 	orr.w	r3, r3, #1
  curIndex = dirFile->m_curPosition/32;
   b5a64:	f3c8 184f 	ubfx	r8, r8, #5, #16
   b5a68:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
  uint32_t cacheBlockNumber() {
    return m_cache.lbn();
  }
  void cacheDirty() {
    m_cache.dirty();
  }
   b5a6c:	e78e      	b.n	b598c <_ZN7FatFile4openEPS_P7fname_ti+0x278>
    dir->creationDate = FAT_DEFAULT_DATE;
   b5a6e:	2321      	movs	r3, #33	; 0x21
   b5a70:	7423      	strb	r3, [r4, #16]
   b5a72:	2328      	movs	r3, #40	; 0x28
   b5a74:	7463      	strb	r3, [r4, #17]
    dir->creationTime = FAT_DEFAULT_TIME;
   b5a76:	2308      	movs	r3, #8
   b5a78:	73a6      	strb	r6, [r4, #14]
   b5a7a:	73e3      	strb	r3, [r4, #15]
   b5a7c:	e7e8      	b.n	b5a50 <_ZN7FatFile4openEPS_P7fname_ti+0x33c>
   b5a7e:	bf00      	nop
   b5a80:	2003e678 	.word	0x2003e678

000b5a84 <_ZN7FatFile6getSFNEPc>:
 * DEALINGS IN THE SOFTWARE.
 */
#include "FatFile.h"
#include "FatFileSystem.h"
//------------------------------------------------------------------------------
bool FatFile::getSFN(char* name) {
   b5a84:	b510      	push	{r4, lr}
   b5a86:	460c      	mov	r4, r1
    return m_attr;
   b5a88:	7801      	ldrb	r1, [r0, #0]
  dir_t* dir;
  if (!isOpen()) {
   b5a8a:	b909      	cbnz	r1, b5a90 <_ZN7FatFile6getSFNEPc+0xc>
  // format name
  dirName(dir, name);
  return true;

fail:
  return false;
   b5a8c:	2000      	movs	r0, #0
}
   b5a8e:	bd10      	pop	{r4, pc}
  if (isRoot()) {
   b5a90:	f011 0160 	ands.w	r1, r1, #96	; 0x60
   b5a94:	d005      	beq.n	b5aa2 <_ZN7FatFile6getSFNEPc+0x1e>
    name[0] = '/';
   b5a96:	232f      	movs	r3, #47	; 0x2f
   b5a98:	7023      	strb	r3, [r4, #0]
    name[1] = '\0';
   b5a9a:	2300      	movs	r3, #0
   b5a9c:	7063      	strb	r3, [r4, #1]
  return true;
   b5a9e:	2001      	movs	r0, #1
   b5aa0:	e7f5      	b.n	b5a8e <_ZN7FatFile6getSFNEPc+0xa>
  dir = cacheDirEntry(FatCache::CACHE_FOR_READ);
   b5aa2:	f000 f865 	bl	b5b70 <_ZN7FatFile13cacheDirEntryEh>
  if (!dir) {
   b5aa6:	2800      	cmp	r0, #0
   b5aa8:	d0f0      	beq.n	b5a8c <_ZN7FatFile6getSFNEPc+0x8>
  dirName(dir, name);
   b5aaa:	4621      	mov	r1, r4
   b5aac:	f000 f86f 	bl	b5b8e <_ZN7FatFile7dirNameEPK14directoryEntryPc>
   b5ab0:	e7f5      	b.n	b5a9e <_ZN7FatFile6getSFNEPc+0x1a>

000b5ab2 <_ZN7FatFile8openRootEP9FatVolume.part.0>:
fail:
  return false;
}
#endif  // DOXYGEN_SHOULD_SKIP_THIS
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
   b5ab2:	b538      	push	{r3, r4, r5, lr}
   b5ab4:	4604      	mov	r4, r0
   b5ab6:	460d      	mov	r5, r1
  // error if file is already open
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(FatFile));
   b5ab8:	2224      	movs	r2, #36	; 0x24
   b5aba:	2100      	movs	r1, #0
   b5abc:	f003 fea6 	bl	b980c <memset>

  m_vol = vol;
   b5ac0:	60a5      	str	r5, [r4, #8]
    return m_fatType;
   b5ac2:	79eb      	ldrb	r3, [r5, #7]
  switch (vol->fatType()) {
   b5ac4:	2b10      	cmp	r3, #16
   b5ac6:	d003      	beq.n	b5ad0 <_ZN7FatFile8openRootEP9FatVolume.part.0+0x1e>
   b5ac8:	2b20      	cmp	r3, #32
   b5aca:	d006      	beq.n	b5ada <_ZN7FatFile8openRootEP9FatVolume.part.0+0x28>
   b5acc:	2000      	movs	r0, #0
  m_flags = F_READ;
  return true;

fail:
  return false;
}
   b5ace:	bd38      	pop	{r3, r4, r5, pc}
    m_attr = FILE_ATTR_ROOT_FIXED;
   b5ad0:	2320      	movs	r3, #32
  m_flags = F_READ;
   b5ad2:	2001      	movs	r0, #1
    m_attr = FILE_ATTR_ROOT32;
   b5ad4:	7023      	strb	r3, [r4, #0]
  m_flags = F_READ;
   b5ad6:	70a0      	strb	r0, [r4, #2]
  return true;
   b5ad8:	e7f9      	b.n	b5ace <_ZN7FatFile8openRootEP9FatVolume.part.0+0x1c>
    m_attr = FILE_ATTR_ROOT32;
   b5ada:	2340      	movs	r3, #64	; 0x40
   b5adc:	e7f9      	b.n	b5ad2 <_ZN7FatFile8openRootEP9FatVolume.part.0+0x20>

000b5ade <_ZN7FatFile10addClusterEv>:
  m_flags |= F_FILE_DIR_DIRTY;
   b5ade:	7883      	ldrb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
   b5ae0:	6901      	ldr	r1, [r0, #16]
  m_flags |= F_FILE_DIR_DIRTY;
   b5ae2:	f043 0304 	orr.w	r3, r3, #4
   b5ae6:	7083      	strb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
   b5ae8:	f100 0210 	add.w	r2, r0, #16
   b5aec:	6880      	ldr	r0, [r0, #8]
   b5aee:	f000 bd37 	b.w	b6560 <_ZN9FatVolume15allocateClusterEmPm>
	...

000b5af4 <_ZN7FatFile13addDirClusterEv>:
bool FatFile::addDirCluster() {
   b5af4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (isRootFixed()) {
   b5af8:	7801      	ldrb	r1, [r0, #0]
   b5afa:	f011 0520 	ands.w	r5, r1, #32
bool FatFile::addDirCluster() {
   b5afe:	4604      	mov	r4, r0
  if (isRootFixed()) {
   b5b00:	d003      	beq.n	b5b0a <_ZN7FatFile13addDirClusterEv+0x16>
  return false;
   b5b02:	2600      	movs	r6, #0
}
   b5b04:	4630      	mov	r0, r6
   b5b06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (m_curPosition >= 512UL*4095) {
   b5b0a:	6942      	ldr	r2, [r0, #20]
   b5b0c:	4b17      	ldr	r3, [pc, #92]	; (b5b6c <_ZN7FatFile13addDirClusterEv+0x78>)
   b5b0e:	429a      	cmp	r2, r3
   b5b10:	d2f7      	bcs.n	b5b02 <_ZN7FatFile13addDirClusterEv+0xe>
  if (!addCluster()) {
   b5b12:	f7ff ffe4 	bl	b5ade <_ZN7FatFile10addClusterEv>
   b5b16:	4606      	mov	r6, r0
   b5b18:	2800      	cmp	r0, #0
   b5b1a:	d0f2      	beq.n	b5b02 <_ZN7FatFile13addDirClusterEv+0xe>
  block = m_vol->clusterFirstBlock(m_curCluster);
   b5b1c:	6921      	ldr	r1, [r4, #16]
   b5b1e:	68a0      	ldr	r0, [r4, #8]
   b5b20:	f000 fcb3 	bl	b648a <_ZNK9FatVolume17clusterFirstBlockEm>
   b5b24:	4607      	mov	r7, r0
    return m_cache.read(blockNumber, options);
   b5b26:	68a0      	ldr	r0, [r4, #8]
   b5b28:	2205      	movs	r2, #5
   b5b2a:	4639      	mov	r1, r7
   b5b2c:	3024      	adds	r0, #36	; 0x24
   b5b2e:	f000 fc89 	bl	b6444 <_ZN8FatCache4readEmh>
  if (!pc) {
   b5b32:	4680      	mov	r8, r0
   b5b34:	2800      	cmp	r0, #0
   b5b36:	d0e4      	beq.n	b5b02 <_ZN7FatFile13addDirClusterEv+0xe>
  memset(pc, 0, 512);
   b5b38:	4629      	mov	r1, r5
   b5b3a:	f44f 7200 	mov.w	r2, #512	; 0x200
   b5b3e:	f003 fe65 	bl	b980c <memset>
  for (uint8_t i = 1; i < m_vol->blocksPerCluster(); i++) {
   b5b42:	2501      	movs	r5, #1
   b5b44:	68a3      	ldr	r3, [r4, #8]
    return m_blocksPerCluster;
   b5b46:	791a      	ldrb	r2, [r3, #4]
   b5b48:	42aa      	cmp	r2, r5
   b5b4a:	d909      	bls.n	b5b60 <_ZN7FatFile13addDirClusterEv+0x6c>
    return m_blockDev->writeBlock(block, src);
   b5b4c:	6818      	ldr	r0, [r3, #0]
   b5b4e:	4642      	mov	r2, r8
   b5b50:	19e9      	adds	r1, r5, r7
   b5b52:	f000 ffe4 	bl	b6b1e <_ZN9SdSpiCard10writeBlockEmPKh>
    if (!m_vol->writeBlock(block + i, pc->data)) {
   b5b56:	2800      	cmp	r0, #0
   b5b58:	d0d3      	beq.n	b5b02 <_ZN7FatFile13addDirClusterEv+0xe>
  for (uint8_t i = 1; i < m_vol->blocksPerCluster(); i++) {
   b5b5a:	3501      	adds	r5, #1
   b5b5c:	b2ed      	uxtb	r5, r5
   b5b5e:	e7f1      	b.n	b5b44 <_ZN7FatFile13addDirClusterEv+0x50>
  m_curPosition += 512UL*m_vol->blocksPerCluster();
   b5b60:	6963      	ldr	r3, [r4, #20]
   b5b62:	eb03 2342 	add.w	r3, r3, r2, lsl #9
   b5b66:	6163      	str	r3, [r4, #20]
  return true;
   b5b68:	e7cc      	b.n	b5b04 <_ZN7FatFile13addDirClusterEv+0x10>
   b5b6a:	bf00      	nop
   b5b6c:	001ffe00 	.word	0x001ffe00

000b5b70 <_ZN7FatFile13cacheDirEntryEh>:
dir_t* FatFile::cacheDirEntry(uint8_t action) {
   b5b70:	b510      	push	{r4, lr}
   b5b72:	4604      	mov	r4, r0
    return m_cache.read(blockNumber, options);
   b5b74:	6880      	ldr	r0, [r0, #8]
   b5b76:	460a      	mov	r2, r1
   b5b78:	3024      	adds	r0, #36	; 0x24
   b5b7a:	69a1      	ldr	r1, [r4, #24]
   b5b7c:	f000 fc62 	bl	b6444 <_ZN8FatCache4readEmh>
  if (!pc) {
   b5b80:	b120      	cbz	r0, b5b8c <_ZN7FatFile13cacheDirEntryEh+0x1c>
  return pc->dir + (m_dirIndex & 0XF);
   b5b82:	88a3      	ldrh	r3, [r4, #4]
   b5b84:	f003 030f 	and.w	r3, r3, #15
   b5b88:	eb00 1043 	add.w	r0, r0, r3, lsl #5
}
   b5b8c:	bd10      	pop	{r4, pc}

000b5b8e <_ZN7FatFile7dirNameEPK14directoryEntryPc>:
  for (uint8_t i = 0; i < 11; i++) {
   b5b8e:	2300      	movs	r3, #0
uint8_t FatFile::dirName(const dir_t* dir, char* name) {
   b5b90:	b5f0      	push	{r4, r5, r6, r7, lr}
   b5b92:	4604      	mov	r4, r0
   b5b94:	1e45      	subs	r5, r0, #1
  uint8_t lcBit = DIR_NT_LC_BASE;
   b5b96:	2608      	movs	r6, #8
  uint8_t j = 0;
   b5b98:	4618      	mov	r0, r3
      name[j++] = '.';
   b5b9a:	272e      	movs	r7, #46	; 0x2e
    if (dir->name[i] == ' ') {
   b5b9c:	f815 2f01 	ldrb.w	r2, [r5, #1]!
   b5ba0:	2a20      	cmp	r2, #32
   b5ba2:	d018      	beq.n	b5bd6 <_ZN7FatFile7dirNameEPK14directoryEntryPc+0x48>
    if (i == 8) {
   b5ba4:	2b08      	cmp	r3, #8
      name[j++] = '.';
   b5ba6:	bf02      	ittt	eq
   b5ba8:	540f      	strbeq	r7, [r1, r0]
   b5baa:	1c42      	addeq	r2, r0, #1
   b5bac:	b2d0      	uxtbeq	r0, r2
    char c = dir->name[i];
   b5bae:	782a      	ldrb	r2, [r5, #0]
    if ('A' <= c && c <= 'Z' && (lcBit & dir->reservedNT)) {
   b5bb0:	f1a2 0c41 	sub.w	ip, r2, #65	; 0x41
      lcBit = DIR_NT_LC_EXT;
   b5bb4:	bf08      	it	eq
   b5bb6:	2610      	moveq	r6, #16
    if ('A' <= c && c <= 'Z' && (lcBit & dir->reservedNT)) {
   b5bb8:	f1bc 0f19 	cmp.w	ip, #25
   b5bbc:	d806      	bhi.n	b5bcc <_ZN7FatFile7dirNameEPK14directoryEntryPc+0x3e>
   b5bbe:	f894 c00c 	ldrb.w	ip, [r4, #12]
   b5bc2:	ea16 0f0c 	tst.w	r6, ip
      c += 'a' - 'A';
   b5bc6:	bf1c      	itt	ne
   b5bc8:	3220      	addne	r2, #32
   b5bca:	b2d2      	uxtbne	r2, r2
    name[j++] = c;
   b5bcc:	f100 0c01 	add.w	ip, r0, #1
   b5bd0:	540a      	strb	r2, [r1, r0]
   b5bd2:	fa5f f08c 	uxtb.w	r0, ip
  for (uint8_t i = 0; i < 11; i++) {
   b5bd6:	3301      	adds	r3, #1
   b5bd8:	b2db      	uxtb	r3, r3
   b5bda:	2b0b      	cmp	r3, #11
   b5bdc:	d1de      	bne.n	b5b9c <_ZN7FatFile7dirNameEPK14directoryEntryPc+0xe>
  name[j] = 0;
   b5bde:	2300      	movs	r3, #0
   b5be0:	540b      	strb	r3, [r1, r0]
}
   b5be2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b5be4 <_ZN7FatFile8openRootEP9FatVolume>:
  if (isOpen()) {
   b5be4:	7803      	ldrb	r3, [r0, #0]
   b5be6:	b90b      	cbnz	r3, b5bec <_ZN7FatFile8openRootEP9FatVolume+0x8>
   b5be8:	f7ff bf63 	b.w	b5ab2 <_ZN7FatFile8openRootEP9FatVolume.part.0>
}
   b5bec:	2000      	movs	r0, #0
   b5bee:	4770      	bx	lr

000b5bf0 <_ZN7FatFile4readEPvj>:
    setpos(&pos);
  }
  return c;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
   b5bf0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5bf4:	7803      	ldrb	r3, [r0, #0]
   b5bf6:	4604      	mov	r4, r0
   b5bf8:	4688      	mov	r8, r1
   b5bfa:	4615      	mov	r5, r2
  size_t toRead;
  uint32_t block;  // raw device block number
  cache_t* pc;

  // error if not open for read
  if (!isOpen() || !(m_flags & F_READ)) {
   b5bfc:	2b00      	cmp	r3, #0
   b5bfe:	d05d      	beq.n	b5cbc <_ZN7FatFile4readEPvj+0xcc>
   b5c00:	7882      	ldrb	r2, [r0, #2]
   b5c02:	07d1      	lsls	r1, r2, #31
   b5c04:	d55a      	bpl.n	b5cbc <_ZN7FatFile4readEPvj+0xcc>
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (isFile()) {
   b5c06:	071a      	lsls	r2, r3, #28
   b5c08:	d52d      	bpl.n	b5c66 <_ZN7FatFile4readEPvj+0x76>
    uint32_t tmp32 = m_fileSize - m_curPosition;
   b5c0a:	69c3      	ldr	r3, [r0, #28]
   b5c0c:	6942      	ldr	r2, [r0, #20]
   b5c0e:	1a9b      	subs	r3, r3, r2
   b5c10:	429d      	cmp	r5, r3
   b5c12:	bf28      	it	cs
   b5c14:	461d      	movcs	r5, r3
    uint16_t tmp16 = 32*m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
   b5c16:	462e      	mov	r6, r5
  uint8_t blockOfCluster = 0;
   b5c18:	f04f 0900 	mov.w	r9, #0
        if (m_curPosition == 0) {
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   b5c1c:	f104 0b10 	add.w	fp, r4, #16
  while (toRead) {
   b5c20:	2e00      	cmp	r6, #0
   b5c22:	f000 808f 	beq.w	b5d44 <_ZN7FatFile4readEPvj+0x154>
    return m_attr & FILE_ATTR_ROOT_FIXED;
   b5c26:	7822      	ldrb	r2, [r4, #0]
    offset = m_curPosition & 0X1FF;  // offset in block
   b5c28:	6963      	ldr	r3, [r4, #20]
      block = m_vol->rootDirStart() + (m_curPosition >> 9);
   b5c2a:	68a0      	ldr	r0, [r4, #8]
    if (isRootFixed()) {
   b5c2c:	0697      	lsls	r7, r2, #26
    offset = m_curPosition & 0X1FF;  // offset in block
   b5c2e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
      block = m_vol->rootDirStart() + (m_curPosition >> 9);
   b5c32:	ea4f 2153 	mov.w	r1, r3, lsr #9
    if (isRootFixed()) {
   b5c36:	d51f      	bpl.n	b5c78 <_ZN7FatFile4readEPvj+0x88>
      block = m_vol->rootDirStart() + (m_curPosition >> 9);
   b5c38:	6a00      	ldr	r0, [r0, #32]
   b5c3a:	4401      	add	r1, r0
          }
        }
      }
      block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
    }
    if (offset != 0 || toRead < 512 || block == m_vol->cacheBlockNumber()) {
   b5c3c:	68a0      	ldr	r0, [r4, #8]
   b5c3e:	f1ba 0f00 	cmp.w	sl, #0
   b5c42:	d142      	bne.n	b5cca <_ZN7FatFile4readEPvj+0xda>
   b5c44:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   b5c48:	d33f      	bcc.n	b5cca <_ZN7FatFile4readEPvj+0xda>
    return m_lbn;
   b5c4a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   b5c4c:	4299      	cmp	r1, r3
   b5c4e:	d03c      	beq.n	b5cca <_ZN7FatFile4readEPvj+0xda>
        goto fail;
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
#if USE_MULTI_BLOCK_IO
    } else if (toRead >= 1024) {
   b5c50:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
   b5c54:	d252      	bcs.n	b5cfc <_ZN7FatFile4readEPvj+0x10c>
    return m_blockDev->readBlock(block, dst);
   b5c56:	6800      	ldr	r0, [r0, #0]
   b5c58:	4642      	mov	r2, r8
   b5c5a:	f000 fed7 	bl	b6a0c <_ZN9SdSpiCard9readBlockEmPh>
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // read single block
      n = 512;
      if (!m_vol->readBlock(block, dst)) {
   b5c5e:	b368      	cbz	r0, b5cbc <_ZN7FatFile4readEPvj+0xcc>
      n = 512;
   b5c60:	f44f 7700 	mov.w	r7, #512	; 0x200
   b5c64:	e044      	b.n	b5cf0 <_ZN7FatFile4readEPvj+0x100>
  } else if (isRootFixed()) {
   b5c66:	069b      	lsls	r3, r3, #26
   b5c68:	d5d5      	bpl.n	b5c16 <_ZN7FatFile4readEPvj+0x26>
    uint16_t tmp16 = 32*m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
   b5c6a:	6883      	ldr	r3, [r0, #8]
   b5c6c:	891a      	ldrh	r2, [r3, #8]
   b5c6e:	6943      	ldr	r3, [r0, #20]
   b5c70:	ebc3 1342 	rsb	r3, r3, r2, lsl #5
    if (nbyte > tmp16) {
   b5c74:	b29b      	uxth	r3, r3
   b5c76:	e7cb      	b.n	b5c10 <_ZN7FatFile4readEPvj+0x20>
//------------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t blockOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterBlockMask;
   b5c78:	f890 9005 	ldrb.w	r9, [r0, #5]
   b5c7c:	ea09 0901 	and.w	r9, r9, r1
      if (offset == 0 && blockOfCluster == 0) {
   b5c80:	f1ba 0f00 	cmp.w	sl, #0
   b5c84:	d108      	bne.n	b5c98 <_ZN7FatFile4readEPvj+0xa8>
   b5c86:	f1b9 0f00 	cmp.w	r9, #0
   b5c8a:	d105      	bne.n	b5c98 <_ZN7FatFile4readEPvj+0xa8>
        if (m_curPosition == 0) {
   b5c8c:	b95b      	cbnz	r3, b5ca6 <_ZN7FatFile4readEPvj+0xb6>
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
   b5c8e:	0651      	lsls	r1, r2, #25
    return m_rootDirStart;
   b5c90:	bf4c      	ite	mi
   b5c92:	6a03      	ldrmi	r3, [r0, #32]
   b5c94:	6a23      	ldrpl	r3, [r4, #32]
   b5c96:	6123      	str	r3, [r4, #16]
      block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
   b5c98:	6921      	ldr	r1, [r4, #16]
   b5c9a:	68a0      	ldr	r0, [r4, #8]
   b5c9c:	f000 fbf5 	bl	b648a <_ZNK9FatVolume17clusterFirstBlockEm>
   b5ca0:	eb09 0100 	add.w	r1, r9, r0
   b5ca4:	e7ca      	b.n	b5c3c <_ZN7FatFile4readEPvj+0x4c>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   b5ca6:	6921      	ldr	r1, [r4, #16]
   b5ca8:	465a      	mov	r2, fp
   b5caa:	f000 fbf4 	bl	b6496 <_ZN9FatVolume6fatGetEmPm>
          if (fg < 0) {
   b5cae:	2800      	cmp	r0, #0
   b5cb0:	db04      	blt.n	b5cbc <_ZN7FatFile4readEPvj+0xcc>
          if (fg == 0) {
   b5cb2:	d1f1      	bne.n	b5c98 <_ZN7FatFile4readEPvj+0xa8>
            if (isDir()) {
   b5cb4:	7823      	ldrb	r3, [r4, #0]
   b5cb6:	f013 0f70 	tst.w	r3, #112	; 0x70
   b5cba:	d143      	bne.n	b5d44 <_ZN7FatFile4readEPvj+0x154>
    toRead -= n;
  }
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
   b5cbc:	7863      	ldrb	r3, [r4, #1]
   b5cbe:	f043 0302 	orr.w	r3, r3, #2
   b5cc2:	7063      	strb	r3, [r4, #1]
  return -1;
   b5cc4:	f04f 30ff 	mov.w	r0, #4294967295
   b5cc8:	e03d      	b.n	b5d46 <_ZN7FatFile4readEPvj+0x156>
      n = 512 - offset;
   b5cca:	f5ca 7700 	rsb	r7, sl, #512	; 0x200
      if (n > toRead) {
   b5cce:	42b7      	cmp	r7, r6
    return m_cache.read(blockNumber, options);
   b5cd0:	f04f 0200 	mov.w	r2, #0
   b5cd4:	f100 0024 	add.w	r0, r0, #36	; 0x24
   b5cd8:	bf28      	it	cs
   b5cda:	4637      	movcs	r7, r6
   b5cdc:	f000 fbb2 	bl	b6444 <_ZN8FatCache4readEmh>
      if (!pc) {
   b5ce0:	2800      	cmp	r0, #0
   b5ce2:	d0eb      	beq.n	b5cbc <_ZN7FatFile4readEPvj+0xcc>
      memcpy(dst, src, n);
   b5ce4:	eb00 010a 	add.w	r1, r0, sl
   b5ce8:	463a      	mov	r2, r7
   b5cea:	4640      	mov	r0, r8
   b5cec:	f003 fd80 	bl	b97f0 <memcpy>
    m_curPosition += n;
   b5cf0:	6963      	ldr	r3, [r4, #20]
   b5cf2:	443b      	add	r3, r7
    dst += n;
   b5cf4:	44b8      	add	r8, r7
    m_curPosition += n;
   b5cf6:	6163      	str	r3, [r4, #20]
    toRead -= n;
   b5cf8:	1bf6      	subs	r6, r6, r7
  while (toRead) {
   b5cfa:	e791      	b.n	b5c20 <_ZN7FatFile4readEPvj+0x30>
      if (!isRootFixed()) {
   b5cfc:	7822      	ldrb	r2, [r4, #0]
   b5cfe:	0692      	lsls	r2, r2, #26
      size_t nb = toRead >> 9;
   b5d00:	ea4f 2a56 	mov.w	sl, r6, lsr #9
      if (!isRootFixed()) {
   b5d04:	d406      	bmi.n	b5d14 <_ZN7FatFile4readEPvj+0x124>
        uint8_t mb = m_vol->blocksPerCluster() - blockOfCluster;
   b5d06:	7902      	ldrb	r2, [r0, #4]
   b5d08:	eba2 0209 	sub.w	r2, r2, r9
        if (mb < nb) {
   b5d0c:	b2d2      	uxtb	r2, r2
   b5d0e:	4592      	cmp	sl, r2
   b5d10:	bf28      	it	cs
   b5d12:	4692      	movcs	sl, r2
          && block < (m_vol->cacheBlockNumber() + nb)) {
   b5d14:	4299      	cmp	r1, r3
      n = 512*nb;
   b5d16:	ea4f 274a 	mov.w	r7, sl, lsl #9
          && block < (m_vol->cacheBlockNumber() + nb)) {
   b5d1a:	d208      	bcs.n	b5d2e <_ZN7FatFile4readEPvj+0x13e>
    return m_blockDev->readBlocks(block, dst, nb);
   b5d1c:	68a0      	ldr	r0, [r4, #8]
   b5d1e:	4653      	mov	r3, sl
   b5d20:	6800      	ldr	r0, [r0, #0]
   b5d22:	4642      	mov	r2, r8
   b5d24:	f000 feba 	bl	b6a9c <_ZN9SdSpiCard10readBlocksEmPhj>
      if (!m_vol->readBlocks(block, dst, nb)) {
   b5d28:	2800      	cmp	r0, #0
   b5d2a:	d1e1      	bne.n	b5cf0 <_ZN7FatFile4readEPvj+0x100>
   b5d2c:	e7c6      	b.n	b5cbc <_ZN7FatFile4readEPvj+0xcc>
          && block < (m_vol->cacheBlockNumber() + nb)) {
   b5d2e:	4453      	add	r3, sl
   b5d30:	428b      	cmp	r3, r1
   b5d32:	d9f3      	bls.n	b5d1c <_ZN7FatFile4readEPvj+0x12c>
    return m_cache.sync();
   b5d34:	3024      	adds	r0, #36	; 0x24
   b5d36:	9101      	str	r1, [sp, #4]
   b5d38:	f000 fb5c 	bl	b63f4 <_ZN8FatCache4syncEv>
        if (!m_vol->cacheSyncData()) {
   b5d3c:	9901      	ldr	r1, [sp, #4]
   b5d3e:	2800      	cmp	r0, #0
   b5d40:	d1ec      	bne.n	b5d1c <_ZN7FatFile4readEPvj+0x12c>
   b5d42:	e7bb      	b.n	b5cbc <_ZN7FatFile4readEPvj+0xcc>
  return nbyte - toRead;
   b5d44:	1ba8      	subs	r0, r5, r6
}
   b5d46:	b003      	add	sp, #12
   b5d48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b5d4c <_ZN7FatFile4peekEv>:
int FatFile::peek() {
   b5d4c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    return read(&b, 1) == 1 ? b : -1;
   b5d4e:	2201      	movs	r2, #1
   b5d50:	f10d 0107 	add.w	r1, sp, #7
  pos->cluster = m_curCluster;
   b5d54:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
int FatFile::peek() {
   b5d58:	4604      	mov	r4, r0
   b5d5a:	f7ff ff49 	bl	b5bf0 <_ZN7FatFile4readEPvj>
   b5d5e:	2801      	cmp	r0, #1
   b5d60:	bf0a      	itet	eq
   b5d62:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
   b5d66:	f04f 30ff 	movne.w	r0, #4294967295
  return false;
}
//------------------------------------------------------------------------------
void FatFile::setpos(FatPos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
   b5d6a:	e9c4 5604 	strdeq	r5, r6, [r4, #16]
}
   b5d6e:	b002      	add	sp, #8
   b5d70:	bd70      	pop	{r4, r5, r6, pc}

000b5d72 <_ZN7FatFile12readDirCacheEb>:
dir_t* FatFile::readDirCache(bool skipReadOk) {
   b5d72:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint8_t i = (m_curPosition >> 5) & 0XF;
   b5d74:	6943      	ldr	r3, [r0, #20]
  if (i == 0 || !skipReadOk) {
   b5d76:	f413 7ff0 	tst.w	r3, #480	; 0x1e0
dir_t* FatFile::readDirCache(bool skipReadOk) {
   b5d7a:	4604      	mov	r4, r0
  uint8_t i = (m_curPosition >> 5) & 0XF;
   b5d7c:	f3c3 1543 	ubfx	r5, r3, #5, #4
  if (i == 0 || !skipReadOk) {
   b5d80:	d000      	beq.n	b5d84 <_ZN7FatFile12readDirCacheEb+0x12>
   b5d82:	b999      	cbnz	r1, b5dac <_ZN7FatFile12readDirCacheEb+0x3a>
    int8_t n = read(&n, 1);
   b5d84:	2201      	movs	r2, #1
   b5d86:	f10d 0107 	add.w	r1, sp, #7
   b5d8a:	4620      	mov	r0, r4
   b5d8c:	f7ff ff30 	bl	b5bf0 <_ZN7FatFile4readEPvj>
    if  (n != 1) {
   b5d90:	b240      	sxtb	r0, r0
   b5d92:	2801      	cmp	r0, #1
   b5d94:	d002      	beq.n	b5d9c <_ZN7FatFile12readDirCacheEb+0x2a>
  return 0;
   b5d96:	2000      	movs	r0, #0
}
   b5d98:	b003      	add	sp, #12
   b5d9a:	bd30      	pop	{r4, r5, pc}
    m_curPosition += 31;
   b5d9c:	6963      	ldr	r3, [r4, #20]
   b5d9e:	331f      	adds	r3, #31
  return m_vol->cacheAddress()->dir + i;
   b5da0:	68a0      	ldr	r0, [r4, #8]
    m_curPosition += 32;
   b5da2:	6163      	str	r3, [r4, #20]
  return m_vol->cacheAddress()->dir + i;
   b5da4:	3030      	adds	r0, #48	; 0x30
   b5da6:	eb00 1045 	add.w	r0, r0, r5, lsl #5
   b5daa:	e7f5      	b.n	b5d98 <_ZN7FatFile12readDirCacheEb+0x26>
    m_curPosition += 32;
   b5dac:	3320      	adds	r3, #32
   b5dae:	e7f7      	b.n	b5da0 <_ZN7FatFile12readDirCacheEb+0x2e>

000b5db0 <_ZN7FatFile7seekSetEm>:
bool FatFile::seekSet(uint32_t pos) {
   b5db0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    return m_attr;
   b5db4:	7802      	ldrb	r2, [r0, #0]
  uint32_t tmp = m_curCluster;
   b5db6:	6907      	ldr	r7, [r0, #16]
bool FatFile::seekSet(uint32_t pos) {
   b5db8:	4604      	mov	r4, r0
   b5dba:	460d      	mov	r5, r1
  if (!isOpen()) {
   b5dbc:	b162      	cbz	r2, b5dd8 <_ZN7FatFile7seekSetEm+0x28>
  if (pos == m_curPosition) {
   b5dbe:	6940      	ldr	r0, [r0, #20]
   b5dc0:	4288      	cmp	r0, r1
   b5dc2:	d002      	beq.n	b5dca <_ZN7FatFile7seekSetEm+0x1a>
  if (pos == 0) {
   b5dc4:	b919      	cbnz	r1, b5dce <_ZN7FatFile7seekSetEm+0x1e>
    m_curCluster = 0;
   b5dc6:	6121      	str	r1, [r4, #16]
  m_curPosition = pos;
   b5dc8:	6165      	str	r5, [r4, #20]
    return true;
   b5dca:	2001      	movs	r0, #1
   b5dcc:	e006      	b.n	b5ddc <_ZN7FatFile7seekSetEm+0x2c>
  if (isFile()) {
   b5dce:	0716      	lsls	r6, r2, #28
   b5dd0:	d506      	bpl.n	b5de0 <_ZN7FatFile7seekSetEm+0x30>
    if (pos > m_fileSize) {
   b5dd2:	69e3      	ldr	r3, [r4, #28]
   b5dd4:	428b      	cmp	r3, r1
   b5dd6:	d20b      	bcs.n	b5df0 <_ZN7FatFile7seekSetEm+0x40>
  m_curCluster = tmp;
   b5dd8:	6127      	str	r7, [r4, #16]
  return false;
   b5dda:	2000      	movs	r0, #0
}
   b5ddc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  } else if (isRootFixed()) {
   b5de0:	0691      	lsls	r1, r2, #26
   b5de2:	d505      	bpl.n	b5df0 <_ZN7FatFile7seekSetEm+0x40>
    return m_rootDirEntryCount;
   b5de4:	68a3      	ldr	r3, [r4, #8]
    if (pos <= 32*m_vol->rootDirEntryCount()) {
   b5de6:	891b      	ldrh	r3, [r3, #8]
   b5de8:	ebb5 1f43 	cmp.w	r5, r3, lsl #5
   b5dec:	d9ec      	bls.n	b5dc8 <_ZN7FatFile7seekSetEm+0x18>
   b5dee:	e7f3      	b.n	b5dd8 <_ZN7FatFile7seekSetEm+0x28>
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
   b5df0:	f8d4 c008 	ldr.w	ip, [r4, #8]
   b5df4:	f89c 6006 	ldrb.w	r6, [ip, #6]
   b5df8:	1e43      	subs	r3, r0, #1
   b5dfa:	f106 0109 	add.w	r1, r6, #9
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
   b5dfe:	1e6e      	subs	r6, r5, #1
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
   b5e00:	40cb      	lsrs	r3, r1
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
   b5e02:	40ce      	lsrs	r6, r1
  if (nNew < nCur || m_curPosition == 0) {
   b5e04:	42b3      	cmp	r3, r6
   b5e06:	d800      	bhi.n	b5e0a <_ZN7FatFile7seekSetEm+0x5a>
   b5e08:	b998      	cbnz	r0, b5e32 <_ZN7FatFile7seekSetEm+0x82>
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
   b5e0a:	0653      	lsls	r3, r2, #25
    return m_rootDirStart;
   b5e0c:	bf4c      	ite	mi
   b5e0e:	f8dc 3020 	ldrmi.w	r3, [ip, #32]
   b5e12:	6a23      	ldrpl	r3, [r4, #32]
   b5e14:	6123      	str	r3, [r4, #16]
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
   b5e16:	f104 0810 	add.w	r8, r4, #16
  while (nNew--) {
   b5e1a:	2e00      	cmp	r6, #0
   b5e1c:	d0d4      	beq.n	b5dc8 <_ZN7FatFile7seekSetEm+0x18>
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
   b5e1e:	6921      	ldr	r1, [r4, #16]
   b5e20:	68a0      	ldr	r0, [r4, #8]
   b5e22:	4642      	mov	r2, r8
   b5e24:	f000 fb37 	bl	b6496 <_ZN9FatVolume6fatGetEmPm>
   b5e28:	2800      	cmp	r0, #0
   b5e2a:	f106 36ff 	add.w	r6, r6, #4294967295
   b5e2e:	dcf4      	bgt.n	b5e1a <_ZN7FatFile7seekSetEm+0x6a>
   b5e30:	e7d2      	b.n	b5dd8 <_ZN7FatFile7seekSetEm+0x28>
    nNew -= nCur;
   b5e32:	1af6      	subs	r6, r6, r3
   b5e34:	e7ef      	b.n	b5e16 <_ZN7FatFile7seekSetEm+0x66>

000b5e36 <_ZN7FatFile15openCachedEntryEPS_tih>:
                              oflag_t oflag, uint8_t lfnOrd) {
   b5e36:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5e38:	460f      	mov	r7, r1
   b5e3a:	4604      	mov	r4, r0
   b5e3c:	4615      	mov	r5, r2
  memset(this, 0, sizeof(FatFile));
   b5e3e:	2100      	movs	r1, #0
   b5e40:	2224      	movs	r2, #36	; 0x24
                              oflag_t oflag, uint8_t lfnOrd) {
   b5e42:	461e      	mov	r6, r3
  memset(this, 0, sizeof(FatFile));
   b5e44:	f003 fce2 	bl	b980c <memset>
  m_vol = dirFile->m_vol;
   b5e48:	68b8      	ldr	r0, [r7, #8]
   b5e4a:	60a0      	str	r0, [r4, #8]
  m_dirIndex = dirIndex;
   b5e4c:	80a5      	strh	r5, [r4, #4]
  dir_t* dir = &m_vol->cacheAddress()->dir[0XF & dirIndex];
   b5e4e:	f005 050f 	and.w	r5, r5, #15
  m_dirCluster = dirFile->m_firstCluster;
   b5e52:	6a3b      	ldr	r3, [r7, #32]
   b5e54:	60e3      	str	r3, [r4, #12]
  return (dir->attributes & DIR_ATT_VOLUME_ID) == 0;
   b5e56:	016a      	lsls	r2, r5, #5
   b5e58:	eb00 1545 	add.w	r5, r0, r5, lsl #5
   b5e5c:	f895 303b 	ldrb.w	r3, [r5, #59]	; 0x3b
  if (!DIR_IS_FILE_OR_SUBDIR(dir)) {
   b5e60:	071f      	lsls	r7, r3, #28
   b5e62:	d444      	bmi.n	b5eee <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>
  m_attr = dir->attributes & FILE_ATTR_COPY;
   b5e64:	f003 0317 	and.w	r3, r3, #23
   b5e68:	7023      	strb	r3, [r4, #0]
  if (DIR_IS_FILE(dir)) {
   b5e6a:	f895 103b 	ldrb.w	r1, [r5, #59]	; 0x3b
   b5e6e:	f011 0f18 	tst.w	r1, #24
    m_attr |= FILE_ATTR_FILE;
   b5e72:	bf04      	itt	eq
   b5e74:	f043 0308 	orreq.w	r3, r3, #8
   b5e78:	7023      	strbeq	r3, [r4, #0]
  m_lfnOrd = lfnOrd;
   b5e7a:	f89d 3018 	ldrb.w	r3, [sp, #24]
   b5e7e:	70e3      	strb	r3, [r4, #3]
  switch (oflag & O_ACCMODE) {
   b5e80:	f006 0303 	and.w	r3, r6, #3
   b5e84:	2b01      	cmp	r3, #1
   b5e86:	d02c      	beq.n	b5ee2 <_ZN7FatFile15openCachedEntryEPS_tih+0xac>
   b5e88:	2b02      	cmp	r3, #2
   b5e8a:	d028      	beq.n	b5ede <_ZN7FatFile15openCachedEntryEPS_tih+0xa8>
   b5e8c:	bb7b      	cbnz	r3, b5eee <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>
      if (oflag & O_TRUNC) {
   b5e8e:	0571      	lsls	r1, r6, #21
   b5e90:	d42d      	bmi.n	b5eee <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>
      m_flags = F_READ;
   b5e92:	2301      	movs	r3, #1
      m_flags = F_WRITE;
   b5e94:	70a3      	strb	r3, [r4, #2]
  if (m_flags & F_WRITE) {
   b5e96:	78a1      	ldrb	r1, [r4, #2]
   b5e98:	078b      	lsls	r3, r1, #30
   b5e9a:	d504      	bpl.n	b5ea6 <_ZN7FatFile15openCachedEntryEPS_tih+0x70>
    return m_attr & FILE_ATTR_SUBDIR;
   b5e9c:	7823      	ldrb	r3, [r4, #0]
    if (isSubDir() || isReadOnly()) {
   b5e9e:	06df      	lsls	r7, r3, #27
   b5ea0:	d425      	bmi.n	b5eee <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>
   b5ea2:	07dd      	lsls	r5, r3, #31
   b5ea4:	d423      	bmi.n	b5eee <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>
  m_flags |= (oflag & O_APPEND ? F_APPEND : 0) | (oflag & O_SYNC ? F_SYNC : 0);
   b5ea6:	11b3      	asrs	r3, r6, #6
   b5ea8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   b5eac:	f006 0508 	and.w	r5, r6, #8
   b5eb0:	432b      	orrs	r3, r5
   b5eb2:	430b      	orrs	r3, r1
   b5eb4:	70a3      	strb	r3, [r4, #2]
    return m_lbn;
   b5eb6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  m_dirBlock = m_vol->cacheBlockNumber();
   b5eb8:	61a3      	str	r3, [r4, #24]
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
   b5eba:	1883      	adds	r3, r0, r2
   b5ebc:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
                 | dir->firstClusterLow;
   b5ec0:	f8b3 104a 	ldrh.w	r1, [r3, #74]	; 0x4a
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
   b5ec4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
  if (oflag & O_TRUNC) {
   b5ec8:	0572      	lsls	r2, r6, #21
   b5eca:	d513      	bpl.n	b5ef4 <_ZN7FatFile15openCachedEntryEPS_tih+0xbe>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
   b5ecc:	b959      	cbnz	r1, b5ee6 <_ZN7FatFile15openCachedEntryEPS_tih+0xb0>
    m_flags |= F_FILE_DIR_DIRTY;
   b5ece:	78a3      	ldrb	r3, [r4, #2]
   b5ed0:	f043 0304 	orr.w	r3, r3, #4
   b5ed4:	70a3      	strb	r3, [r4, #2]
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
   b5ed6:	0473      	lsls	r3, r6, #17
   b5ed8:	d410      	bmi.n	b5efc <_ZN7FatFile15openCachedEntryEPS_tih+0xc6>
  return true;
   b5eda:	2001      	movs	r0, #1
}
   b5edc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      m_flags = F_READ | F_WRITE;
   b5ede:	2303      	movs	r3, #3
   b5ee0:	e7d8      	b.n	b5e94 <_ZN7FatFile15openCachedEntryEPS_tih+0x5e>
      m_flags = F_WRITE;
   b5ee2:	2302      	movs	r3, #2
   b5ee4:	e7d6      	b.n	b5e94 <_ZN7FatFile15openCachedEntryEPS_tih+0x5e>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
   b5ee6:	f000 fb76 	bl	b65d6 <_ZN9FatVolume9freeChainEm>
   b5eea:	2800      	cmp	r0, #0
   b5eec:	d1ef      	bne.n	b5ece <_ZN7FatFile15openCachedEntryEPS_tih+0x98>
  m_attr = FILE_ATTR_CLOSED;
   b5eee:	2000      	movs	r0, #0
   b5ef0:	7020      	strb	r0, [r4, #0]
  return false;
   b5ef2:	e7f3      	b.n	b5edc <_ZN7FatFile15openCachedEntryEPS_tih+0xa6>
    m_firstCluster = firstCluster;
   b5ef4:	6221      	str	r1, [r4, #32]
    m_fileSize = dir->fileSize;
   b5ef6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b5ef8:	61e3      	str	r3, [r4, #28]
   b5efa:	e7ec      	b.n	b5ed6 <_ZN7FatFile15openCachedEntryEPS_tih+0xa0>
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
   b5efc:	69e1      	ldr	r1, [r4, #28]
   b5efe:	4620      	mov	r0, r4
   b5f00:	f7ff ff56 	bl	b5db0 <_ZN7FatFile7seekSetEm>
   b5f04:	2800      	cmp	r0, #0
   b5f06:	d1e8      	bne.n	b5eda <_ZN7FatFile15openCachedEntryEPS_tih+0xa4>
   b5f08:	e7f1      	b.n	b5eee <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>

000b5f0a <_ZN7FatFile8openNextEPS_i>:
bool FatFile::openNext(FatFile* dirFile, oflag_t oflag) {
   b5f0a:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    return m_attr;
   b5f0e:	7803      	ldrb	r3, [r0, #0]
   b5f10:	4607      	mov	r7, r0
   b5f12:	460d      	mov	r5, r1
   b5f14:	4692      	mov	sl, r2
  if (isOpen() || !dirFile->isDir() || (dirFile->curPosition() & 0X1F)) {
   b5f16:	bb53      	cbnz	r3, b5f6e <_ZN7FatFile8openNextEPS_i+0x64>
   b5f18:	780b      	ldrb	r3, [r1, #0]
   b5f1a:	f013 0f70 	tst.w	r3, #112	; 0x70
   b5f1e:	d026      	beq.n	b5f6e <_ZN7FatFile8openNextEPS_i+0x64>
   b5f20:	694c      	ldr	r4, [r1, #20]
   b5f22:	f014 041f 	ands.w	r4, r4, #31
   b5f26:	d122      	bne.n	b5f6e <_ZN7FatFile8openNextEPS_i+0x64>
   b5f28:	46a0      	mov	r8, r4
    dir_t* dir = dirFile->readDirCache();
   b5f2a:	2100      	movs	r1, #0
   b5f2c:	4628      	mov	r0, r5
    return m_curPosition;
   b5f2e:	f8d5 9014 	ldr.w	r9, [r5, #20]
   b5f32:	f7ff ff1e 	bl	b5d72 <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
   b5f36:	b1d0      	cbz	r0, b5f6e <_ZN7FatFile8openNextEPS_i+0x64>
    if (dir->name[0] == DIR_NAME_FREE) {
   b5f38:	7806      	ldrb	r6, [r0, #0]
   b5f3a:	b1c6      	cbz	r6, b5f6e <_ZN7FatFile8openNextEPS_i+0x64>
    if (dir->name[0] == '.' || dir->name[0] == DIR_NAME_DELETED) {
   b5f3c:	2e2e      	cmp	r6, #46	; 0x2e
   b5f3e:	d010      	beq.n	b5f62 <_ZN7FatFile8openNextEPS_i+0x58>
   b5f40:	2ee5      	cmp	r6, #229	; 0xe5
   b5f42:	d00e      	beq.n	b5f62 <_ZN7FatFile8openNextEPS_i+0x58>
   b5f44:	7ac3      	ldrb	r3, [r0, #11]
    } else if (DIR_IS_FILE_OR_SUBDIR(dir)) {
   b5f46:	071a      	lsls	r2, r3, #28
   b5f48:	d413      	bmi.n	b5f72 <_ZN7FatFile8openNextEPS_i+0x68>
      if (lfnOrd && chksum != lfnChecksum(dir->name)) {
   b5f4a:	b964      	cbnz	r4, b5f66 <_ZN7FatFile8openNextEPS_i+0x5c>
      if (!openCachedEntry(dirFile, index, oflag, lfnOrd)) {
   b5f4c:	9400      	str	r4, [sp, #0]
   b5f4e:	4653      	mov	r3, sl
   b5f50:	f3c9 124f 	ubfx	r2, r9, #5, #16
   b5f54:	4629      	mov	r1, r5
   b5f56:	4638      	mov	r0, r7
   b5f58:	f7ff ff6d 	bl	b5e36 <_ZN7FatFile15openCachedEntryEPS_tih>
}
   b5f5c:	b002      	add	sp, #8
   b5f5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      lfnOrd = 0;
   b5f62:	2400      	movs	r4, #0
   b5f64:	e7e1      	b.n	b5f2a <_ZN7FatFile8openNextEPS_i+0x20>
      if (lfnOrd && chksum != lfnChecksum(dir->name)) {
   b5f66:	f7ff f9ac 	bl	b52c2 <_ZN7FatFile11lfnChecksumEPh>
   b5f6a:	4540      	cmp	r0, r8
   b5f6c:	d0ee      	beq.n	b5f4c <_ZN7FatFile8openNextEPS_i+0x42>
  return false;
   b5f6e:	2000      	movs	r0, #0
   b5f70:	e7f4      	b.n	b5f5c <_ZN7FatFile8openNextEPS_i+0x52>
    } else if (DIR_IS_LONG_NAME(dir)) {
   b5f72:	2b0f      	cmp	r3, #15
   b5f74:	d1f5      	bne.n	b5f62 <_ZN7FatFile8openNextEPS_i+0x58>
      if (ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) {
   b5f76:	0673      	lsls	r3, r6, #25
   b5f78:	d5d7      	bpl.n	b5f2a <_ZN7FatFile8openNextEPS_i+0x20>
        chksum = ldir->chksum;
   b5f7a:	f890 800d 	ldrb.w	r8, [r0, #13]
        lfnOrd = ldir->ord & 0X1F;
   b5f7e:	f006 041f 	and.w	r4, r6, #31
        chksum = ldir->chksum;
   b5f82:	e7d2      	b.n	b5f2a <_ZN7FatFile8openNextEPS_i+0x20>

000b5f84 <_ZN7FatFile4syncEv>:
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
   b5f84:	b538      	push	{r3, r4, r5, lr}
  if (!isOpen()) {
   b5f86:	7803      	ldrb	r3, [r0, #0]
bool FatFile::sync() {
   b5f88:	4604      	mov	r4, r0
  if (!isOpen()) {
   b5f8a:	b90b      	cbnz	r3, b5f90 <_ZN7FatFile4syncEv+0xc>
    return true;
   b5f8c:	2001      	movs	r0, #1
  DBG_FAIL_MACRO;

fail:
  m_error |= WRITE_ERROR;
  return false;
}
   b5f8e:	bd38      	pop	{r3, r4, r5, pc}
  if (m_flags & F_FILE_DIR_DIRTY) {
   b5f90:	7883      	ldrb	r3, [r0, #2]
   b5f92:	075a      	lsls	r2, r3, #29
   b5f94:	d523      	bpl.n	b5fde <_ZN7FatFile4syncEv+0x5a>
    dir_t* dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
   b5f96:	2101      	movs	r1, #1
   b5f98:	f7ff fdea 	bl	b5b70 <_ZN7FatFile13cacheDirEntryEh>
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
   b5f9c:	4605      	mov	r5, r0
   b5f9e:	b928      	cbnz	r0, b5fac <_ZN7FatFile4syncEv+0x28>
  m_error |= WRITE_ERROR;
   b5fa0:	7863      	ldrb	r3, [r4, #1]
   b5fa2:	f043 0301 	orr.w	r3, r3, #1
   b5fa6:	7063      	strb	r3, [r4, #1]
  return false;
   b5fa8:	2000      	movs	r0, #0
   b5faa:	e7f0      	b.n	b5f8e <_ZN7FatFile4syncEv+0xa>
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
   b5fac:	7803      	ldrb	r3, [r0, #0]
   b5fae:	2be5      	cmp	r3, #229	; 0xe5
   b5fb0:	d0f6      	beq.n	b5fa0 <_ZN7FatFile4syncEv+0x1c>
    if (isFile()) {
   b5fb2:	7823      	ldrb	r3, [r4, #0]
   b5fb4:	071b      	lsls	r3, r3, #28
      dir->fileSize = m_fileSize;
   b5fb6:	bf44      	itt	mi
   b5fb8:	69e3      	ldrmi	r3, [r4, #28]
   b5fba:	61c3      	strmi	r3, [r0, #28]
    dir->firstClusterLow = m_firstCluster & 0XFFFF;
   b5fbc:	6a23      	ldr	r3, [r4, #32]
   b5fbe:	8343      	strh	r3, [r0, #26]
    dir->firstClusterHigh = m_firstCluster >> 16;
   b5fc0:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   b5fc2:	8283      	strh	r3, [r0, #20]
    if (m_dateTime) {
   b5fc4:	4b09      	ldr	r3, [pc, #36]	; (b5fec <_ZN7FatFile4syncEv+0x68>)
   b5fc6:	681b      	ldr	r3, [r3, #0]
   b5fc8:	b12b      	cbz	r3, b5fd6 <_ZN7FatFile4syncEv+0x52>
      m_dateTime(&dir->lastWriteDate, &dir->lastWriteTime);
   b5fca:	f100 0116 	add.w	r1, r0, #22
   b5fce:	3018      	adds	r0, #24
   b5fd0:	4798      	blx	r3
      dir->lastAccessDate = dir->lastWriteDate;
   b5fd2:	8b2b      	ldrh	r3, [r5, #24]
   b5fd4:	826b      	strh	r3, [r5, #18]
    m_flags &= ~F_FILE_DIR_DIRTY;
   b5fd6:	78a3      	ldrb	r3, [r4, #2]
   b5fd8:	f023 0304 	bic.w	r3, r3, #4
   b5fdc:	70a3      	strb	r3, [r4, #2]
  if (m_vol->cacheSync()) {
   b5fde:	68a0      	ldr	r0, [r4, #8]
   b5fe0:	f7ff f962 	bl	b52a8 <_ZN9FatVolume9cacheSyncEv>
   b5fe4:	2800      	cmp	r0, #0
   b5fe6:	d0db      	beq.n	b5fa0 <_ZN7FatFile4syncEv+0x1c>
   b5fe8:	e7d0      	b.n	b5f8c <_ZN7FatFile4syncEv+0x8>
   b5fea:	bf00      	nop
   b5fec:	2003e678 	.word	0x2003e678

000b5ff0 <_ZN7FatFile5closeEv>:
bool FatFile::close() {
   b5ff0:	b510      	push	{r4, lr}
   b5ff2:	4604      	mov	r4, r0
  bool rtn = sync();
   b5ff4:	f7ff ffc6 	bl	b5f84 <_ZN7FatFile4syncEv>
  m_attr = FILE_ATTR_CLOSED;
   b5ff8:	2300      	movs	r3, #0
   b5ffa:	7023      	strb	r3, [r4, #0]
}
   b5ffc:	bd10      	pop	{r4, pc}

000b5ffe <_ZN7FatFile4openEPS_PKci>:
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
   b5ffe:	b5f0      	push	{r4, r5, r6, r7, lr}
   b6000:	b093      	sub	sp, #76	; 0x4c
   b6002:	461f      	mov	r7, r3
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   b6004:	2300      	movs	r3, #0
   b6006:	9309      	str	r3, [sp, #36]	; 0x24
  if (isOpen() || !dirFile->isDir()) {
   b6008:	7803      	ldrb	r3, [r0, #0]
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
   b600a:	9201      	str	r2, [sp, #4]
   b600c:	4606      	mov	r6, r0
   b600e:	460c      	mov	r4, r1
  if (isOpen() || !dirFile->isDir()) {
   b6010:	b113      	cbz	r3, b6018 <_ZN7FatFile4openEPS_PKci+0x1a>
  return false;
   b6012:	2000      	movs	r0, #0
}
   b6014:	b013      	add	sp, #76	; 0x4c
   b6016:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (isOpen() || !dirFile->isDir()) {
   b6018:	780b      	ldrb	r3, [r1, #0]
   b601a:	f013 0f70 	tst.w	r3, #112	; 0x70
   b601e:	d0f8      	beq.n	b6012 <_ZN7FatFile4openEPS_PKci+0x14>
  if (isDirSeparator(*path)) {
   b6020:	7813      	ldrb	r3, [r2, #0]
   b6022:	2b2f      	cmp	r3, #47	; 0x2f
   b6024:	d112      	bne.n	b604c <_ZN7FatFile4openEPS_PKci+0x4e>
    while (isDirSeparator(*path)) {
   b6026:	9a01      	ldr	r2, [sp, #4]
   b6028:	7813      	ldrb	r3, [r2, #0]
   b602a:	2b2f      	cmp	r3, #47	; 0x2f
   b602c:	d102      	bne.n	b6034 <_ZN7FatFile4openEPS_PKci+0x36>
      path++;
   b602e:	3201      	adds	r2, #1
   b6030:	9201      	str	r2, [sp, #4]
    while (isDirSeparator(*path)) {
   b6032:	e7f8      	b.n	b6026 <_ZN7FatFile4openEPS_PKci+0x28>
      return openRoot(dirFile->m_vol);
   b6034:	68a1      	ldr	r1, [r4, #8]
    if (*path == 0) {
   b6036:	b91b      	cbnz	r3, b6040 <_ZN7FatFile4openEPS_PKci+0x42>
      return openRoot(dirFile->m_vol);
   b6038:	4630      	mov	r0, r6
   b603a:	f7ff fdd3 	bl	b5be4 <_ZN7FatFile8openRootEP9FatVolume>
   b603e:	e7e9      	b.n	b6014 <_ZN7FatFile4openEPS_PKci+0x16>
    return m_attr;
   b6040:	a809      	add	r0, sp, #36	; 0x24
   b6042:	f7ff fd36 	bl	b5ab2 <_ZN7FatFile8openRootEP9FatVolume.part.0>
    if (!tmpDir.openRoot(dirFile->m_vol)) {
   b6046:	2800      	cmp	r0, #0
   b6048:	d0e3      	beq.n	b6012 <_ZN7FatFile4openEPS_PKci+0x14>
    dirFile = &tmpDir;
   b604a:	ac09      	add	r4, sp, #36	; 0x24
    if (!parsePathName(path, &fname, &path)) {
   b604c:	9801      	ldr	r0, [sp, #4]
   b604e:	aa01      	add	r2, sp, #4
   b6050:	a903      	add	r1, sp, #12
   b6052:	f7ff f9cb 	bl	b53ec <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_>
   b6056:	2800      	cmp	r0, #0
   b6058:	d0db      	beq.n	b6012 <_ZN7FatFile4openEPS_PKci+0x14>
    if (*path == 0) {
   b605a:	9b01      	ldr	r3, [sp, #4]
   b605c:	781b      	ldrb	r3, [r3, #0]
   b605e:	b19b      	cbz	r3, b6088 <_ZN7FatFile4openEPS_PKci+0x8a>
    if (!open(dirFile, &fname, O_RDONLY)) {
   b6060:	2300      	movs	r3, #0
   b6062:	aa03      	add	r2, sp, #12
   b6064:	4621      	mov	r1, r4
   b6066:	4630      	mov	r0, r6
   b6068:	f7ff fb54 	bl	b5714 <_ZN7FatFile4openEPS_P7fname_ti>
   b606c:	2800      	cmp	r0, #0
   b606e:	d0d0      	beq.n	b6012 <_ZN7FatFile4openEPS_PKci+0x14>
    tmpDir = *this;
   b6070:	4635      	mov	r5, r6
   b6072:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6074:	ac09      	add	r4, sp, #36	; 0x24
   b6076:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6078:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b607a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b607c:	682b      	ldr	r3, [r5, #0]
   b607e:	6023      	str	r3, [r4, #0]
    close();
   b6080:	4630      	mov	r0, r6
   b6082:	f7ff ffb5 	bl	b5ff0 <_ZN7FatFile5closeEv>
  while (1) {
   b6086:	e7e0      	b.n	b604a <_ZN7FatFile4openEPS_PKci+0x4c>
  return open(dirFile, &fname, oflag);
   b6088:	463b      	mov	r3, r7
   b608a:	aa03      	add	r2, sp, #12
   b608c:	4621      	mov	r1, r4
   b608e:	4630      	mov	r0, r6
   b6090:	f7ff fb40 	bl	b5714 <_ZN7FatFile4openEPS_P7fname_ti>
   b6094:	e7be      	b.n	b6014 <_ZN7FatFile4openEPS_PKci+0x16>

000b6096 <_ZN7FatFile6removeEPS_PKc>:
bool FatFile::remove(FatFile* dirFile, const char* path) {
   b6096:	b500      	push	{lr}
   b6098:	b08b      	sub	sp, #44	; 0x2c
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   b609a:	2300      	movs	r3, #0
   b609c:	460a      	mov	r2, r1
   b609e:	9301      	str	r3, [sp, #4]
  if (!file.open(dirFile, path, O_WRONLY)) {
   b60a0:	4601      	mov	r1, r0
   b60a2:	2301      	movs	r3, #1
   b60a4:	a801      	add	r0, sp, #4
   b60a6:	f7ff ffaa 	bl	b5ffe <_ZN7FatFile4openEPS_PKci>
   b60aa:	b110      	cbz	r0, b60b2 <_ZN7FatFile6removeEPS_PKc+0x1c>
  return file.remove();
   b60ac:	a801      	add	r0, sp, #4
   b60ae:	f7ff fa7b 	bl	b55a8 <_ZN7FatFile6removeEv>
}
   b60b2:	b00b      	add	sp, #44	; 0x2c
   b60b4:	f85d fb04 	ldr.w	pc, [sp], #4

000b60b8 <_ZN7FatFile5mkdirEPS_P7fname_t>:
bool FatFile::mkdir(FatFile* parent, fname_t* fname) {
   b60b8:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (!parent->isDir()) {
   b60ba:	780b      	ldrb	r3, [r1, #0]
   b60bc:	f013 0f70 	tst.w	r3, #112	; 0x70
bool FatFile::mkdir(FatFile* parent, fname_t* fname) {
   b60c0:	b089      	sub	sp, #36	; 0x24
   b60c2:	4604      	mov	r4, r0
   b60c4:	460e      	mov	r6, r1
  if (!parent->isDir()) {
   b60c6:	d102      	bne.n	b60ce <_ZN7FatFile5mkdirEPS_P7fname_t+0x16>
  return false;
   b60c8:	2000      	movs	r0, #0
}
   b60ca:	b009      	add	sp, #36	; 0x24
   b60cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (!open(parent, fname, O_RDWR | O_CREAT | O_EXCL)) {
   b60ce:	f640 2302 	movw	r3, #2562	; 0xa02
   b60d2:	f7ff fb1f 	bl	b5714 <_ZN7FatFile4openEPS_P7fname_ti>
   b60d6:	2800      	cmp	r0, #0
   b60d8:	d0f6      	beq.n	b60c8 <_ZN7FatFile5mkdirEPS_P7fname_t+0x10>
  m_flags = F_READ;
   b60da:	2701      	movs	r7, #1
  m_attr = FILE_ATTR_SUBDIR;
   b60dc:	2510      	movs	r5, #16
  m_flags = F_READ;
   b60de:	70a7      	strb	r7, [r4, #2]
  m_attr = FILE_ATTR_SUBDIR;
   b60e0:	7025      	strb	r5, [r4, #0]
  if (!addDirCluster()) {
   b60e2:	4620      	mov	r0, r4
   b60e4:	f7ff fd06 	bl	b5af4 <_ZN7FatFile13addDirClusterEv>
   b60e8:	2800      	cmp	r0, #0
   b60ea:	d0ed      	beq.n	b60c8 <_ZN7FatFile5mkdirEPS_P7fname_t+0x10>
  m_firstCluster = m_curCluster;
   b60ec:	6923      	ldr	r3, [r4, #16]
   b60ee:	6223      	str	r3, [r4, #32]
    seekSet(0);
   b60f0:	2100      	movs	r1, #0
   b60f2:	4620      	mov	r0, r4
   b60f4:	f7ff fe5c 	bl	b5db0 <_ZN7FatFile7seekSetEm>
  if (!sync()) {
   b60f8:	4620      	mov	r0, r4
   b60fa:	f7ff ff43 	bl	b5f84 <_ZN7FatFile4syncEv>
   b60fe:	2800      	cmp	r0, #0
   b6100:	d0e2      	beq.n	b60c8 <_ZN7FatFile5mkdirEPS_P7fname_t+0x10>
  dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
   b6102:	4639      	mov	r1, r7
   b6104:	4620      	mov	r0, r4
   b6106:	f7ff fd33 	bl	b5b70 <_ZN7FatFile13cacheDirEntryEh>
  if (!dir) {
   b610a:	2800      	cmp	r0, #0
   b610c:	d0dc      	beq.n	b60c8 <_ZN7FatFile5mkdirEPS_P7fname_t+0x10>
  memcpy(&dot, dir, sizeof(dot));
   b610e:	466a      	mov	r2, sp
  dir->attributes = DIR_ATT_DIRECTORY;
   b6110:	72c5      	strb	r5, [r0, #11]
  memcpy(&dot, dir, sizeof(dot));
   b6112:	4603      	mov	r3, r0
   b6114:	f100 0c20 	add.w	ip, r0, #32
   b6118:	4615      	mov	r5, r2
   b611a:	6818      	ldr	r0, [r3, #0]
   b611c:	6859      	ldr	r1, [r3, #4]
   b611e:	4617      	mov	r7, r2
   b6120:	c703      	stmia	r7!, {r0, r1}
   b6122:	3308      	adds	r3, #8
   b6124:	4563      	cmp	r3, ip
   b6126:	463a      	mov	r2, r7
   b6128:	d1f7      	bne.n	b611a <_ZN7FatFile5mkdirEPS_P7fname_t+0x62>
    dot.name[i] = ' ';
   b612a:	f04f 3320 	mov.w	r3, #538976288	; 0x20202020
  block = m_vol->clusterFirstBlock(m_firstCluster);
   b612e:	6a21      	ldr	r1, [r4, #32]
   b6130:	68a0      	ldr	r0, [r4, #8]
    dot.name[i] = ' ';
   b6132:	f8cd 3001 	str.w	r3, [sp, #1]
   b6136:	f8cd 3005 	str.w	r3, [sp, #5]
   b613a:	f8ad 3009 	strh.w	r3, [sp, #9]
  block = m_vol->clusterFirstBlock(m_firstCluster);
   b613e:	f000 f9a4 	bl	b648a <_ZNK9FatVolume17clusterFirstBlockEm>
   b6142:	4601      	mov	r1, r0
    return m_cache.read(blockNumber, options);
   b6144:	68a0      	ldr	r0, [r4, #8]
   b6146:	2201      	movs	r2, #1
   b6148:	3024      	adds	r0, #36	; 0x24
   b614a:	f000 f97b 	bl	b6444 <_ZN8FatCache4readEmh>
  if (!pc) {
   b614e:	4603      	mov	r3, r0
   b6150:	2800      	cmp	r0, #0
   b6152:	d0b9      	beq.n	b60c8 <_ZN7FatFile5mkdirEPS_P7fname_t+0x10>
  memcpy(&pc->dir[0], &dot, sizeof(dot));
   b6154:	222e      	movs	r2, #46	; 0x2e
   b6156:	f88d 2000 	strb.w	r2, [sp]
   b615a:	46ac      	mov	ip, r5
   b615c:	4607      	mov	r7, r0
   b615e:	f10d 0e20 	add.w	lr, sp, #32
   b6162:	4662      	mov	r2, ip
   b6164:	ca03      	ldmia	r2!, {r0, r1}
   b6166:	4572      	cmp	r2, lr
   b6168:	6038      	str	r0, [r7, #0]
   b616a:	6079      	str	r1, [r7, #4]
   b616c:	4694      	mov	ip, r2
   b616e:	f107 0708 	add.w	r7, r7, #8
   b6172:	d1f6      	bne.n	b6162 <_ZN7FatFile5mkdirEPS_P7fname_t+0xaa>
  dot.name[1] = '.';
   b6174:	222e      	movs	r2, #46	; 0x2e
   b6176:	f88d 2001 	strb.w	r2, [sp, #1]
  dot.firstClusterLow = parent->m_firstCluster & 0XFFFF;
   b617a:	6a32      	ldr	r2, [r6, #32]
   b617c:	f8ad 201a 	strh.w	r2, [sp, #26]
  dot.firstClusterHigh = parent->m_firstCluster >> 16;
   b6180:	0c11      	lsrs	r1, r2, #16
   b6182:	f8ad 1014 	strh.w	r1, [sp, #20]
  memcpy(&pc->dir[1], &dot, sizeof(dot));
   b6186:	462a      	mov	r2, r5
   b6188:	3320      	adds	r3, #32
   b618a:	ae08      	add	r6, sp, #32
   b618c:	4615      	mov	r5, r2
   b618e:	cd03      	ldmia	r5!, {r0, r1}
   b6190:	42b5      	cmp	r5, r6
   b6192:	6018      	str	r0, [r3, #0]
   b6194:	6059      	str	r1, [r3, #4]
   b6196:	462a      	mov	r2, r5
   b6198:	f103 0308 	add.w	r3, r3, #8
   b619c:	d1f6      	bne.n	b618c <_ZN7FatFile5mkdirEPS_P7fname_t+0xd4>
  return m_vol->cacheSync();
   b619e:	68a0      	ldr	r0, [r4, #8]
   b61a0:	f7ff f882 	bl	b52a8 <_ZN9FatVolume9cacheSyncEv>
   b61a4:	e791      	b.n	b60ca <_ZN7FatFile5mkdirEPS_P7fname_t+0x12>

000b61a6 <_ZN7FatFile5mkdirEPS_PKcb>:
bool FatFile::mkdir(FatFile* parent, const char* path, bool pFlag) {
   b61a6:	b5f0      	push	{r4, r5, r6, r7, lr}
   b61a8:	b093      	sub	sp, #76	; 0x4c
   b61aa:	461f      	mov	r7, r3
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   b61ac:	2300      	movs	r3, #0
   b61ae:	9309      	str	r3, [sp, #36]	; 0x24
  if (isOpen() || !parent->isDir()) {
   b61b0:	7803      	ldrb	r3, [r0, #0]
bool FatFile::mkdir(FatFile* parent, const char* path, bool pFlag) {
   b61b2:	9201      	str	r2, [sp, #4]
   b61b4:	4606      	mov	r6, r0
   b61b6:	460c      	mov	r4, r1
  if (isOpen() || !parent->isDir()) {
   b61b8:	b113      	cbz	r3, b61c0 <_ZN7FatFile5mkdirEPS_PKcb+0x1a>
  return false;
   b61ba:	2000      	movs	r0, #0
}
   b61bc:	b013      	add	sp, #76	; 0x4c
   b61be:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (isOpen() || !parent->isDir()) {
   b61c0:	780b      	ldrb	r3, [r1, #0]
   b61c2:	f013 0f70 	tst.w	r3, #112	; 0x70
   b61c6:	d0f8      	beq.n	b61ba <_ZN7FatFile5mkdirEPS_PKcb+0x14>
  if (isDirSeparator(*path)) {
   b61c8:	7813      	ldrb	r3, [r2, #0]
   b61ca:	2b2f      	cmp	r3, #47	; 0x2f
   b61cc:	d10d      	bne.n	b61ea <_ZN7FatFile5mkdirEPS_PKcb+0x44>
    while (isDirSeparator(*path)) {
   b61ce:	9a01      	ldr	r2, [sp, #4]
   b61d0:	7813      	ldrb	r3, [r2, #0]
   b61d2:	2b2f      	cmp	r3, #47	; 0x2f
   b61d4:	d102      	bne.n	b61dc <_ZN7FatFile5mkdirEPS_PKcb+0x36>
      path++;
   b61d6:	3201      	adds	r2, #1
   b61d8:	9201      	str	r2, [sp, #4]
    while (isDirSeparator(*path)) {
   b61da:	e7f8      	b.n	b61ce <_ZN7FatFile5mkdirEPS_PKcb+0x28>
    return m_attr;
   b61dc:	68a1      	ldr	r1, [r4, #8]
   b61de:	a809      	add	r0, sp, #36	; 0x24
   b61e0:	f7ff fc67 	bl	b5ab2 <_ZN7FatFile8openRootEP9FatVolume.part.0>
    if (!tmpDir.openRoot(parent->m_vol)) {
   b61e4:	2800      	cmp	r0, #0
   b61e6:	d0e8      	beq.n	b61ba <_ZN7FatFile5mkdirEPS_PKcb+0x14>
    parent = &tmpDir;
   b61e8:	ac09      	add	r4, sp, #36	; 0x24
    if (!parsePathName(path, &fname, &path)) {
   b61ea:	9801      	ldr	r0, [sp, #4]
   b61ec:	aa01      	add	r2, sp, #4
   b61ee:	a903      	add	r1, sp, #12
   b61f0:	f7ff f8fc 	bl	b53ec <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_>
   b61f4:	2800      	cmp	r0, #0
   b61f6:	d0e0      	beq.n	b61ba <_ZN7FatFile5mkdirEPS_PKcb+0x14>
    if (!*path) {
   b61f8:	9b01      	ldr	r3, [sp, #4]
   b61fa:	781b      	ldrb	r3, [r3, #0]
   b61fc:	b1e3      	cbz	r3, b6238 <_ZN7FatFile5mkdirEPS_PKcb+0x92>
    if (!open(parent, &fname, O_RDONLY)) {
   b61fe:	2300      	movs	r3, #0
   b6200:	aa03      	add	r2, sp, #12
   b6202:	4621      	mov	r1, r4
   b6204:	4630      	mov	r0, r6
   b6206:	f7ff fa85 	bl	b5714 <_ZN7FatFile4openEPS_P7fname_ti>
   b620a:	b158      	cbz	r0, b6224 <_ZN7FatFile5mkdirEPS_PKcb+0x7e>
    tmpDir = *this;
   b620c:	4635      	mov	r5, r6
   b620e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6210:	ac09      	add	r4, sp, #36	; 0x24
   b6212:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6214:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6216:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6218:	682b      	ldr	r3, [r5, #0]
   b621a:	6023      	str	r3, [r4, #0]
    close();
   b621c:	4630      	mov	r0, r6
   b621e:	f7ff fee7 	bl	b5ff0 <_ZN7FatFile5closeEv>
  while (1) {
   b6222:	e7e1      	b.n	b61e8 <_ZN7FatFile5mkdirEPS_PKcb+0x42>
      if (!pFlag || !mkdir(parent, &fname)) {
   b6224:	2f00      	cmp	r7, #0
   b6226:	d0c8      	beq.n	b61ba <_ZN7FatFile5mkdirEPS_PKcb+0x14>
   b6228:	aa03      	add	r2, sp, #12
   b622a:	4621      	mov	r1, r4
   b622c:	4630      	mov	r0, r6
   b622e:	f7ff ff43 	bl	b60b8 <_ZN7FatFile5mkdirEPS_P7fname_t>
   b6232:	2800      	cmp	r0, #0
   b6234:	d1ea      	bne.n	b620c <_ZN7FatFile5mkdirEPS_PKcb+0x66>
   b6236:	e7c0      	b.n	b61ba <_ZN7FatFile5mkdirEPS_PKcb+0x14>
  return mkdir(parent, &fname);
   b6238:	aa03      	add	r2, sp, #12
   b623a:	4621      	mov	r1, r4
   b623c:	4630      	mov	r0, r6
   b623e:	f7ff ff3b 	bl	b60b8 <_ZN7FatFile5mkdirEPS_P7fname_t>
   b6242:	e7bb      	b.n	b61bc <_ZN7FatFile5mkdirEPS_PKcb+0x16>

000b6244 <_ZN7FatFile5writeEPKvj>:

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
   b6244:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & F_WRITE)) {
   b6248:	7803      	ldrb	r3, [r0, #0]
int FatFile::write(const void* buf, size_t nbyte) {
   b624a:	4689      	mov	r9, r1
  if (!isFile() || !(m_flags & F_WRITE)) {
   b624c:	0719      	lsls	r1, r3, #28
int FatFile::write(const void* buf, size_t nbyte) {
   b624e:	4604      	mov	r4, r0
   b6250:	4617      	mov	r7, r2
  if (!isFile() || !(m_flags & F_WRITE)) {
   b6252:	d55b      	bpl.n	b630c <_ZN7FatFile5writeEPKvj+0xc8>
   b6254:	7883      	ldrb	r3, [r0, #2]
   b6256:	079a      	lsls	r2, r3, #30
   b6258:	d558      	bpl.n	b630c <_ZN7FatFile5writeEPKvj+0xc8>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & F_APPEND)) {
   b625a:	071b      	lsls	r3, r3, #28
   b625c:	d451      	bmi.n	b6302 <_ZN7FatFile5writeEPKvj+0xbe>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
   b625e:	6963      	ldr	r3, [r4, #20]
   b6260:	43db      	mvns	r3, r3
   b6262:	42bb      	cmp	r3, r7
   b6264:	d352      	bcc.n	b630c <_ZN7FatFile5writeEPKvj+0xc8>
   b6266:	46b8      	mov	r8, r7
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
    uint16_t blockOffset = m_curPosition & 0X1FF;
    if (blockOfCluster == 0 && blockOffset == 0) {
      // start of new cluster
      if (m_curCluster != 0) {
        int8_t fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   b6268:	f104 0a10 	add.w	sl, r4, #16
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
   b626c:	6966      	ldr	r6, [r4, #20]
  while (nToWrite) {
   b626e:	f1b8 0f00 	cmp.w	r8, #0
   b6272:	f000 8091 	beq.w	b6398 <_ZN7FatFile5writeEPKvj+0x154>
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
   b6276:	68a0      	ldr	r0, [r4, #8]
    return (position >> 9) & m_clusterBlockMask;
   b6278:	7943      	ldrb	r3, [r0, #5]
    uint16_t blockOffset = m_curPosition & 0X1FF;
   b627a:	f3c6 0508 	ubfx	r5, r6, #0, #9
    if (blockOfCluster == 0 && blockOffset == 0) {
   b627e:	ea13 2656 	ands.w	r6, r3, r6, lsr #9
   b6282:	d10e      	bne.n	b62a2 <_ZN7FatFile5writeEPKvj+0x5e>
   b6284:	b96d      	cbnz	r5, b62a2 <_ZN7FatFile5writeEPKvj+0x5e>
      if (m_curCluster != 0) {
   b6286:	6921      	ldr	r1, [r4, #16]
   b6288:	2900      	cmp	r1, #0
   b628a:	d046      	beq.n	b631a <_ZN7FatFile5writeEPKvj+0xd6>
        int8_t fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   b628c:	4652      	mov	r2, sl
   b628e:	f000 f902 	bl	b6496 <_ZN9FatVolume6fatGetEmPm>
        if (fg < 0) {
   b6292:	2800      	cmp	r0, #0
   b6294:	db3a      	blt.n	b630c <_ZN7FatFile5writeEPKvj+0xc8>
          DBG_FAIL_MACRO;
          goto fail;
        }
        if (fg == 0) {
   b6296:	d104      	bne.n	b62a2 <_ZN7FatFile5writeEPKvj+0x5e>
          // add cluster if at end of chain
          if (!addCluster()) {
   b6298:	4620      	mov	r0, r4
   b629a:	f7ff fc20 	bl	b5ade <_ZN7FatFile10addClusterEv>
   b629e:	2800      	cmp	r0, #0
   b62a0:	d034      	beq.n	b630c <_ZN7FatFile5writeEPKvj+0xc8>
          m_curCluster = m_firstCluster;
        }
      }
    }
    // block for data write
    uint32_t block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
   b62a2:	6921      	ldr	r1, [r4, #16]
   b62a4:	68a0      	ldr	r0, [r4, #8]
   b62a6:	f000 f8f0 	bl	b648a <_ZNK9FatVolume17clusterFirstBlockEm>
   b62aa:	1831      	adds	r1, r6, r0

    if (blockOffset != 0 || nToWrite < 512) {
   b62ac:	68a0      	ldr	r0, [r4, #8]
   b62ae:	b915      	cbnz	r5, b62b6 <_ZN7FatFile5writeEPKvj+0x72>
   b62b0:	f5b8 7f00 	cmp.w	r8, #512	; 0x200
   b62b4:	d23f      	bcs.n	b6336 <_ZN7FatFile5writeEPKvj+0xf2>
      // partial block - must use cache
      // max space in block
      n = 512 - blockOffset;
   b62b6:	f5c5 7600 	rsb	r6, r5, #512	; 0x200
      // lesser of space and amount to write
      if (n > nToWrite) {
   b62ba:	4546      	cmp	r6, r8
   b62bc:	bf28      	it	cs
   b62be:	4646      	movcs	r6, r8
        n = nToWrite;
      }

      if (blockOffset == 0 && m_curPosition >= m_fileSize) {
   b62c0:	2d00      	cmp	r5, #0
   b62c2:	d136      	bne.n	b6332 <_ZN7FatFile5writeEPKvj+0xee>
   b62c4:	6962      	ldr	r2, [r4, #20]
   b62c6:	69e3      	ldr	r3, [r4, #28]
        // start of new block don't need to read into cache
        cacheOption = FatCache::CACHE_RESERVE_FOR_WRITE;
   b62c8:	429a      	cmp	r2, r3
   b62ca:	bf34      	ite	cc
   b62cc:	2201      	movcc	r2, #1
   b62ce:	2205      	movcs	r2, #5
    return m_cache.read(blockNumber, options);
   b62d0:	3024      	adds	r0, #36	; 0x24
   b62d2:	f000 f8b7 	bl	b6444 <_ZN8FatCache4readEmh>
      } else {
        // rewrite part of block
        cacheOption = FatCache::CACHE_FOR_WRITE;
      }
      pc = m_vol->cacheFetchData(block, cacheOption);
      if (!pc) {
   b62d6:	b1c8      	cbz	r0, b630c <_ZN7FatFile5writeEPKvj+0xc8>
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc->data + blockOffset;
      memcpy(dst, src, n);
   b62d8:	4428      	add	r0, r5
   b62da:	4632      	mov	r2, r6
   b62dc:	4649      	mov	r1, r9
      if (512 == (n + blockOffset)) {
   b62de:	4435      	add	r5, r6
      memcpy(dst, src, n);
   b62e0:	f003 fa86 	bl	b97f0 <memcpy>
      if (512 == (n + blockOffset)) {
   b62e4:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
   b62e8:	d104      	bne.n	b62f4 <_ZN7FatFile5writeEPKvj+0xb0>
    return m_cache.sync();
   b62ea:	68a0      	ldr	r0, [r4, #8]
   b62ec:	3024      	adds	r0, #36	; 0x24
   b62ee:	f000 f881 	bl	b63f4 <_ZN8FatCache4syncEv>
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
        // invalidate cache if block is in cache
        m_vol->cacheInvalidate();
      }
      if (!m_vol->writeBlocks(block, src, nb)) {
   b62f2:	b158      	cbz	r0, b630c <_ZN7FatFile5writeEPKvj+0xc8>
      if (!m_vol->writeBlock(block, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
   b62f4:	6963      	ldr	r3, [r4, #20]
   b62f6:	4433      	add	r3, r6
   b62f8:	6163      	str	r3, [r4, #20]
    src += n;
   b62fa:	44b1      	add	r9, r6
    nToWrite -= n;
   b62fc:	eba8 0806 	sub.w	r8, r8, r6
  while (nToWrite) {
   b6300:	e7b4      	b.n	b626c <_ZN7FatFile5writeEPKvj+0x28>
    if (!seekSet(m_fileSize)) {
   b6302:	69c1      	ldr	r1, [r0, #28]
   b6304:	f7ff fd54 	bl	b5db0 <_ZN7FatFile7seekSetEm>
   b6308:	2800      	cmp	r0, #0
   b630a:	d1a8      	bne.n	b625e <_ZN7FatFile5writeEPKvj+0x1a>
  }
  return nbyte;

fail:
  // return for write error
  m_error |= WRITE_ERROR;
   b630c:	7863      	ldrb	r3, [r4, #1]
   b630e:	f043 0301 	orr.w	r3, r3, #1
   b6312:	7063      	strb	r3, [r4, #1]
  return -1;
   b6314:	f04f 30ff 	mov.w	r0, #4294967295
   b6318:	e050      	b.n	b63bc <_ZN7FatFile5writeEPKvj+0x178>
        if (m_firstCluster == 0) {
   b631a:	6a23      	ldr	r3, [r4, #32]
   b631c:	b93b      	cbnz	r3, b632e <_ZN7FatFile5writeEPKvj+0xea>
          if (!addCluster()) {
   b631e:	4620      	mov	r0, r4
   b6320:	f7ff fbdd 	bl	b5ade <_ZN7FatFile10addClusterEv>
   b6324:	2800      	cmp	r0, #0
   b6326:	d0f1      	beq.n	b630c <_ZN7FatFile5writeEPKvj+0xc8>
          m_firstCluster = m_curCluster;
   b6328:	6923      	ldr	r3, [r4, #16]
   b632a:	6223      	str	r3, [r4, #32]
   b632c:	e7b9      	b.n	b62a2 <_ZN7FatFile5writeEPKvj+0x5e>
          m_curCluster = m_firstCluster;
   b632e:	6123      	str	r3, [r4, #16]
   b6330:	e7b7      	b.n	b62a2 <_ZN7FatFile5writeEPKvj+0x5e>
        cacheOption = FatCache::CACHE_FOR_WRITE;
   b6332:	2201      	movs	r2, #1
   b6334:	e7cc      	b.n	b62d0 <_ZN7FatFile5writeEPKvj+0x8c>
    } else if (nToWrite >= 1024) {
   b6336:	f5b8 6f80 	cmp.w	r8, #1024	; 0x400
    return m_lbn;
   b633a:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
   b633c:	d31b      	bcc.n	b6376 <_ZN7FatFile5writeEPKvj+0x132>
      uint8_t maxBlocks = m_vol->blocksPerCluster() - blockOfCluster;
   b633e:	f890 c004 	ldrb.w	ip, [r0, #4]
   b6342:	ebac 0606 	sub.w	r6, ip, r6
      if (nb > maxBlocks) {
   b6346:	b2f3      	uxtb	r3, r6
      size_t nb = nToWrite >> 9;
   b6348:	ea4f 2e58 	mov.w	lr, r8, lsr #9
      if (nb > maxBlocks) {
   b634c:	4573      	cmp	r3, lr
   b634e:	bf28      	it	cs
   b6350:	4673      	movcs	r3, lr
          && block < (m_vol->cacheBlockNumber() + nb)) {
   b6352:	4291      	cmp	r1, r2
      n = 512*nb;
   b6354:	ea4f 2643 	mov.w	r6, r3, lsl #9
          && block < (m_vol->cacheBlockNumber() + nb)) {
   b6358:	d307      	bcc.n	b636a <_ZN7FatFile5writeEPKvj+0x126>
   b635a:	441a      	add	r2, r3
   b635c:	428a      	cmp	r2, r1
    m_lbn = 0XFFFFFFFF;
   b635e:	bf82      	ittt	hi
   b6360:	f04f 32ff 	movhi.w	r2, #4294967295
    m_status = 0;
   b6364:	f880 5024 	strbhi.w	r5, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   b6368:	62c2      	strhi	r2, [r0, #44]	; 0x2c
    return m_blockDev->writeBlocks(block, src, nb);
   b636a:	68a5      	ldr	r5, [r4, #8]
   b636c:	464a      	mov	r2, r9
   b636e:	6828      	ldr	r0, [r5, #0]
   b6370:	f000 fc4b 	bl	b6c0a <_ZN9SdSpiCard11writeBlocksEmPKhj>
   b6374:	e7bd      	b.n	b62f2 <_ZN7FatFile5writeEPKvj+0xae>
      if (m_vol->cacheBlockNumber() == block) {
   b6376:	4291      	cmp	r1, r2
    m_lbn = 0XFFFFFFFF;
   b6378:	bf02      	ittt	eq
   b637a:	f04f 33ff 	moveq.w	r3, #4294967295
    m_status = 0;
   b637e:	f880 5024 	strbeq.w	r5, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   b6382:	62c3      	streq	r3, [r0, #44]	; 0x2c
    return m_blockDev->writeBlock(block, src);
   b6384:	68a3      	ldr	r3, [r4, #8]
   b6386:	464a      	mov	r2, r9
   b6388:	6818      	ldr	r0, [r3, #0]
   b638a:	f000 fbc8 	bl	b6b1e <_ZN9SdSpiCard10writeBlockEmPKh>
      if (!m_vol->writeBlock(block, src)) {
   b638e:	2800      	cmp	r0, #0
   b6390:	d0bc      	beq.n	b630c <_ZN7FatFile5writeEPKvj+0xc8>
      n = 512;
   b6392:	f44f 7600 	mov.w	r6, #512	; 0x200
   b6396:	e7ad      	b.n	b62f4 <_ZN7FatFile5writeEPKvj+0xb0>
  if (m_curPosition > m_fileSize) {
   b6398:	69e2      	ldr	r2, [r4, #28]
    m_flags |= F_FILE_DIR_DIRTY;
   b639a:	78a3      	ldrb	r3, [r4, #2]
  if (m_curPosition > m_fileSize) {
   b639c:	42b2      	cmp	r2, r6
   b639e:	d204      	bcs.n	b63aa <_ZN7FatFile5writeEPKvj+0x166>
    m_fileSize = m_curPosition;
   b63a0:	61e6      	str	r6, [r4, #28]
    m_flags |= F_FILE_DIR_DIRTY;
   b63a2:	f043 0304 	orr.w	r3, r3, #4
   b63a6:	70a3      	strb	r3, [r4, #2]
   b63a8:	e003      	b.n	b63b2 <_ZN7FatFile5writeEPKvj+0x16e>
  } else if (m_dateTime) {
   b63aa:	4a08      	ldr	r2, [pc, #32]	; (b63cc <_ZN7FatFile5writeEPKvj+0x188>)
   b63ac:	6812      	ldr	r2, [r2, #0]
   b63ae:	2a00      	cmp	r2, #0
   b63b0:	d1f7      	bne.n	b63a2 <_ZN7FatFile5writeEPKvj+0x15e>
  if (m_flags & F_SYNC) {
   b63b2:	f994 3002 	ldrsb.w	r3, [r4, #2]
   b63b6:	2b00      	cmp	r3, #0
   b63b8:	db02      	blt.n	b63c0 <_ZN7FatFile5writeEPKvj+0x17c>
  return nbyte;
   b63ba:	4638      	mov	r0, r7
}
   b63bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (!sync()) {
   b63c0:	4620      	mov	r0, r4
   b63c2:	f7ff fddf 	bl	b5f84 <_ZN7FatFile4syncEv>
   b63c6:	2800      	cmp	r0, #0
   b63c8:	d1f7      	bne.n	b63ba <_ZN7FatFile5writeEPKvj+0x176>
   b63ca:	e79f      	b.n	b630c <_ZN7FatFile5writeEPKvj+0xc8>
   b63cc:	2003e678 	.word	0x2003e678

000b63d0 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   b63d0:	b513      	push	{r0, r1, r4, lr}
   b63d2:	4604      	mov	r4, r0
    }
   b63d4:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b63d6:	b159      	cbz	r1, b63f0 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b63d8:	9101      	str	r1, [sp, #4]
   b63da:	f003 fa4d 	bl	b9878 <strlen>
   b63de:	6823      	ldr	r3, [r4, #0]
   b63e0:	9901      	ldr	r1, [sp, #4]
   b63e2:	68db      	ldr	r3, [r3, #12]
   b63e4:	4602      	mov	r2, r0
   b63e6:	4620      	mov	r0, r4
    }
   b63e8:	b002      	add	sp, #8
   b63ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b63ee:	4718      	bx	r3
    }
   b63f0:	b002      	add	sp, #8
   b63f2:	bd10      	pop	{r4, pc}

000b63f4 <_ZN8FatCache4syncEv>:
fail:

  return 0;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
   b63f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if (m_status & CACHE_STATUS_DIRTY) {
   b63f6:	7803      	ldrb	r3, [r0, #0]
   b63f8:	07da      	lsls	r2, r3, #31
bool FatCache::sync() {
   b63fa:	4604      	mov	r4, r0
  if (m_status & CACHE_STATUS_DIRTY) {
   b63fc:	d520      	bpl.n	b6440 <_ZN8FatCache4syncEv+0x4c>
   b63fe:	6843      	ldr	r3, [r0, #4]
   b6400:	6881      	ldr	r1, [r0, #8]
    if (!m_vol->writeBlock(m_lbn, m_block.data)) {
   b6402:	f100 020c 	add.w	r2, r0, #12
   b6406:	6818      	ldr	r0, [r3, #0]
   b6408:	9201      	str	r2, [sp, #4]
   b640a:	f000 fb88 	bl	b6b1e <_ZN9SdSpiCard10writeBlockEmPKh>
   b640e:	9a01      	ldr	r2, [sp, #4]
   b6410:	4605      	mov	r5, r0
   b6412:	b918      	cbnz	r0, b641c <_ZN8FatCache4syncEv+0x28>
    m_status &= ~CACHE_STATUS_DIRTY;
  }
  return true;

fail:
  return false;
   b6414:	2500      	movs	r5, #0
}
   b6416:	4628      	mov	r0, r5
   b6418:	b003      	add	sp, #12
   b641a:	bd30      	pop	{r4, r5, pc}
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
   b641c:	7823      	ldrb	r3, [r4, #0]
   b641e:	079b      	lsls	r3, r3, #30
   b6420:	d404      	bmi.n	b642c <_ZN8FatCache4syncEv+0x38>
    m_status &= ~CACHE_STATUS_DIRTY;
   b6422:	7823      	ldrb	r3, [r4, #0]
   b6424:	f023 0301 	bic.w	r3, r3, #1
   b6428:	7023      	strb	r3, [r4, #0]
   b642a:	e7f4      	b.n	b6416 <_ZN8FatCache4syncEv+0x22>
      uint32_t lbn = m_lbn + m_vol->blocksPerFat();
   b642c:	e9d4 3001 	ldrd	r3, r0, [r4, #4]
   b6430:	6919      	ldr	r1, [r3, #16]
   b6432:	4401      	add	r1, r0
   b6434:	6818      	ldr	r0, [r3, #0]
   b6436:	f000 fb72 	bl	b6b1e <_ZN9SdSpiCard10writeBlockEmPKh>
      if (!m_vol->writeBlock(lbn, m_block.data)) {
   b643a:	2800      	cmp	r0, #0
   b643c:	d1f1      	bne.n	b6422 <_ZN8FatCache4syncEv+0x2e>
   b643e:	e7e9      	b.n	b6414 <_ZN8FatCache4syncEv+0x20>
  return true;
   b6440:	2501      	movs	r5, #1
   b6442:	e7e8      	b.n	b6416 <_ZN8FatCache4syncEv+0x22>

000b6444 <_ZN8FatCache4readEmh>:
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
   b6444:	b570      	push	{r4, r5, r6, lr}
  if (m_lbn != lbn) {
   b6446:	6883      	ldr	r3, [r0, #8]
   b6448:	428b      	cmp	r3, r1
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
   b644a:	4604      	mov	r4, r0
   b644c:	460e      	mov	r6, r1
   b644e:	4615      	mov	r5, r2
  if (m_lbn != lbn) {
   b6450:	d009      	beq.n	b6466 <_ZN8FatCache4readEmh+0x22>
    if (!sync()) {
   b6452:	f7ff ffcf 	bl	b63f4 <_ZN8FatCache4syncEv>
   b6456:	b908      	cbnz	r0, b645c <_ZN8FatCache4readEmh+0x18>
  return 0;
   b6458:	2000      	movs	r0, #0
}
   b645a:	bd70      	pop	{r4, r5, r6, pc}
    if (!(option & CACHE_OPTION_NO_READ)) {
   b645c:	076b      	lsls	r3, r5, #29
   b645e:	d50a      	bpl.n	b6476 <_ZN8FatCache4readEmh+0x32>
    m_status = 0;
   b6460:	2300      	movs	r3, #0
   b6462:	7023      	strb	r3, [r4, #0]
    m_lbn = lbn;
   b6464:	60a6      	str	r6, [r4, #8]
  m_status |= option & CACHE_STATUS_MASK;
   b6466:	7822      	ldrb	r2, [r4, #0]
   b6468:	f005 0503 	and.w	r5, r5, #3
   b646c:	4620      	mov	r0, r4
   b646e:	4315      	orrs	r5, r2
   b6470:	f800 5b0c 	strb.w	r5, [r0], #12
  return &m_block;
   b6474:	e7f1      	b.n	b645a <_ZN8FatCache4readEmh+0x16>
    return m_blockDev->readBlock(block, dst);
   b6476:	6863      	ldr	r3, [r4, #4]
   b6478:	f104 020c 	add.w	r2, r4, #12
   b647c:	6818      	ldr	r0, [r3, #0]
   b647e:	4631      	mov	r1, r6
   b6480:	f000 fac4 	bl	b6a0c <_ZN9SdSpiCard9readBlockEmPh>
      if (!m_vol->readBlock(lbn, m_block.data)) {
   b6484:	2800      	cmp	r0, #0
   b6486:	d1eb      	bne.n	b6460 <_ZN8FatCache4readEmh+0x1c>
   b6488:	e7e6      	b.n	b6458 <_ZN8FatCache4readEmh+0x14>

000b648a <_ZNK9FatVolume17clusterFirstBlockEm>:
fail:
  return false;
}
//------------------------------------------------------------------------------
uint32_t FatVolume::clusterFirstBlock(uint32_t cluster) const {
  return m_dataStartBlock + ((cluster - 2) << m_clusterSizeShift);
   b648a:	7983      	ldrb	r3, [r0, #6]
   b648c:	6940      	ldr	r0, [r0, #20]
   b648e:	3902      	subs	r1, #2
   b6490:	4099      	lsls	r1, r3
}
   b6492:	4408      	add	r0, r1
   b6494:	4770      	bx	lr

000b6496 <_ZN9FatVolume6fatGetEmPm>:
  uint32_t lba;
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   b6496:	2901      	cmp	r1, #1
int8_t FatVolume::fatGet(uint32_t cluster, uint32_t* value) {
   b6498:	b570      	push	{r4, r5, r6, lr}
   b649a:	4605      	mov	r5, r0
   b649c:	460c      	mov	r4, r1
   b649e:	4616      	mov	r6, r2
  if (cluster < 2 || cluster > m_lastCluster) {
   b64a0:	d802      	bhi.n	b64a8 <_ZN9FatVolume6fatGetEmPm+0x12>
  }
  *value = next;
  return 1;

fail:
  return -1;
   b64a2:	f04f 30ff 	mov.w	r0, #4294967295
}
   b64a6:	bd70      	pop	{r4, r5, r6, pc}
  if (cluster < 2 || cluster > m_lastCluster) {
   b64a8:	69c3      	ldr	r3, [r0, #28]
   b64aa:	428b      	cmp	r3, r1
   b64ac:	d3f9      	bcc.n	b64a2 <_ZN9FatVolume6fatGetEmPm+0xc>
    return m_fatType;
   b64ae:	79c3      	ldrb	r3, [r0, #7]
  if (fatType() == 32) {
   b64b0:	2b20      	cmp	r3, #32
   b64b2:	d116      	bne.n	b64e2 <_ZN9FatVolume6fatGetEmPm+0x4c>
    lba = m_fatStartBlock + (cluster >> 7);
   b64b4:	6981      	ldr	r1, [r0, #24]
    return m_fatCache.read(blockNumber,
   b64b6:	2202      	movs	r2, #2
   b64b8:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
   b64bc:	f500 700c 	add.w	r0, r0, #560	; 0x230
   b64c0:	f7ff ffc0 	bl	b6444 <_ZN8FatCache4readEmh>
    if (!pc) {
   b64c4:	2800      	cmp	r0, #0
   b64c6:	d0ec      	beq.n	b64a2 <_ZN9FatVolume6fatGetEmPm+0xc>
    next = pc->fat32[cluster & 0X7F] & FAT32MASK;
   b64c8:	f004 047f 	and.w	r4, r4, #127	; 0x7f
   b64cc:	f850 3024 	ldr.w	r3, [r0, r4, lsl #2]
   b64d0:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
  if (isEOC(next)) {
   b64d4:	69ea      	ldr	r2, [r5, #28]
   b64d6:	429a      	cmp	r2, r3
  *value = next;
   b64d8:	bf26      	itte	cs
   b64da:	6033      	strcs	r3, [r6, #0]
  return 1;
   b64dc:	2001      	movcs	r0, #1
    return 0;
   b64de:	2000      	movcc	r0, #0
   b64e0:	e7e1      	b.n	b64a6 <_ZN9FatVolume6fatGetEmPm+0x10>
  if (fatType() == 16) {
   b64e2:	2b10      	cmp	r3, #16
   b64e4:	d1dd      	bne.n	b64a2 <_ZN9FatVolume6fatGetEmPm+0xc>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
   b64e6:	f3c1 2307 	ubfx	r3, r1, #8, #8
   b64ea:	6981      	ldr	r1, [r0, #24]
   b64ec:	2202      	movs	r2, #2
   b64ee:	4419      	add	r1, r3
   b64f0:	f500 700c 	add.w	r0, r0, #560	; 0x230
   b64f4:	f7ff ffa6 	bl	b6444 <_ZN8FatCache4readEmh>
    if (!pc) {
   b64f8:	2800      	cmp	r0, #0
   b64fa:	d0d2      	beq.n	b64a2 <_ZN9FatVolume6fatGetEmPm+0xc>
    next = pc->fat16[cluster & 0XFF];
   b64fc:	b2e4      	uxtb	r4, r4
   b64fe:	f830 3014 	ldrh.w	r3, [r0, r4, lsl #1]
    goto done;
   b6502:	e7e7      	b.n	b64d4 <_ZN9FatVolume6fatGetEmPm+0x3e>

000b6504 <_ZN9FatVolume6fatPutEmm>:
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t lba;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   b6504:	2901      	cmp	r1, #1
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
   b6506:	b538      	push	{r3, r4, r5, lr}
   b6508:	460c      	mov	r4, r1
   b650a:	4615      	mov	r5, r2
  if (cluster < 2 || cluster > m_lastCluster) {
   b650c:	d801      	bhi.n	b6512 <_ZN9FatVolume6fatPutEmm+0xe>
    DBG_FAIL_MACRO;
    goto fail;
  }

fail:
  return false;
   b650e:	2000      	movs	r0, #0
}
   b6510:	bd38      	pop	{r3, r4, r5, pc}
  if (cluster < 2 || cluster > m_lastCluster) {
   b6512:	69c3      	ldr	r3, [r0, #28]
   b6514:	428b      	cmp	r3, r1
   b6516:	d3fa      	bcc.n	b650e <_ZN9FatVolume6fatPutEmm+0xa>
    return m_fatType;
   b6518:	79c3      	ldrb	r3, [r0, #7]
  if (fatType() == 32) {
   b651a:	2b20      	cmp	r3, #32
   b651c:	d10f      	bne.n	b653e <_ZN9FatVolume6fatPutEmm+0x3a>
    lba = m_fatStartBlock + (cluster >> 7);
   b651e:	6981      	ldr	r1, [r0, #24]
    return m_fatCache.read(blockNumber,
   b6520:	2203      	movs	r2, #3
   b6522:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
   b6526:	f500 700c 	add.w	r0, r0, #560	; 0x230
   b652a:	f7ff ff8b 	bl	b6444 <_ZN8FatCache4readEmh>
    if (!pc) {
   b652e:	2800      	cmp	r0, #0
   b6530:	d0ed      	beq.n	b650e <_ZN9FatVolume6fatPutEmm+0xa>
    pc->fat32[cluster & 0X7F] = value;
   b6532:	f004 047f 	and.w	r4, r4, #127	; 0x7f
   b6536:	f840 5024 	str.w	r5, [r0, r4, lsl #2]
    return true;
   b653a:	2001      	movs	r0, #1
   b653c:	e7e8      	b.n	b6510 <_ZN9FatVolume6fatPutEmm+0xc>
  if (fatType() == 16) {
   b653e:	2b10      	cmp	r3, #16
   b6540:	d1e5      	bne.n	b650e <_ZN9FatVolume6fatPutEmm+0xa>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
   b6542:	f3c1 2307 	ubfx	r3, r1, #8, #8
   b6546:	6981      	ldr	r1, [r0, #24]
   b6548:	2203      	movs	r2, #3
   b654a:	4419      	add	r1, r3
   b654c:	f500 700c 	add.w	r0, r0, #560	; 0x230
   b6550:	f7ff ff78 	bl	b6444 <_ZN8FatCache4readEmh>
    if (!pc) {
   b6554:	2800      	cmp	r0, #0
   b6556:	d0da      	beq.n	b650e <_ZN9FatVolume6fatPutEmm+0xa>
    pc->fat16[cluster & 0XFF] = value;
   b6558:	b2e4      	uxtb	r4, r4
   b655a:	f820 5014 	strh.w	r5, [r0, r4, lsl #1]
   b655e:	e7ec      	b.n	b653a <_ZN9FatVolume6fatPutEmm+0x36>

000b6560 <_ZN9FatVolume15allocateClusterEmPm>:
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
   b6560:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if (m_allocSearchStart < current) {
   b6564:	68c4      	ldr	r4, [r0, #12]
   b6566:	428c      	cmp	r4, r1
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
   b6568:	4605      	mov	r5, r0
   b656a:	460e      	mov	r6, r1
   b656c:	4690      	mov	r8, r2
  if (m_allocSearchStart < current) {
   b656e:	d301      	bcc.n	b6574 <_ZN9FatVolume15allocateClusterEmPm+0x14>
      setStart = true;
   b6570:	2701      	movs	r7, #1
   b6572:	e001      	b.n	b6578 <_ZN9FatVolume15allocateClusterEmPm+0x18>
   b6574:	460c      	mov	r4, r1
    setStart = false;
   b6576:	2700      	movs	r7, #0
    if (find > m_lastCluster) {
   b6578:	69eb      	ldr	r3, [r5, #28]
    find++;
   b657a:	3401      	adds	r4, #1
    if (find > m_lastCluster) {
   b657c:	42a3      	cmp	r3, r4
   b657e:	d202      	bcs.n	b6586 <_ZN9FatVolume15allocateClusterEmPm+0x26>
      if (setStart) {
   b6580:	b9c7      	cbnz	r7, b65b4 <_ZN9FatVolume15allocateClusterEmPm+0x54>
      find = m_allocSearchStart;
   b6582:	68ec      	ldr	r4, [r5, #12]
   b6584:	e7f4      	b.n	b6570 <_ZN9FatVolume15allocateClusterEmPm+0x10>
    if (find == current) {
   b6586:	42a6      	cmp	r6, r4
   b6588:	d014      	beq.n	b65b4 <_ZN9FatVolume15allocateClusterEmPm+0x54>
    int8_t fg = fatGet(find, &f);
   b658a:	aa01      	add	r2, sp, #4
   b658c:	4621      	mov	r1, r4
   b658e:	4628      	mov	r0, r5
   b6590:	f7ff ff81 	bl	b6496 <_ZN9FatVolume6fatGetEmPm>
    if (fg < 0) {
   b6594:	2800      	cmp	r0, #0
   b6596:	db0d      	blt.n	b65b4 <_ZN9FatVolume15allocateClusterEmPm+0x54>
    if (fg && f == 0) {
   b6598:	d0ee      	beq.n	b6578 <_ZN9FatVolume15allocateClusterEmPm+0x18>
   b659a:	9b01      	ldr	r3, [sp, #4]
   b659c:	2b00      	cmp	r3, #0
   b659e:	d1eb      	bne.n	b6578 <_ZN9FatVolume15allocateClusterEmPm+0x18>
  if (setStart) {
   b65a0:	b107      	cbz	r7, b65a4 <_ZN9FatVolume15allocateClusterEmPm+0x44>
    m_allocSearchStart = find;
   b65a2:	60ec      	str	r4, [r5, #12]
  }
  uint32_t clusterFirstBlock(uint32_t cluster) const;
  int8_t fatGet(uint32_t cluster, uint32_t* value);
  bool fatPut(uint32_t cluster, uint32_t value);
  bool fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
   b65a4:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
   b65a8:	4621      	mov	r1, r4
   b65aa:	4628      	mov	r0, r5
   b65ac:	f7ff ffaa 	bl	b6504 <_ZN9FatVolume6fatPutEmm>
  if (!fatPutEOC(find)) {
   b65b0:	4607      	mov	r7, r0
   b65b2:	b920      	cbnz	r0, b65be <_ZN9FatVolume15allocateClusterEmPm+0x5e>
  return false;
   b65b4:	2700      	movs	r7, #0
}
   b65b6:	4638      	mov	r0, r7
   b65b8:	b002      	add	sp, #8
   b65ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (current) {
   b65be:	b916      	cbnz	r6, b65c6 <_ZN9FatVolume15allocateClusterEmPm+0x66>
  *next = find;
   b65c0:	f8c8 4000 	str.w	r4, [r8]
  return true;
   b65c4:	e7f7      	b.n	b65b6 <_ZN9FatVolume15allocateClusterEmPm+0x56>
    if (!fatPut(current, find)) {
   b65c6:	4622      	mov	r2, r4
   b65c8:	4631      	mov	r1, r6
   b65ca:	4628      	mov	r0, r5
   b65cc:	f7ff ff9a 	bl	b6504 <_ZN9FatVolume6fatPutEmm>
   b65d0:	2800      	cmp	r0, #0
   b65d2:	d1f5      	bne.n	b65c0 <_ZN9FatVolume15allocateClusterEmPm+0x60>
   b65d4:	e7ee      	b.n	b65b4 <_ZN9FatVolume15allocateClusterEmPm+0x54>

000b65d6 <_ZN9FatVolume9freeChainEm>:
//------------------------------------------------------------------------------
// free a cluster chain
bool FatVolume::freeChain(uint32_t cluster) {
   b65d6:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b65d8:	4605      	mov	r5, r0
   b65da:	460c      	mov	r4, r1
  uint32_t next;
  int8_t fg;
  do {
    fg = fatGet(cluster, &next);
   b65dc:	aa01      	add	r2, sp, #4
   b65de:	4621      	mov	r1, r4
   b65e0:	4628      	mov	r0, r5
   b65e2:	f7ff ff58 	bl	b6496 <_ZN9FatVolume6fatGetEmPm>
    if (fg < 0) {
   b65e6:	1e06      	subs	r6, r0, #0
   b65e8:	db10      	blt.n	b660c <_ZN9FatVolume9freeChainEm+0x36>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // free cluster
    if (!fatPut(cluster, 0)) {
   b65ea:	2200      	movs	r2, #0
   b65ec:	4621      	mov	r1, r4
   b65ee:	4628      	mov	r0, r5
   b65f0:	f7ff ff88 	bl	b6504 <_ZN9FatVolume6fatPutEmm>
   b65f4:	b150      	cbz	r0, b660c <_ZN9FatVolume9freeChainEm+0x36>
      goto fail;
    }
    // Add one to count of free clusters.
    updateFreeClusterCount(1);

    if (cluster <= m_allocSearchStart) {
   b65f6:	68eb      	ldr	r3, [r5, #12]
   b65f8:	42a3      	cmp	r3, r4
      m_allocSearchStart = cluster - 1;
   b65fa:	bf24      	itt	cs
   b65fc:	f104 34ff 	addcs.w	r4, r4, #4294967295
   b6600:	60ec      	strcs	r4, [r5, #12]
    }
    cluster = next;
   b6602:	9c01      	ldr	r4, [sp, #4]
  } while (fg);
   b6604:	2e00      	cmp	r6, #0
   b6606:	d1e9      	bne.n	b65dc <_ZN9FatVolume9freeChainEm+0x6>

  return true;

fail:
  return false;
}
   b6608:	b002      	add	sp, #8
   b660a:	bd70      	pop	{r4, r5, r6, pc}
  return false;
   b660c:	2000      	movs	r0, #0
   b660e:	e7fb      	b.n	b6608 <_ZN9FatVolume9freeChainEm+0x32>

000b6610 <_ZN9FatVolume4initEh>:
  uint32_t volumeStartBlock = 0;
  fat32_boot_t* fbs;
  cache_t* pc;
  uint8_t tmp;
  m_fatType = 0;
  m_allocSearchStart = 1;
   b6610:	2301      	movs	r3, #1
bool FatVolume::init(uint8_t part) {
   b6612:	b570      	push	{r4, r5, r6, lr}
  m_fatType = 0;
   b6614:	2200      	movs	r2, #0
  m_allocSearchStart = 1;
   b6616:	60c3      	str	r3, [r0, #12]
    m_lbn = 0XFFFFFFFF;
   b6618:	f04f 33ff 	mov.w	r3, #4294967295
bool FatVolume::init(uint8_t part) {
   b661c:	4604      	mov	r4, r0
  m_fatType = 0;
   b661e:	71c2      	strb	r2, [r0, #7]
  m_cache.init(this);
   b6620:	f100 0624 	add.w	r6, r0, #36	; 0x24
    m_vol = vol;
   b6624:	6280      	str	r0, [r0, #40]	; 0x28
    m_status = 0;
   b6626:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   b662a:	62c3      	str	r3, [r0, #44]	; 0x2c
    m_vol = vol;
   b662c:	f8c0 0234 	str.w	r0, [r0, #564]	; 0x234
    m_status = 0;
   b6630:	f880 2230 	strb.w	r2, [r0, #560]	; 0x230
    m_lbn = 0XFFFFFFFF;
   b6634:	f8c0 3238 	str.w	r3, [r0, #568]	; 0x238
#if USE_SEPARATE_FAT_CACHE
  m_fatCache.init(this);
#endif  // USE_SEPARATE_FAT_CACHE
  // if part == 0 assume super floppy with FAT boot sector in block zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
   b6638:	460d      	mov	r5, r1
   b663a:	b1b9      	cbz	r1, b666c <_ZN9FatVolume4initEh+0x5c>
    if (part > 4) {
   b663c:	2904      	cmp	r1, #4
   b663e:	d901      	bls.n	b6644 <_ZN9FatVolume4initEh+0x34>
    m_fatType = 32;
  }
  return true;

fail:
  return false;
   b6640:	2000      	movs	r0, #0
}
   b6642:	bd70      	pop	{r4, r5, r6, pc}
    return m_cache.read(blockNumber, options);
   b6644:	4611      	mov	r1, r2
   b6646:	4630      	mov	r0, r6
   b6648:	f7ff fefc 	bl	b6444 <_ZN8FatCache4readEmh>
    if (!pc) {
   b664c:	2800      	cmp	r0, #0
   b664e:	d0f7      	beq.n	b6640 <_ZN9FatVolume4initEh+0x30>
    if ((p->boot & 0X7F) != 0 || p->firstSector == 0) {
   b6650:	eb00 1305 	add.w	r3, r0, r5, lsl #4
   b6654:	f893 31ae 	ldrb.w	r3, [r3, #430]	; 0x1ae
   b6658:	065b      	lsls	r3, r3, #25
   b665a:	d1f1      	bne.n	b6640 <_ZN9FatVolume4initEh+0x30>
   b665c:	f105 011b 	add.w	r1, r5, #27
   b6660:	eb00 1001 	add.w	r0, r0, r1, lsl #4
   b6664:	f8d0 5006 	ldr.w	r5, [r0, #6]
   b6668:	2d00      	cmp	r5, #0
   b666a:	d0e9      	beq.n	b6640 <_ZN9FatVolume4initEh+0x30>
   b666c:	2200      	movs	r2, #0
   b666e:	4629      	mov	r1, r5
   b6670:	4630      	mov	r0, r6
   b6672:	f7ff fee7 	bl	b6444 <_ZN8FatCache4readEmh>
  if (!pc) {
   b6676:	2800      	cmp	r0, #0
   b6678:	d0e2      	beq.n	b6640 <_ZN9FatVolume4initEh+0x30>
  if (fbs->bytesPerSector != 512 ||
   b667a:	f8b0 300b 	ldrh.w	r3, [r0, #11]
   b667e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   b6682:	d1dd      	bne.n	b6640 <_ZN9FatVolume4initEh+0x30>
   b6684:	7c03      	ldrb	r3, [r0, #16]
   b6686:	2b02      	cmp	r3, #2
   b6688:	d1da      	bne.n	b6640 <_ZN9FatVolume4initEh+0x30>
      fbs->fatCount != 2 ||
   b668a:	89c3      	ldrh	r3, [r0, #14]
   b668c:	2b00      	cmp	r3, #0
   b668e:	d0d7      	beq.n	b6640 <_ZN9FatVolume4initEh+0x30>
  m_blocksPerCluster = fbs->sectorsPerCluster;
   b6690:	7b41      	ldrb	r1, [r0, #13]
   b6692:	7121      	strb	r1, [r4, #4]
  m_clusterBlockMask = m_blocksPerCluster - 1;
   b6694:	1e4b      	subs	r3, r1, #1
   b6696:	7163      	strb	r3, [r4, #5]
  m_clusterSizeShift = 0;
   b6698:	2300      	movs	r3, #0
   b669a:	71a3      	strb	r3, [r4, #6]
   b669c:	2609      	movs	r6, #9
  for (tmp = 1; m_blocksPerCluster != tmp; tmp <<= 1, m_clusterSizeShift++) {
   b669e:	2301      	movs	r3, #1
   b66a0:	4299      	cmp	r1, r3
   b66a2:	d007      	beq.n	b66b4 <_ZN9FatVolume4initEh+0xa4>
    if (tmp == 0) {
   b66a4:	3e01      	subs	r6, #1
   b66a6:	d0cb      	beq.n	b6640 <_ZN9FatVolume4initEh+0x30>
  for (tmp = 1; m_blocksPerCluster != tmp; tmp <<= 1, m_clusterSizeShift++) {
   b66a8:	79a2      	ldrb	r2, [r4, #6]
   b66aa:	005b      	lsls	r3, r3, #1
   b66ac:	3201      	adds	r2, #1
   b66ae:	b2db      	uxtb	r3, r3
   b66b0:	71a2      	strb	r2, [r4, #6]
   b66b2:	e7f5      	b.n	b66a0 <_ZN9FatVolume4initEh+0x90>
  m_blocksPerFat = fbs->sectorsPerFat16 ?
   b66b4:	8ac1      	ldrh	r1, [r0, #22]
   b66b6:	b901      	cbnz	r1, b66ba <_ZN9FatVolume4initEh+0xaa>
   b66b8:	6a41      	ldr	r1, [r0, #36]	; 0x24
   b66ba:	6121      	str	r1, [r4, #16]
  m_fatStartBlock = volumeStartBlock + fbs->reservedSectorCount;
   b66bc:	89c3      	ldrh	r3, [r0, #14]
   b66be:	442b      	add	r3, r5
   b66c0:	61a3      	str	r3, [r4, #24]
  m_rootDirEntryCount = fbs->rootDirEntryCount;
   b66c2:	f8b0 2011 	ldrh.w	r2, [r0, #17]
   b66c6:	8122      	strh	r2, [r4, #8]
  m_rootDirStart = m_fatStartBlock + 2 * m_blocksPerFat;
   b66c8:	eb03 0341 	add.w	r3, r3, r1, lsl #1
   b66cc:	6223      	str	r3, [r4, #32]
  m_dataStartBlock = m_rootDirStart + ((32 * fbs->rootDirEntryCount + 511)/512);
   b66ce:	f8b0 1011 	ldrh.w	r1, [r0, #17]
   b66d2:	0149      	lsls	r1, r1, #5
   b66d4:	f201 11ff 	addw	r1, r1, #511	; 0x1ff
   b66d8:	eb03 2351 	add.w	r3, r3, r1, lsr #9
   b66dc:	6163      	str	r3, [r4, #20]
  totalBlocks = fbs->totalSectors16 ?
   b66de:	f8b0 2013 	ldrh.w	r2, [r0, #19]
   b66e2:	b902      	cbnz	r2, b66e6 <_ZN9FatVolume4initEh+0xd6>
   b66e4:	6a02      	ldr	r2, [r0, #32]
  clusterCount = totalBlocks - (m_dataStartBlock - volumeStartBlock);
   b66e6:	1ae9      	subs	r1, r5, r3
  clusterCount >>= m_clusterSizeShift;
   b66e8:	79a3      	ldrb	r3, [r4, #6]
  clusterCount = totalBlocks - (m_dataStartBlock - volumeStartBlock);
   b66ea:	4411      	add	r1, r2
  clusterCount >>= m_clusterSizeShift;
   b66ec:	40d9      	lsrs	r1, r3
  m_lastCluster = clusterCount + 1;
   b66ee:	1c4b      	adds	r3, r1, #1
   b66f0:	61e3      	str	r3, [r4, #28]
  if (clusterCount < 4085) {
   b66f2:	f640 73f4 	movw	r3, #4084	; 0xff4
   b66f6:	4299      	cmp	r1, r3
   b66f8:	d802      	bhi.n	b6700 <_ZN9FatVolume4initEh+0xf0>
    m_fatType = 12;
   b66fa:	230c      	movs	r3, #12
   b66fc:	71e3      	strb	r3, [r4, #7]
   b66fe:	e79f      	b.n	b6640 <_ZN9FatVolume4initEh+0x30>
  } else if (clusterCount < 65525) {
   b6700:	f64f 73f4 	movw	r3, #65524	; 0xfff4
   b6704:	4299      	cmp	r1, r3
    m_rootDirStart = fbs->fat32RootCluster;
   b6706:	bf85      	ittet	hi
   b6708:	6ac3      	ldrhi	r3, [r0, #44]	; 0x2c
   b670a:	6223      	strhi	r3, [r4, #32]
    m_fatType = 16;
   b670c:	2310      	movls	r3, #16
    m_fatType = 32;
   b670e:	2320      	movhi	r3, #32
   b6710:	71e3      	strb	r3, [r4, #7]
  return true;
   b6712:	2001      	movs	r0, #1
   b6714:	e795      	b.n	b6642 <_ZN9FatVolume4initEh+0x32>

000b6716 <_ZN9SdSpiCard7spiSendEh.isra.0>:
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   b6716:	f000 bacb 	b.w	b6cb0 <_ZN14SdSpiAltDriver4sendEh>

000b671a <_ZN9SdSpiCard10spiReceiveEv.isra.0>:
    return m_spiDriver->receive();
   b671a:	f000 baae 	b.w	b6c7a <_ZN14SdSpiAltDriver7receiveEv>
	...

000b6720 <_ZN9SdSpiCard10isTimedOutEtt>:
    spiStop();
  }
  return rtn;
}
//------------------------------------------------------------------------------
bool SdSpiCard::isTimedOut(uint16_t startMS, uint16_t timeoutMS) {
   b6720:	b570      	push	{r4, r5, r6, lr}
#if WDT_YIELD_TIME_MICROS
  static uint32_t last;
  if ((micros() - last) > WDT_YIELD_TIME_MICROS) {
   b6722:	4e0e      	ldr	r6, [pc, #56]	; (b675c <_ZN9SdSpiCard10isTimedOutEtt+0x3c>)
bool SdSpiCard::isTimedOut(uint16_t startMS, uint16_t timeoutMS) {
   b6724:	460d      	mov	r5, r1
   b6726:	4614      	mov	r4, r2
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
   b6728:	f000 ffa4 	bl	b7674 <HAL_Timer_Get_Micro_Seconds>
  if ((micros() - last) > WDT_YIELD_TIME_MICROS) {
   b672c:	6833      	ldr	r3, [r6, #0]
   b672e:	1ac0      	subs	r0, r0, r3
   b6730:	4b0b      	ldr	r3, [pc, #44]	; (b6760 <_ZN9SdSpiCard10isTimedOutEtt+0x40>)
   b6732:	4298      	cmp	r0, r3
   b6734:	d908      	bls.n	b6748 <_ZN9SdSpiCard10isTimedOutEtt+0x28>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b6736:	f000 ffa5 	bl	b7684 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b673a:	4b0a      	ldr	r3, [pc, #40]	; (b6764 <_ZN9SdSpiCard10isTimedOutEtt+0x44>)
   b673c:	6018      	str	r0, [r3, #0]
        spark_cloud_flag_connect();
    }
    static void disconnect(const CloudDisconnectOptions& options = CloudDisconnectOptions());
    static bool process(void) {
            application_checkin();
            return spark_process();
   b673e:	f001 f98d 	bl	b7a5c <spark_process>
   b6742:	f000 ff97 	bl	b7674 <HAL_Timer_Get_Micro_Seconds>
    SysCall::yield();
    last = micros();
   b6746:	6030      	str	r0, [r6, #0]
inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b6748:	f000 ff9c 	bl	b7684 <HAL_Timer_Get_Milli_Seconds>
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
   b674c:	b280      	uxth	r0, r0
   b674e:	1b40      	subs	r0, r0, r5
}
   b6750:	42a0      	cmp	r0, r4
   b6752:	bfd4      	ite	le
   b6754:	2000      	movle	r0, #0
   b6756:	2001      	movgt	r0, #1
   b6758:	bd70      	pop	{r4, r5, r6, pc}
   b675a:	bf00      	nop
   b675c:	2003e680 	.word	0x2003e680
   b6760:	000186a0 	.word	0x000186a0
   b6764:	2003e740 	.word	0x2003e740

000b6768 <_ZN9SdSpiCard8spiStartEv>:
fail:
  spiStop();
  return false;
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStart() {
   b6768:	b538      	push	{r3, r4, r5, lr}
  if (!m_spiActive) {
   b676a:	7a05      	ldrb	r5, [r0, #8]
void SdSpiCard::spiStart() {
   b676c:	4604      	mov	r4, r0
  if (!m_spiActive) {
   b676e:	b94d      	cbnz	r5, b6784 <_ZN9SdSpiCard8spiStartEv+0x1c>
    m_spiDriver->activate();
   b6770:	6840      	ldr	r0, [r0, #4]
   b6772:	f000 fa6b 	bl	b6c4c <_ZN14SdSpiAltDriver8activateEv>
     digitalWrite(m_csPin, LOW);
   b6776:	6863      	ldr	r3, [r4, #4]
   b6778:	4629      	mov	r1, r5
   b677a:	7d18      	ldrb	r0, [r3, #20]
   b677c:	f002 f8e7 	bl	b894e <digitalWrite>
    spiActivate();
    spiSelect();
    m_spiActive = true;
   b6780:	2301      	movs	r3, #1
   b6782:	7223      	strb	r3, [r4, #8]
  }
}
   b6784:	bd38      	pop	{r3, r4, r5, pc}

000b6786 <_ZN9SdSpiCard7spiStopEv>:
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
   b6786:	b510      	push	{r4, lr}
  if (m_spiActive) {
   b6788:	7a03      	ldrb	r3, [r0, #8]
void SdSpiCard::spiStop() {
   b678a:	4604      	mov	r4, r0
  if (m_spiActive) {
   b678c:	b16b      	cbz	r3, b67aa <_ZN9SdSpiCard7spiStopEv+0x24>
    digitalWrite(m_csPin, HIGH);
   b678e:	6843      	ldr	r3, [r0, #4]
   b6790:	2101      	movs	r1, #1
   b6792:	7d18      	ldrb	r0, [r3, #20]
   b6794:	f002 f8db 	bl	b894e <digitalWrite>
    spiUnselect();
    spiSend(0XFF);
   b6798:	6860      	ldr	r0, [r4, #4]
   b679a:	21ff      	movs	r1, #255	; 0xff
   b679c:	f7ff ffbb 	bl	b6716 <_ZN9SdSpiCard7spiSendEh.isra.0>
    m_spiDriver->deactivate();
   b67a0:	6860      	ldr	r0, [r4, #4]
   b67a2:	f000 fa67 	bl	b6c74 <_ZN14SdSpiAltDriver10deactivateEv>
    spiDeactivate();
    m_spiActive = false;
   b67a6:	2300      	movs	r3, #0
   b67a8:	7223      	strb	r3, [r4, #8]
  }
}
   b67aa:	bd10      	pop	{r4, pc}

000b67ac <_ZN9SdSpiCard8readDataEPhj>:
bool SdSpiCard::readData(uint8_t* dst, size_t count) {
   b67ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b67ae:	4604      	mov	r4, r0
   b67b0:	460d      	mov	r5, r1
   b67b2:	4616      	mov	r6, r2
   b67b4:	f000 ff66 	bl	b7684 <HAL_Timer_Get_Milli_Seconds>
#define F(str) (str)
#endif  // F
//------------------------------------------------------------------------------
/** \return the time in milliseconds. */
inline uint16_t curTimeMS() {
  return millis();
   b67b8:	b287      	uxth	r7, r0
  while ((m_status = spiReceive()) == 0XFF) {
   b67ba:	6860      	ldr	r0, [r4, #4]
   b67bc:	f7ff ffad 	bl	b671a <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b67c0:	28ff      	cmp	r0, #255	; 0xff
   b67c2:	7260      	strb	r0, [r4, #9]
   b67c4:	d10e      	bne.n	b67e4 <_ZN9SdSpiCard8readDataEPhj+0x38>
    if (isTimedOut(t0, SD_READ_TIMEOUT)) {
   b67c6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b67ca:	4639      	mov	r1, r7
   b67cc:	4620      	mov	r0, r4
   b67ce:	f7ff ffa7 	bl	b6720 <_ZN9SdSpiCard10isTimedOutEtt>
   b67d2:	2800      	cmp	r0, #0
   b67d4:	d0f1      	beq.n	b67ba <_ZN9SdSpiCard8readDataEPhj+0xe>
    m_errorCode = code;
   b67d6:	2355      	movs	r3, #85	; 0x55
  spiStop();
   b67d8:	4620      	mov	r0, r4
   b67da:	7023      	strb	r3, [r4, #0]
   b67dc:	f7ff ffd3 	bl	b6786 <_ZN9SdSpiCard7spiStopEv>
  return false;
   b67e0:	2000      	movs	r0, #0
}
   b67e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (m_status != DATA_START_BLOCK) {
   b67e4:	28fe      	cmp	r0, #254	; 0xfe
   b67e6:	d001      	beq.n	b67ec <_ZN9SdSpiCard8readDataEPhj+0x40>
   b67e8:	2350      	movs	r3, #80	; 0x50
   b67ea:	e7f5      	b.n	b67d8 <_ZN9SdSpiCard8readDataEPhj+0x2c>
    return  m_spiDriver->receive(buf, n);
   b67ec:	6860      	ldr	r0, [r4, #4]
   b67ee:	4632      	mov	r2, r6
   b67f0:	4629      	mov	r1, r5
   b67f2:	f000 fa47 	bl	b6c84 <_ZN14SdSpiAltDriver7receiveEPhj>
  if ((m_status = spiReceive(dst, count))) {
   b67f6:	7260      	strb	r0, [r4, #9]
   b67f8:	b108      	cbz	r0, b67fe <_ZN9SdSpiCard8readDataEPhj+0x52>
    m_errorCode = code;
   b67fa:	2360      	movs	r3, #96	; 0x60
   b67fc:	e7ec      	b.n	b67d8 <_ZN9SdSpiCard8readDataEPhj+0x2c>
  spiReceive();
   b67fe:	6860      	ldr	r0, [r4, #4]
   b6800:	f7ff ff8b 	bl	b671a <_ZN9SdSpiCard10spiReceiveEv.isra.0>
  spiReceive();
   b6804:	6860      	ldr	r0, [r4, #4]
   b6806:	f7ff ff88 	bl	b671a <_ZN9SdSpiCard10spiReceiveEv.isra.0>
  return true;
   b680a:	2001      	movs	r0, #1
   b680c:	e7e9      	b.n	b67e2 <_ZN9SdSpiCard8readDataEPhj+0x36>

000b680e <_ZN9SdSpiCard11waitNotBusyEt>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// wait for card to go not busy
bool SdSpiCard::waitNotBusy(uint16_t timeoutMS) {
   b680e:	b570      	push	{r4, r5, r6, lr}
   b6810:	4604      	mov	r4, r0
   b6812:	460e      	mov	r6, r1
   b6814:	f000 ff36 	bl	b7684 <HAL_Timer_Get_Milli_Seconds>
   b6818:	b285      	uxth	r5, r0
  uint16_t t0 = curTimeMS();
#if WDT_YIELD_TIME_MICROS
  // Call isTimedOut first to insure yield is called.
  while (!isTimedOut(t0, timeoutMS)) {
   b681a:	4632      	mov	r2, r6
   b681c:	4629      	mov	r1, r5
   b681e:	4620      	mov	r0, r4
   b6820:	f7ff ff7e 	bl	b6720 <_ZN9SdSpiCard10isTimedOutEtt>
   b6824:	b930      	cbnz	r0, b6834 <_ZN9SdSpiCard11waitNotBusyEt+0x26>
    if (spiReceive() == 0XFF) {
   b6826:	6860      	ldr	r0, [r4, #4]
   b6828:	f7ff ff77 	bl	b671a <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b682c:	28ff      	cmp	r0, #255	; 0xff
   b682e:	d1f4      	bne.n	b681a <_ZN9SdSpiCard11waitNotBusyEt+0xc>
      return true;
   b6830:	2001      	movs	r0, #1
      return false;
    }
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
   b6832:	bd70      	pop	{r4, r5, r6, pc}
  return false;
   b6834:	2000      	movs	r0, #0
   b6836:	e7fc      	b.n	b6832 <_ZN9SdSpiCard11waitNotBusyEt+0x24>

000b6838 <_ZN9SdSpiCard11cardCommandEhm>:
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
   b6838:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if (!m_spiActive) {
   b683a:	7a03      	ldrb	r3, [r0, #8]
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
   b683c:	9201      	str	r2, [sp, #4]
   b683e:	4604      	mov	r4, r0
   b6840:	460d      	mov	r5, r1
  if (!m_spiActive) {
   b6842:	b90b      	cbnz	r3, b6848 <_ZN9SdSpiCard11cardCommandEhm+0x10>
    spiStart();
   b6844:	f7ff ff90 	bl	b6768 <_ZN9SdSpiCard8spiStartEv>
  if (cmd != CMD0) {
   b6848:	b125      	cbz	r5, b6854 <_ZN9SdSpiCard11cardCommandEhm+0x1c>
    waitNotBusy(SD_CMD_TIMEOUT);
   b684a:	f44f 7196 	mov.w	r1, #300	; 0x12c
   b684e:	4620      	mov	r0, r4
   b6850:	f7ff ffdd 	bl	b680e <_ZN9SdSpiCard11waitNotBusyEt>
  spiSend(cmd | 0x40);
   b6854:	6860      	ldr	r0, [r4, #4]
   b6856:	f045 0140 	orr.w	r1, r5, #64	; 0x40
   b685a:	f7ff ff5c 	bl	b6716 <_ZN9SdSpiCard7spiSendEh.isra.0>
   b685e:	2603      	movs	r6, #3
    spiSend(pa[i]);
   b6860:	af01      	add	r7, sp, #4
   b6862:	5db9      	ldrb	r1, [r7, r6]
   b6864:	6860      	ldr	r0, [r4, #4]
   b6866:	f7ff ff56 	bl	b6716 <_ZN9SdSpiCard7spiSendEh.isra.0>
  for (int8_t i = 3; i >= 0; i--) {
   b686a:	3e01      	subs	r6, #1
   b686c:	d2f9      	bcs.n	b6862 <_ZN9SdSpiCard11cardCommandEhm+0x2a>
  spiSend(cmd == CMD0 ? 0X95 : 0X87);
   b686e:	2d00      	cmp	r5, #0
   b6870:	6860      	ldr	r0, [r4, #4]
   b6872:	bf0c      	ite	eq
   b6874:	2195      	moveq	r1, #149	; 0x95
   b6876:	2187      	movne	r1, #135	; 0x87
   b6878:	f7ff ff4d 	bl	b6716 <_ZN9SdSpiCard7spiSendEh.isra.0>
  spiReceive();
   b687c:	6860      	ldr	r0, [r4, #4]
   b687e:	f7ff ff4c 	bl	b671a <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b6882:	250b      	movs	r5, #11
  for (uint8_t i = 0; ((m_status = spiReceive()) & 0X80) && i < 10; i++) {
   b6884:	6860      	ldr	r0, [r4, #4]
   b6886:	f7ff ff48 	bl	b671a <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b688a:	0603      	lsls	r3, r0, #24
   b688c:	7260      	strb	r0, [r4, #9]
   b688e:	d503      	bpl.n	b6898 <_ZN9SdSpiCard11cardCommandEhm+0x60>
   b6890:	3d01      	subs	r5, #1
   b6892:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   b6896:	d1f5      	bne.n	b6884 <_ZN9SdSpiCard11cardCommandEhm+0x4c>
}
   b6898:	b003      	add	sp, #12
   b689a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b689c <_ZN9SdSpiCard8cardAcmdEhm>:
  uint8_t cardAcmd(uint8_t cmd, uint32_t arg) {
   b689c:	b570      	push	{r4, r5, r6, lr}
   b689e:	4604      	mov	r4, r0
   b68a0:	460d      	mov	r5, r1
   b68a2:	4616      	mov	r6, r2
    cardCommand(CMD55, 0);
   b68a4:	2137      	movs	r1, #55	; 0x37
   b68a6:	2200      	movs	r2, #0
   b68a8:	f7ff ffc6 	bl	b6838 <_ZN9SdSpiCard11cardCommandEhm>
    return cardCommand(cmd, arg);
   b68ac:	4632      	mov	r2, r6
   b68ae:	4629      	mov	r1, r5
   b68b0:	4620      	mov	r0, r4
  }
   b68b2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return cardCommand(cmd, arg);
   b68b6:	f7ff bfbf 	b.w	b6838 <_ZN9SdSpiCard11cardCommandEhm>
	...

000b68bc <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE>:
bool SdSpiCard::begin(SdSpiDriver* spi, uint8_t csPin, SPISettings settings) {
   b68bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  m_spiActive = false;
   b68c0:	2500      	movs	r5, #0
   b68c2:	7205      	strb	r5, [r0, #8]
  m_errorCode = SD_CARD_ERROR_NONE;
   b68c4:	7005      	strb	r5, [r0, #0]
  m_type = 0;
   b68c6:	7285      	strb	r5, [r0, #10]
  m_spiDriver = spi;
   b68c8:	6041      	str	r1, [r0, #4]
bool SdSpiCard::begin(SdSpiDriver* spi, uint8_t csPin, SPISettings settings) {
   b68ca:	4604      	mov	r4, r0
   b68cc:	4690      	mov	r8, r2
   b68ce:	461e      	mov	r6, r3
   b68d0:	f000 fed8 	bl	b7684 <HAL_Timer_Get_Milli_Seconds>
  m_spiDriver->begin(csPin);
   b68d4:	4641      	mov	r1, r8
   b68d6:	4607      	mov	r7, r0
   b68d8:	6860      	ldr	r0, [r4, #4]
   b68da:	f000 f9bb 	bl	b6c54 <_ZN14SdSpiAltDriver5beginEh>
  m_spiDriver->setSpiSettings(SD_SCK_HZ(250000));
   b68de:	6863      	ldr	r3, [r4, #4]
   b68e0:	4a49      	ldr	r2, [pc, #292]	; (b6a08 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x14c>)
   b68e2:	721d      	strb	r5, [r3, #8]
   b68e4:	2501      	movs	r5, #1
   b68e6:	60da      	str	r2, [r3, #12]
   b68e8:	821d      	strh	r5, [r3, #16]
  spiStart();
   b68ea:	4620      	mov	r0, r4
   b68ec:	f7ff ff3c 	bl	b6768 <_ZN9SdSpiCard8spiStartEv>
   b68f0:	6863      	ldr	r3, [r4, #4]
   b68f2:	4629      	mov	r1, r5
   b68f4:	7d18      	ldrb	r0, [r3, #20]
   b68f6:	f002 f82a 	bl	b894e <digitalWrite>
   b68fa:	250a      	movs	r5, #10
    spiSend(0XFF);
   b68fc:	6860      	ldr	r0, [r4, #4]
   b68fe:	21ff      	movs	r1, #255	; 0xff
  for (uint8_t i = 0; i < 10; i++) {
   b6900:	3d01      	subs	r5, #1
    spiSend(0XFF);
   b6902:	f7ff ff08 	bl	b6716 <_ZN9SdSpiCard7spiSendEh.isra.0>
  for (uint8_t i = 0; i < 10; i++) {
   b6906:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   b690a:	d1f7      	bne.n	b68fc <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x40>
     digitalWrite(m_csPin, LOW);
   b690c:	6863      	ldr	r3, [r4, #4]
   b690e:	4629      	mov	r1, r5
   b6910:	7d18      	ldrb	r0, [r3, #20]
   b6912:	f002 f81c 	bl	b894e <digitalWrite>
  }
   b6916:	250a      	movs	r5, #10
    if (cardCommand(CMD0, 0) == R1_IDLE_STATE) {
   b6918:	2200      	movs	r2, #0
   b691a:	4611      	mov	r1, r2
   b691c:	4620      	mov	r0, r4
   b691e:	f7ff ff8b 	bl	b6838 <_ZN9SdSpiCard11cardCommandEhm>
   b6922:	2801      	cmp	r0, #1
   b6924:	4680      	mov	r8, r0
   b6926:	d018      	beq.n	b695a <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x9e>
    if (i == SD_CMD0_RETRY) {
   b6928:	3d01      	subs	r5, #1
   b692a:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   b692e:	d107      	bne.n	b6940 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x84>
    m_errorCode = code;
   b6930:	2320      	movs	r3, #32
  spiStop();
   b6932:	4620      	mov	r0, r4
   b6934:	7023      	strb	r3, [r4, #0]
   b6936:	f7ff ff26 	bl	b6786 <_ZN9SdSpiCard7spiStopEv>
  return false;
   b693a:	2000      	movs	r0, #0
}
   b693c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    spiSend(STOP_TRAN_TOKEN);
   b6940:	6860      	ldr	r0, [r4, #4]
   b6942:	21fd      	movs	r1, #253	; 0xfd
   b6944:	f7ff fee7 	bl	b6716 <_ZN9SdSpiCard7spiSendEh.isra.0>
   b6948:	f44f 7802 	mov.w	r8, #520	; 0x208
      spiReceive();
   b694c:	6860      	ldr	r0, [r4, #4]
   b694e:	f7ff fee4 	bl	b671a <_ZN9SdSpiCard10spiReceiveEv.isra.0>
    for (int i = 0; i < 520; i++) {
   b6952:	f1b8 0801 	subs.w	r8, r8, #1
   b6956:	d1f9      	bne.n	b694c <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x90>
   b6958:	e7de      	b.n	b6918 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x5c>
  if (cardCommand(CMD8, 0x1AA) == (R1_ILLEGAL_COMMAND | R1_IDLE_STATE)) {
   b695a:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
   b695e:	2108      	movs	r1, #8
   b6960:	4620      	mov	r0, r4
   b6962:	f7ff ff69 	bl	b6838 <_ZN9SdSpiCard11cardCommandEhm>
   b6966:	2805      	cmp	r0, #5
   b6968:	d114      	bne.n	b6994 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xd8>
    m_type = value;
   b696a:	f884 800a 	strb.w	r8, [r4, #10]
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
   b696e:	2500      	movs	r5, #0
   b6970:	b2bf      	uxth	r7, r7
  while (cardAcmd(ACMD41, arg) != R1_READY_STATE) {
   b6972:	462a      	mov	r2, r5
   b6974:	2129      	movs	r1, #41	; 0x29
   b6976:	4620      	mov	r0, r4
   b6978:	f7ff ff90 	bl	b689c <_ZN9SdSpiCard8cardAcmdEhm>
   b697c:	4602      	mov	r2, r0
   b697e:	b1d8      	cbz	r0, b69b8 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xfc>
    if (isTimedOut(t0, SD_INIT_TIMEOUT)) {
   b6980:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
   b6984:	4639      	mov	r1, r7
   b6986:	4620      	mov	r0, r4
   b6988:	f7ff feca 	bl	b6720 <_ZN9SdSpiCard10isTimedOutEtt>
   b698c:	2800      	cmp	r0, #0
   b698e:	d0f0      	beq.n	b6972 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xb6>
    m_errorCode = code;
   b6990:	2343      	movs	r3, #67	; 0x43
   b6992:	e7ce      	b.n	b6932 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x76>
   b6994:	2504      	movs	r5, #4
      m_status = spiReceive();
   b6996:	6860      	ldr	r0, [r4, #4]
   b6998:	f7ff febf 	bl	b671a <_ZN9SdSpiCard10spiReceiveEv.isra.0>
    for (uint8_t i = 0; i < 4; i++) {
   b699c:	3d01      	subs	r5, #1
   b699e:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
      m_status = spiReceive();
   b69a2:	7260      	strb	r0, [r4, #9]
    for (uint8_t i = 0; i < 4; i++) {
   b69a4:	d1f7      	bne.n	b6996 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xda>
    if (m_status == 0XAA) {
   b69a6:	28aa      	cmp	r0, #170	; 0xaa
   b69a8:	d104      	bne.n	b69b4 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xf8>
    m_type = value;
   b69aa:	2302      	movs	r3, #2
   b69ac:	72a3      	strb	r3, [r4, #10]
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
   b69ae:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
   b69b2:	e7dd      	b.n	b6970 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xb4>
    m_errorCode = code;
   b69b4:	2325      	movs	r3, #37	; 0x25
   b69b6:	e7bc      	b.n	b6932 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x76>
  if (type() == SD_CARD_TYPE_SD2) {
   b69b8:	7aa3      	ldrb	r3, [r4, #10]
   b69ba:	2b02      	cmp	r3, #2
   b69bc:	d118      	bne.n	b69f0 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x134>
    if (cardCommand(CMD58, 0)) {
   b69be:	213a      	movs	r1, #58	; 0x3a
   b69c0:	4620      	mov	r0, r4
   b69c2:	f7ff ff39 	bl	b6838 <_ZN9SdSpiCard11cardCommandEhm>
   b69c6:	b108      	cbz	r0, b69cc <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x110>
   b69c8:	2337      	movs	r3, #55	; 0x37
   b69ca:	e7b2      	b.n	b6932 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x76>
    if ((spiReceive() & 0XC0) == 0XC0) {
   b69cc:	6860      	ldr	r0, [r4, #4]
   b69ce:	f7ff fea4 	bl	b671a <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b69d2:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
   b69d6:	28c0      	cmp	r0, #192	; 0xc0
    m_type = value;
   b69d8:	bf04      	itt	eq
   b69da:	2303      	moveq	r3, #3
   b69dc:	72a3      	strbeq	r3, [r4, #10]
      spiReceive();
   b69de:	6860      	ldr	r0, [r4, #4]
   b69e0:	f7ff fe9b 	bl	b671a <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b69e4:	6860      	ldr	r0, [r4, #4]
   b69e6:	f7ff fe98 	bl	b671a <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b69ea:	6860      	ldr	r0, [r4, #4]
   b69ec:	f7ff fe95 	bl	b671a <_ZN9SdSpiCard10spiReceiveEv.isra.0>
  spiStop();
   b69f0:	4620      	mov	r0, r4
   b69f2:	f7ff fec8 	bl	b6786 <_ZN9SdSpiCard7spiStopEv>
  m_spiDriver->setSpiSettings(settings);
   b69f6:	6863      	ldr	r3, [r4, #4]
   b69f8:	7930      	ldrb	r0, [r6, #4]
   b69fa:	68b1      	ldr	r1, [r6, #8]
   b69fc:	89b2      	ldrh	r2, [r6, #12]
   b69fe:	821a      	strh	r2, [r3, #16]
   b6a00:	7218      	strb	r0, [r3, #8]
   b6a02:	60d9      	str	r1, [r3, #12]
  return true;
   b6a04:	2001      	movs	r0, #1
   b6a06:	e799      	b.n	b693c <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x80>
   b6a08:	0003d090 	.word	0x0003d090

000b6a0c <_ZN9SdSpiCard9readBlockEmPh>:
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   b6a0c:	b538      	push	{r3, r4, r5, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
   b6a0e:	7a83      	ldrb	r3, [r0, #10]
   b6a10:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
   b6a12:	bf18      	it	ne
   b6a14:	0249      	lslne	r1, r1, #9
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   b6a16:	4615      	mov	r5, r2
  if (cardCommand(CMD17, blockNumber)) {
   b6a18:	460a      	mov	r2, r1
   b6a1a:	2111      	movs	r1, #17
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   b6a1c:	4604      	mov	r4, r0
  if (cardCommand(CMD17, blockNumber)) {
   b6a1e:	f7ff ff0b 	bl	b6838 <_ZN9SdSpiCard11cardCommandEhm>
   b6a22:	b130      	cbz	r0, b6a32 <_ZN9SdSpiCard9readBlockEmPh+0x26>
    m_errorCode = code;
   b6a24:	2330      	movs	r3, #48	; 0x30
   b6a26:	7023      	strb	r3, [r4, #0]
  spiStop();
   b6a28:	4620      	mov	r0, r4
   b6a2a:	f7ff feac 	bl	b6786 <_ZN9SdSpiCard7spiStopEv>
  return false;
   b6a2e:	2500      	movs	r5, #0
   b6a30:	e00b      	b.n	b6a4a <_ZN9SdSpiCard9readBlockEmPh+0x3e>
  if (!readData(dst, 512)) {
   b6a32:	4629      	mov	r1, r5
   b6a34:	f44f 7200 	mov.w	r2, #512	; 0x200
   b6a38:	4620      	mov	r0, r4
   b6a3a:	f7ff feb7 	bl	b67ac <_ZN9SdSpiCard8readDataEPhj>
   b6a3e:	4605      	mov	r5, r0
   b6a40:	2800      	cmp	r0, #0
   b6a42:	d0f1      	beq.n	b6a28 <_ZN9SdSpiCard9readBlockEmPh+0x1c>
  spiStop();
   b6a44:	4620      	mov	r0, r4
   b6a46:	f7ff fe9e 	bl	b6786 <_ZN9SdSpiCard7spiStopEv>
}
   b6a4a:	4628      	mov	r0, r5
   b6a4c:	bd38      	pop	{r3, r4, r5, pc}

000b6a4e <_ZN9SdSpiCard9readStartEm>:
bool SdSpiCard::readStart(uint32_t blockNumber) {
   b6a4e:	b510      	push	{r4, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
   b6a50:	7a83      	ldrb	r3, [r0, #10]
   b6a52:	2b03      	cmp	r3, #3
bool SdSpiCard::readStart(uint32_t blockNumber) {
   b6a54:	460a      	mov	r2, r1
    blockNumber <<= 9;
   b6a56:	bf18      	it	ne
   b6a58:	024a      	lslne	r2, r1, #9
  if (cardCommand(CMD18, blockNumber)) {
   b6a5a:	2112      	movs	r1, #18
bool SdSpiCard::readStart(uint32_t blockNumber) {
   b6a5c:	4604      	mov	r4, r0
  if (cardCommand(CMD18, blockNumber)) {
   b6a5e:	f7ff feeb 	bl	b6838 <_ZN9SdSpiCard11cardCommandEhm>
   b6a62:	b130      	cbz	r0, b6a72 <_ZN9SdSpiCard9readStartEm+0x24>
   b6a64:	2331      	movs	r3, #49	; 0x31
  spiStop();
   b6a66:	4620      	mov	r0, r4
   b6a68:	7023      	strb	r3, [r4, #0]
   b6a6a:	f7ff fe8c 	bl	b6786 <_ZN9SdSpiCard7spiStopEv>
  return false;
   b6a6e:	2000      	movs	r0, #0
}
   b6a70:	bd10      	pop	{r4, pc}
  return true;
   b6a72:	2001      	movs	r0, #1
   b6a74:	e7fc      	b.n	b6a70 <_ZN9SdSpiCard9readStartEm+0x22>

000b6a76 <_ZN9SdSpiCard8readStopEv>:
bool SdSpiCard::readStop() {
   b6a76:	b510      	push	{r4, lr}
  if (cardCommand(CMD12, 0)) {
   b6a78:	2200      	movs	r2, #0
   b6a7a:	210c      	movs	r1, #12
bool SdSpiCard::readStop() {
   b6a7c:	4604      	mov	r4, r0
  if (cardCommand(CMD12, 0)) {
   b6a7e:	f7ff fedb 	bl	b6838 <_ZN9SdSpiCard11cardCommandEhm>
   b6a82:	b130      	cbz	r0, b6a92 <_ZN9SdSpiCard8readStopEv+0x1c>
   b6a84:	2328      	movs	r3, #40	; 0x28
  spiStop();
   b6a86:	4620      	mov	r0, r4
   b6a88:	7023      	strb	r3, [r4, #0]
   b6a8a:	f7ff fe7c 	bl	b6786 <_ZN9SdSpiCard7spiStopEv>
  return false;
   b6a8e:	2000      	movs	r0, #0
}
   b6a90:	bd10      	pop	{r4, pc}
  spiStop();
   b6a92:	4620      	mov	r0, r4
   b6a94:	f7ff fe77 	bl	b6786 <_ZN9SdSpiCard7spiStopEv>
  return true;
   b6a98:	2001      	movs	r0, #1
   b6a9a:	e7f9      	b.n	b6a90 <_ZN9SdSpiCard8readStopEv+0x1a>

000b6a9c <_ZN9SdSpiCard10readBlocksEmPhj>:
bool SdSpiCard::readBlocks(uint32_t block, uint8_t* dst, size_t count) {
   b6a9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6a9e:	4604      	mov	r4, r0
   b6aa0:	4616      	mov	r6, r2
   b6aa2:	461f      	mov	r7, r3
  if (!readStart(block)) {
   b6aa4:	f7ff ffd3 	bl	b6a4e <_ZN9SdSpiCard9readStartEm>
   b6aa8:	b168      	cbz	r0, b6ac6 <_ZN9SdSpiCard10readBlocksEmPhj+0x2a>
   b6aaa:	2500      	movs	r5, #0
  for (uint16_t b = 0; b < count; b++, dst += 512) {
   b6aac:	b2ab      	uxth	r3, r5
   b6aae:	429f      	cmp	r7, r3
   b6ab0:	eb06 2145 	add.w	r1, r6, r5, lsl #9
   b6ab4:	d909      	bls.n	b6aca <_ZN9SdSpiCard10readBlocksEmPhj+0x2e>
    if (!readData(dst, 512)) {
   b6ab6:	f44f 7200 	mov.w	r2, #512	; 0x200
   b6aba:	4620      	mov	r0, r4
   b6abc:	f7ff fe76 	bl	b67ac <_ZN9SdSpiCard8readDataEPhj>
   b6ac0:	3501      	adds	r5, #1
   b6ac2:	2800      	cmp	r0, #0
   b6ac4:	d1f2      	bne.n	b6aac <_ZN9SdSpiCard10readBlocksEmPhj+0x10>
}
   b6ac6:	2000      	movs	r0, #0
   b6ac8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return readStop();
   b6aca:	4620      	mov	r0, r4
}
   b6acc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return readStop();
   b6ad0:	f7ff bfd1 	b.w	b6a76 <_ZN9SdSpiCard8readStopEv>

000b6ad4 <_ZN9SdSpiCard9writeDataEhPKh>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send one block of data for write block or write multiple blocks
bool SdSpiCard::writeData(uint8_t token, const uint8_t* src) {
   b6ad4:	b538      	push	{r3, r4, r5, lr}
   b6ad6:	4604      	mov	r4, r0
   b6ad8:	4615      	mov	r5, r2
#if USE_SD_CRC
  uint16_t crc = CRC_CCITT(src, 512);
#else  // USE_SD_CRC
  uint16_t crc = 0XFFFF;
#endif  // USE_SD_CRC
  spiSend(token);
   b6ada:	6840      	ldr	r0, [r0, #4]
   b6adc:	f7ff fe1b 	bl	b6716 <_ZN9SdSpiCard7spiSendEh.isra.0>
  }
  void spiSend(const uint8_t* buf, size_t n) {
    m_spiDriver->send(buf, n);
   b6ae0:	f44f 7200 	mov.w	r2, #512	; 0x200
   b6ae4:	6860      	ldr	r0, [r4, #4]
   b6ae6:	4629      	mov	r1, r5
   b6ae8:	f000 f8e6 	bl	b6cb8 <_ZN14SdSpiAltDriver4sendEPKhj>
  spiSend(src, 512);
  spiSend(crc >> 8);
   b6aec:	6860      	ldr	r0, [r4, #4]
   b6aee:	21ff      	movs	r1, #255	; 0xff
   b6af0:	f7ff fe11 	bl	b6716 <_ZN9SdSpiCard7spiSendEh.isra.0>
  spiSend(crc & 0XFF);
   b6af4:	6860      	ldr	r0, [r4, #4]
   b6af6:	21ff      	movs	r1, #255	; 0xff
   b6af8:	f7ff fe0d 	bl	b6716 <_ZN9SdSpiCard7spiSendEh.isra.0>

  m_status = spiReceive();
   b6afc:	6860      	ldr	r0, [r4, #4]
   b6afe:	f7ff fe0c 	bl	b671a <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b6b02:	7260      	strb	r0, [r4, #9]
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
   b6b04:	f000 001f 	and.w	r0, r0, #31
   b6b08:	2805      	cmp	r0, #5
   b6b0a:	d006      	beq.n	b6b1a <_ZN9SdSpiCard9writeDataEhPKh+0x46>
    m_errorCode = code;
   b6b0c:	2357      	movs	r3, #87	; 0x57
    goto fail;
  }
  return true;

fail:
  spiStop();
   b6b0e:	4620      	mov	r0, r4
   b6b10:	7023      	strb	r3, [r4, #0]
   b6b12:	f7ff fe38 	bl	b6786 <_ZN9SdSpiCard7spiStopEv>
  return false;
   b6b16:	2000      	movs	r0, #0
}
   b6b18:	bd38      	pop	{r3, r4, r5, pc}
  return true;
   b6b1a:	2001      	movs	r0, #1
   b6b1c:	e7fc      	b.n	b6b18 <_ZN9SdSpiCard9writeDataEhPKh+0x44>

000b6b1e <_ZN9SdSpiCard10writeBlockEmPKh>:
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   b6b1e:	b570      	push	{r4, r5, r6, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
   b6b20:	7a83      	ldrb	r3, [r0, #10]
   b6b22:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
   b6b24:	bf18      	it	ne
   b6b26:	0249      	lslne	r1, r1, #9
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   b6b28:	4615      	mov	r5, r2
  if (cardCommand(CMD24, blockNumber)) {
   b6b2a:	460a      	mov	r2, r1
   b6b2c:	2118      	movs	r1, #24
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   b6b2e:	4604      	mov	r4, r0
  if (cardCommand(CMD24, blockNumber)) {
   b6b30:	f7ff fe82 	bl	b6838 <_ZN9SdSpiCard11cardCommandEhm>
   b6b34:	4606      	mov	r6, r0
   b6b36:	b130      	cbz	r0, b6b46 <_ZN9SdSpiCard10writeBlockEmPKh+0x28>
   b6b38:	2332      	movs	r3, #50	; 0x32
   b6b3a:	7023      	strb	r3, [r4, #0]
  spiStop();
   b6b3c:	4620      	mov	r0, r4
   b6b3e:	f7ff fe22 	bl	b6786 <_ZN9SdSpiCard7spiStopEv>
  return false;
   b6b42:	2500      	movs	r5, #0
   b6b44:	e01f      	b.n	b6b86 <_ZN9SdSpiCard10writeBlockEmPKh+0x68>
  if (!writeData(DATA_START_BLOCK, src)) {
   b6b46:	462a      	mov	r2, r5
   b6b48:	21fe      	movs	r1, #254	; 0xfe
   b6b4a:	4620      	mov	r0, r4
   b6b4c:	f7ff ffc2 	bl	b6ad4 <_ZN9SdSpiCard9writeDataEhPKh>
   b6b50:	2800      	cmp	r0, #0
   b6b52:	d0f3      	beq.n	b6b3c <_ZN9SdSpiCard10writeBlockEmPKh+0x1e>
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   b6b54:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
   b6b58:	4620      	mov	r0, r4
   b6b5a:	f7ff fe58 	bl	b680e <_ZN9SdSpiCard11waitNotBusyEt>
   b6b5e:	4605      	mov	r5, r0
   b6b60:	b908      	cbnz	r0, b6b66 <_ZN9SdSpiCard10writeBlockEmPKh+0x48>
   b6b62:	235a      	movs	r3, #90	; 0x5a
   b6b64:	e7e9      	b.n	b6b3a <_ZN9SdSpiCard10writeBlockEmPKh+0x1c>
  if (cardCommand(CMD13, 0) || spiReceive()) {
   b6b66:	4632      	mov	r2, r6
   b6b68:	210d      	movs	r1, #13
   b6b6a:	4620      	mov	r0, r4
   b6b6c:	f7ff fe64 	bl	b6838 <_ZN9SdSpiCard11cardCommandEhm>
   b6b70:	b108      	cbz	r0, b6b76 <_ZN9SdSpiCard10writeBlockEmPKh+0x58>
   b6b72:	2329      	movs	r3, #41	; 0x29
   b6b74:	e7e1      	b.n	b6b3a <_ZN9SdSpiCard10writeBlockEmPKh+0x1c>
   b6b76:	6860      	ldr	r0, [r4, #4]
   b6b78:	f7ff fdcf 	bl	b671a <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b6b7c:	2800      	cmp	r0, #0
   b6b7e:	d1f8      	bne.n	b6b72 <_ZN9SdSpiCard10writeBlockEmPKh+0x54>
  spiStop();
   b6b80:	4620      	mov	r0, r4
   b6b82:	f7ff fe00 	bl	b6786 <_ZN9SdSpiCard7spiStopEv>
}
   b6b86:	4628      	mov	r0, r5
   b6b88:	bd70      	pop	{r4, r5, r6, pc}

000b6b8a <_ZN9SdSpiCard9writeDataEPKh>:
bool SdSpiCard::writeData(const uint8_t* src) {
   b6b8a:	b513      	push	{r0, r1, r4, lr}
   b6b8c:	9101      	str	r1, [sp, #4]
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   b6b8e:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
bool SdSpiCard::writeData(const uint8_t* src) {
   b6b92:	4604      	mov	r4, r0
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   b6b94:	f7ff fe3b 	bl	b680e <_ZN9SdSpiCard11waitNotBusyEt>
   b6b98:	9a01      	ldr	r2, [sp, #4]
   b6b9a:	b930      	cbnz	r0, b6baa <_ZN9SdSpiCard9writeDataEPKh+0x20>
   b6b9c:	235b      	movs	r3, #91	; 0x5b
   b6b9e:	7023      	strb	r3, [r4, #0]
  spiStop();
   b6ba0:	4620      	mov	r0, r4
   b6ba2:	f7ff fdf0 	bl	b6786 <_ZN9SdSpiCard7spiStopEv>
  return false;
   b6ba6:	2000      	movs	r0, #0
   b6ba8:	e005      	b.n	b6bb6 <_ZN9SdSpiCard9writeDataEPKh+0x2c>
  if (!writeData(WRITE_MULTIPLE_TOKEN, src)) {
   b6baa:	21fc      	movs	r1, #252	; 0xfc
   b6bac:	4620      	mov	r0, r4
   b6bae:	f7ff ff91 	bl	b6ad4 <_ZN9SdSpiCard9writeDataEhPKh>
   b6bb2:	2800      	cmp	r0, #0
   b6bb4:	d0f4      	beq.n	b6ba0 <_ZN9SdSpiCard9writeDataEPKh+0x16>
}
   b6bb6:	b002      	add	sp, #8
   b6bb8:	bd10      	pop	{r4, pc}

000b6bba <_ZN9SdSpiCard10writeStartEm>:
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   b6bba:	b510      	push	{r4, lr}
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
   b6bbc:	7a83      	ldrb	r3, [r0, #10]
   b6bbe:	2b03      	cmp	r3, #3
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   b6bc0:	460a      	mov	r2, r1
    blockNumber <<= 9;
   b6bc2:	bf18      	it	ne
   b6bc4:	024a      	lslne	r2, r1, #9
  }
  if (cardCommand(CMD25, blockNumber)) {
   b6bc6:	2119      	movs	r1, #25
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   b6bc8:	4604      	mov	r4, r0
  if (cardCommand(CMD25, blockNumber)) {
   b6bca:	f7ff fe35 	bl	b6838 <_ZN9SdSpiCard11cardCommandEhm>
   b6bce:	b130      	cbz	r0, b6bde <_ZN9SdSpiCard10writeStartEm+0x24>
   b6bd0:	2333      	movs	r3, #51	; 0x33
    goto fail;
  }
  return true;

fail:
  spiStop();
   b6bd2:	4620      	mov	r0, r4
   b6bd4:	7023      	strb	r3, [r4, #0]
   b6bd6:	f7ff fdd6 	bl	b6786 <_ZN9SdSpiCard7spiStopEv>
  return false;
   b6bda:	2000      	movs	r0, #0
}
   b6bdc:	bd10      	pop	{r4, pc}
  return true;
   b6bde:	2001      	movs	r0, #1
   b6be0:	e7fc      	b.n	b6bdc <_ZN9SdSpiCard10writeStartEm+0x22>

000b6be2 <_ZN9SdSpiCard9writeStopEv>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStop() {
   b6be2:	b538      	push	{r3, r4, r5, lr}
  DBG_BEGIN_TIME(DBG_WRITE_STOP);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   b6be4:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
bool SdSpiCard::writeStop() {
   b6be8:	4604      	mov	r4, r0
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   b6bea:	f7ff fe10 	bl	b680e <_ZN9SdSpiCard11waitNotBusyEt>
   b6bee:	4605      	mov	r5, r0
   b6bf0:	b930      	cbnz	r0, b6c00 <_ZN9SdSpiCard9writeStopEv+0x1e>
   b6bf2:	2356      	movs	r3, #86	; 0x56
   b6bf4:	7023      	strb	r3, [r4, #0]
    goto fail;
  }
  DBG_END_TIME(DBG_WRITE_STOP);
  spiSend(STOP_TRAN_TOKEN);
  spiStop();
   b6bf6:	4620      	mov	r0, r4
   b6bf8:	f7ff fdc5 	bl	b6786 <_ZN9SdSpiCard7spiStopEv>

fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  spiStop();
  return false;
}
   b6bfc:	4628      	mov	r0, r5
   b6bfe:	bd38      	pop	{r3, r4, r5, pc}
  spiSend(STOP_TRAN_TOKEN);
   b6c00:	6860      	ldr	r0, [r4, #4]
   b6c02:	21fd      	movs	r1, #253	; 0xfd
   b6c04:	f7ff fd87 	bl	b6716 <_ZN9SdSpiCard7spiSendEh.isra.0>
   b6c08:	e7f5      	b.n	b6bf6 <_ZN9SdSpiCard9writeStopEv+0x14>

000b6c0a <_ZN9SdSpiCard11writeBlocksEmPKhj>:
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
   b6c0a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6c0c:	4604      	mov	r4, r0
   b6c0e:	4616      	mov	r6, r2
   b6c10:	461f      	mov	r7, r3
  if (!writeStart(block)) {
   b6c12:	f7ff ffd2 	bl	b6bba <_ZN9SdSpiCard10writeStartEm>
   b6c16:	b170      	cbz	r0, b6c36 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2c>
  for (size_t b = 0; b < count; b++, src += 512) {
   b6c18:	2500      	movs	r5, #0
   b6c1a:	42bd      	cmp	r5, r7
   b6c1c:	eb06 2145 	add.w	r1, r6, r5, lsl #9
  return writeStop();
   b6c20:	4620      	mov	r0, r4
  for (size_t b = 0; b < count; b++, src += 512) {
   b6c22:	d004      	beq.n	b6c2e <_ZN9SdSpiCard11writeBlocksEmPKhj+0x24>
    if (!writeData(src)) {
   b6c24:	f7ff ffb1 	bl	b6b8a <_ZN9SdSpiCard9writeDataEPKh>
   b6c28:	b128      	cbz	r0, b6c36 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2c>
  for (size_t b = 0; b < count; b++, src += 512) {
   b6c2a:	3501      	adds	r5, #1
   b6c2c:	e7f5      	b.n	b6c1a <_ZN9SdSpiCard11writeBlocksEmPKhj+0x10>
}
   b6c2e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return writeStop();
   b6c32:	f7ff bfd6 	b.w	b6be2 <_ZN9SdSpiCard9writeStopEv>
  spiStop();
   b6c36:	4620      	mov	r0, r4
   b6c38:	f7ff fda5 	bl	b6786 <_ZN9SdSpiCard7spiStopEv>
}
   b6c3c:	2000      	movs	r0, #0
   b6c3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b6c40 <_ZL36SD_SPI_DMA_TransferComplete_Callbackv>:
#if defined(PLATFORM_ID)
#include "SdSpiDriver.h"
static volatile bool SPI_DMA_TransferCompleted = false;
//-----------------------------------------------------------------------------
static void SD_SPI_DMA_TransferComplete_Callback(void) {
    SPI_DMA_TransferCompleted = true;
   b6c40:	4b01      	ldr	r3, [pc, #4]	; (b6c48 <_ZL36SD_SPI_DMA_TransferComplete_Callbackv+0x8>)
   b6c42:	2201      	movs	r2, #1
   b6c44:	701a      	strb	r2, [r3, #0]
}
   b6c46:	4770      	bx	lr
   b6c48:	2003e684 	.word	0x2003e684

000b6c4c <_ZN14SdSpiAltDriver8activateEv>:
/** Set SPI options for access to SD/SDHC cards.
 *
 * \param[in] divisor SCK clock divider relative to the APB1 or APB2 clock.
 */
void SdSpiAltDriver::activate() {
  m_spi->beginTransaction(m_spiSettings);
   b6c4c:	1d01      	adds	r1, r0, #4
   b6c4e:	6800      	ldr	r0, [r0, #0]
   b6c50:	f000 bfe0 	b.w	b7c14 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>

000b6c54 <_ZN14SdSpiAltDriver5beginEh>:
//------------------------------------------------------------------------------
/** Initialize the SPI bus.
 *
 * \param[in] chipSelectPin SD card chip select pin.
 */
void SdSpiAltDriver::begin(uint8_t csPin) {
   b6c54:	b510      	push	{r4, lr}
   b6c56:	4604      	mov	r4, r0
  m_csPin = csPin;
   b6c58:	7501      	strb	r1, [r0, #20]
  m_spi->begin();
   b6c5a:	6800      	ldr	r0, [r0, #0]
   b6c5c:	f000 ffac 	bl	b7bb8 <_ZN8SPIClass5beginEv>
  pinMode(m_csPin, OUTPUT);
   b6c60:	7d20      	ldrb	r0, [r4, #20]
   b6c62:	2101      	movs	r1, #1
   b6c64:	f001 fe62 	bl	b892c <pinMode>
  digitalWrite(m_csPin, HIGH);
   b6c68:	7d20      	ldrb	r0, [r4, #20]
   b6c6a:	2101      	movs	r1, #1
}
   b6c6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  digitalWrite(m_csPin, HIGH);
   b6c70:	f001 be6d 	b.w	b894e <digitalWrite>

000b6c74 <_ZN14SdSpiAltDriver10deactivateEv>:
//------------------------------------------------------------------------------
/**
 * End SPI transaction.
 */
void SdSpiAltDriver::deactivate() {
  m_spi->endTransaction();
   b6c74:	6800      	ldr	r0, [r0, #0]
   b6c76:	f000 bfb3 	b.w	b7be0 <_ZN8SPIClass14endTransactionEv>

000b6c7a <_ZN14SdSpiAltDriver7receiveEv>:
/** Receive a byte.
 *
 * \return The byte.
 */
uint8_t SdSpiAltDriver::receive() {
  return m_spi->transfer(0XFF);
   b6c7a:	6800      	ldr	r0, [r0, #0]
   b6c7c:	21ff      	movs	r1, #255	; 0xff
   b6c7e:	f001 b837 	b.w	b7cf0 <_ZN8SPIClass8transferEh>
	...

000b6c84 <_ZN14SdSpiAltDriver7receiveEPhj>:
 * \param[out] buf Buffer to receive the data.
 * \param[in] n Number of bytes to receive.
 *
 * \return Zero for no error or nonzero error code.
 */
uint8_t SdSpiAltDriver::receive(uint8_t* buf, size_t n) {
   b6c84:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b6c86:	4613      	mov	r3, r2
  SPI_DMA_TransferCompleted = false;
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   b6c88:	4a07      	ldr	r2, [pc, #28]	; (b6ca8 <_ZN14SdSpiAltDriver7receiveEPhj+0x24>)
   b6c8a:	9200      	str	r2, [sp, #0]
  SPI_DMA_TransferCompleted = false;
   b6c8c:	2500      	movs	r5, #0
   b6c8e:	4c07      	ldr	r4, [pc, #28]	; (b6cac <_ZN14SdSpiAltDriver7receiveEPhj+0x28>)
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   b6c90:	6800      	ldr	r0, [r0, #0]
  SPI_DMA_TransferCompleted = false;
   b6c92:	7025      	strb	r5, [r4, #0]
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   b6c94:	460a      	mov	r2, r1
   b6c96:	4629      	mov	r1, r5
   b6c98:	f001 f830 	bl	b7cfc <_ZN8SPIClass8transferEPKvPvjPFvvE>
  while (!SPI_DMA_TransferCompleted) {}
   b6c9c:	7823      	ldrb	r3, [r4, #0]
   b6c9e:	2b00      	cmp	r3, #0
   b6ca0:	d0fc      	beq.n	b6c9c <_ZN14SdSpiAltDriver7receiveEPhj+0x18>
  return 0;
}
   b6ca2:	2000      	movs	r0, #0
   b6ca4:	b003      	add	sp, #12
   b6ca6:	bd30      	pop	{r4, r5, pc}
   b6ca8:	000b6c41 	.word	0x000b6c41
   b6cac:	2003e684 	.word	0x2003e684

000b6cb0 <_ZN14SdSpiAltDriver4sendEh>:
/** Send a byte.
 *
 * \param[in] b Byte to send
 */
void SdSpiAltDriver::send(uint8_t b) {
  m_spi->transfer(b);
   b6cb0:	6800      	ldr	r0, [r0, #0]
   b6cb2:	f001 b81d 	b.w	b7cf0 <_ZN8SPIClass8transferEh>
	...

000b6cb8 <_ZN14SdSpiAltDriver4sendEPKhj>:
/** Send multiple bytes.
 *
 * \param[in] buf Buffer for data to be sent.
 * \param[in] n Number of bytes to send.
 */
void SdSpiAltDriver::send(const uint8_t* buf , size_t n) {
   b6cb8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b6cba:	4613      	mov	r3, r2
  SPI_DMA_TransferCompleted = false;

  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
   b6cbc:	4a06      	ldr	r2, [pc, #24]	; (b6cd8 <_ZN14SdSpiAltDriver4sendEPKhj+0x20>)
   b6cbe:	9200      	str	r2, [sp, #0]
  SPI_DMA_TransferCompleted = false;
   b6cc0:	2500      	movs	r5, #0
   b6cc2:	4c06      	ldr	r4, [pc, #24]	; (b6cdc <_ZN14SdSpiAltDriver4sendEPKhj+0x24>)
  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
   b6cc4:	6800      	ldr	r0, [r0, #0]
  SPI_DMA_TransferCompleted = false;
   b6cc6:	7025      	strb	r5, [r4, #0]
  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
   b6cc8:	462a      	mov	r2, r5
   b6cca:	f001 f817 	bl	b7cfc <_ZN8SPIClass8transferEPKvPvjPFvvE>
                            SD_SPI_DMA_TransferComplete_Callback);

  while (!SPI_DMA_TransferCompleted) {}
   b6cce:	7823      	ldrb	r3, [r4, #0]
   b6cd0:	2b00      	cmp	r3, #0
   b6cd2:	d0fc      	beq.n	b6cce <_ZN14SdSpiAltDriver4sendEPKhj+0x16>
}
   b6cd4:	b003      	add	sp, #12
   b6cd6:	bd30      	pop	{r4, r5, pc}
   b6cd8:	000b6c41 	.word	0x000b6c41
   b6cdc:	2003e684 	.word	0x2003e684

000b6ce0 <_ZN15Adafruit_AS7341C1Ev>:

/**
 * @brief Construct a new Adafruit_AS7341::Adafruit_AS7341 object
 *
 */
Adafruit_AS7341::Adafruit_AS7341(void) {}
   b6ce0:	4a02      	ldr	r2, [pc, #8]	; (b6cec <_ZN15Adafruit_AS7341C1Ev+0xc>)
   b6ce2:	6002      	str	r2, [r0, #0]
   b6ce4:	2200      	movs	r2, #0
   b6ce6:	7102      	strb	r2, [r0, #4]
   b6ce8:	6082      	str	r2, [r0, #8]
   b6cea:	4770      	bx	lr
   b6cec:	000b9cf4 	.word	0x000b9cf4

000b6cf0 <_ZN15Adafruit_AS73415beginEhP7TwoWirel>:
 *    @param  sensor_id
 *            The unique ID to differentiate the sensors from others
 *    @return True if initialization was successful, otherwise false.
 */
bool Adafruit_AS7341::begin(uint8_t i2c_address, TwoWire *wire,
                            int32_t sensor_id) {
   b6cf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b6cf4:	4604      	mov	r4, r0
  if (i2c_dev) {
   b6cf6:	6880      	ldr	r0, [r0, #8]
                            int32_t sensor_id) {
   b6cf8:	460f      	mov	r7, r1
   b6cfa:	4690      	mov	r8, r2
   b6cfc:	461e      	mov	r6, r3
  if (i2c_dev) {
   b6cfe:	b110      	cbz	r0, b6d06 <_ZN15Adafruit_AS73415beginEhP7TwoWirel+0x16>
    delete i2c_dev; // remove old interface
   b6d00:	2110      	movs	r1, #16
   b6d02:	f7fd f9cc 	bl	b409e <_ZdlPvj>
  }

  i2c_dev = new Adafruit_I2CDevice(i2c_address, wire);
   b6d06:	2010      	movs	r0, #16
   b6d08:	f7fd f9c5 	bl	b4096 <_Znwj>
   b6d0c:	4605      	mov	r5, r0
   b6d0e:	b118      	cbz	r0, b6d18 <_ZN15Adafruit_AS73415beginEhP7TwoWirel+0x28>
   b6d10:	4642      	mov	r2, r8
   b6d12:	4639      	mov	r1, r7
   b6d14:	f7fe fa04 	bl	b5120 <_ZN18Adafruit_I2CDeviceC1EhP7TwoWire>
   b6d18:	60a5      	str	r5, [r4, #8]

  if (!i2c_dev->begin()) {
   b6d1a:	2101      	movs	r1, #1
   b6d1c:	4628      	mov	r0, r5
   b6d1e:	f7fe fa1b 	bl	b5158 <_ZN18Adafruit_I2CDevice5beginEb>
   b6d22:	b130      	cbz	r0, b6d32 <_ZN15Adafruit_AS73415beginEhP7TwoWirel+0x42>
    return false;
  }

  return _init(sensor_id);
   b6d24:	6823      	ldr	r3, [r4, #0]
   b6d26:	4631      	mov	r1, r6
   b6d28:	4620      	mov	r0, r4
   b6d2a:	681b      	ldr	r3, [r3, #0]
}
   b6d2c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  return _init(sensor_id);
   b6d30:	4718      	bx	r3
}
   b6d32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b6d36 <_ZN15Adafruit_AS734111powerEnableEb>:
/**
 * @brief Sets the power state of the sensor
 *
 * @param enable_power true: on false: off
 */
void Adafruit_AS7341::powerEnable(bool enable_power) {
   b6d36:	b570      	push	{r4, r5, r6, lr}
  Adafruit_BusIO_Register enable_reg =
      Adafruit_BusIO_Register(i2c_dev, AS7341_ENABLE);
   b6d38:	2501      	movs	r5, #1
void Adafruit_AS7341::powerEnable(bool enable_power) {
   b6d3a:	b08a      	sub	sp, #40	; 0x28
      Adafruit_BusIO_Register(i2c_dev, AS7341_ENABLE);
   b6d3c:	2600      	movs	r6, #0
   b6d3e:	e9cd 6500 	strd	r6, r5, [sp]
void Adafruit_AS7341::powerEnable(bool enable_power) {
   b6d42:	460c      	mov	r4, r1
      Adafruit_BusIO_Register(i2c_dev, AS7341_ENABLE);
   b6d44:	462b      	mov	r3, r5
   b6d46:	6881      	ldr	r1, [r0, #8]
   b6d48:	2280      	movs	r2, #128	; 0x80
   b6d4a:	a804      	add	r0, sp, #16
   b6d4c:	f7fd ffc3 	bl	b4cd6 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>
  Adafruit_BusIO_RegisterBits pon_en =
      Adafruit_BusIO_RegisterBits(&enable_reg, 1, 0);
   b6d50:	4633      	mov	r3, r6
   b6d52:	462a      	mov	r2, r5
   b6d54:	a904      	add	r1, sp, #16
   b6d56:	a802      	add	r0, sp, #8
   b6d58:	f7fe f894 	bl	b4e84 <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>
  pon_en.write(enable_power);
   b6d5c:	4621      	mov	r1, r4
   b6d5e:	a802      	add	r0, sp, #8
   b6d60:	f7fe f8a2 	bl	b4ea8 <_ZN27Adafruit_BusIO_RegisterBits5writeEm>
}
   b6d64:	b00a      	add	sp, #40	; 0x28
   b6d66:	bd70      	pop	{r4, r5, r6, pc}

000b6d68 <_ZN15Adafruit_AS73415_initEl>:
bool Adafruit_AS7341::_init(int32_t sensor_id) {
   b6d68:	b570      	push	{r4, r5, r6, lr}
      Adafruit_BusIO_Register(i2c_dev, AS7341_WHOAMI);
   b6d6a:	2501      	movs	r5, #1
bool Adafruit_AS7341::_init(int32_t sensor_id) {
   b6d6c:	b088      	sub	sp, #32
      Adafruit_BusIO_Register(i2c_dev, AS7341_WHOAMI);
   b6d6e:	2400      	movs	r4, #0
   b6d70:	e9cd 4500 	strd	r4, r5, [sp]
   b6d74:	462b      	mov	r3, r5
   b6d76:	6881      	ldr	r1, [r0, #8]
   b6d78:	2292      	movs	r2, #146	; 0x92
bool Adafruit_AS7341::_init(int32_t sensor_id) {
   b6d7a:	4606      	mov	r6, r0
      Adafruit_BusIO_Register(i2c_dev, AS7341_WHOAMI);
   b6d7c:	a802      	add	r0, sp, #8
   b6d7e:	f7fd ffaa 	bl	b4cd6 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>
  if (chip_id.read() & 0xFC != AS7341_CHIP_ID << 2) {
   b6d82:	a802      	add	r0, sp, #8
   b6d84:	f7fe f862 	bl	b4e4c <_ZN23Adafruit_BusIO_Register4readEv>
   b6d88:	07c3      	lsls	r3, r0, #31
   b6d8a:	d406      	bmi.n	b6d9a <_ZN15Adafruit_AS73415_initEl+0x32>
  powerEnable(true);
   b6d8c:	4630      	mov	r0, r6
   b6d8e:	4629      	mov	r1, r5
   b6d90:	f7ff ffd1 	bl	b6d36 <_ZN15Adafruit_AS734111powerEnableEb>
  return true;
   b6d94:	4628      	mov	r0, r5
}
   b6d96:	b008      	add	sp, #32
   b6d98:	bd70      	pop	{r4, r5, r6, pc}
    return false;
   b6d9a:	4620      	mov	r0, r4
   b6d9c:	e7fb      	b.n	b6d96 <_ZN15Adafruit_AS73415_initEl+0x2e>

000b6d9e <_ZN15Adafruit_AS734125enableSpectralMeasurementEb>:
 * @brief Enables measurement of spectral data
 *
 * @param enable_measurement true: enabled false: disabled
 * @return true: success false: failure
 */
bool Adafruit_AS7341::enableSpectralMeasurement(bool enable_measurement) {
   b6d9e:	b510      	push	{r4, lr}

  Adafruit_BusIO_Register enable_reg =
      Adafruit_BusIO_Register(i2c_dev, AS7341_ENABLE);
   b6da0:	2301      	movs	r3, #1
bool Adafruit_AS7341::enableSpectralMeasurement(bool enable_measurement) {
   b6da2:	b08a      	sub	sp, #40	; 0x28
      Adafruit_BusIO_Register(i2c_dev, AS7341_ENABLE);
   b6da4:	2200      	movs	r2, #0
   b6da6:	e9cd 2300 	strd	r2, r3, [sp]
bool Adafruit_AS7341::enableSpectralMeasurement(bool enable_measurement) {
   b6daa:	460c      	mov	r4, r1
      Adafruit_BusIO_Register(i2c_dev, AS7341_ENABLE);
   b6dac:	2280      	movs	r2, #128	; 0x80
   b6dae:	6881      	ldr	r1, [r0, #8]
   b6db0:	a804      	add	r0, sp, #16
   b6db2:	f7fd ff90 	bl	b4cd6 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>

  Adafruit_BusIO_RegisterBits spec_enable_bit =
      Adafruit_BusIO_RegisterBits(&enable_reg, 1, 1);
   b6db6:	2301      	movs	r3, #1
   b6db8:	461a      	mov	r2, r3
   b6dba:	a904      	add	r1, sp, #16
   b6dbc:	a802      	add	r0, sp, #8
   b6dbe:	f7fe f861 	bl	b4e84 <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>
  return spec_enable_bit.write(enable_measurement);
   b6dc2:	4621      	mov	r1, r4
   b6dc4:	a802      	add	r0, sp, #8
   b6dc6:	f7fe f86f 	bl	b4ea8 <_ZN27Adafruit_BusIO_RegisterBits5writeEm>
}
   b6dca:	b00a      	add	sp, #40	; 0x28
   b6dcc:	bd10      	pop	{r4, pc}

000b6dce <_ZN15Adafruit_AS734110enableSMUXEv>:

bool Adafruit_AS7341::enableSMUX(void) {
   b6dce:	b530      	push	{r4, r5, lr}

  Adafruit_BusIO_Register enable_reg =
      Adafruit_BusIO_Register(i2c_dev, AS7341_ENABLE);
   b6dd0:	2501      	movs	r5, #1
bool Adafruit_AS7341::enableSMUX(void) {
   b6dd2:	b08b      	sub	sp, #44	; 0x2c
      Adafruit_BusIO_Register(i2c_dev, AS7341_ENABLE);
   b6dd4:	2400      	movs	r4, #0
   b6dd6:	e9cd 4500 	strd	r4, r5, [sp]
   b6dda:	462b      	mov	r3, r5
   b6ddc:	6881      	ldr	r1, [r0, #8]
   b6dde:	2280      	movs	r2, #128	; 0x80
   b6de0:	a804      	add	r0, sp, #16
   b6de2:	f7fd ff78 	bl	b4cd6 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>
  Adafruit_BusIO_RegisterBits smux_enable_bit =
      Adafruit_BusIO_RegisterBits(&enable_reg, 1, 4);
   b6de6:	462a      	mov	r2, r5
   b6de8:	2304      	movs	r3, #4
   b6dea:	a904      	add	r1, sp, #16
   b6dec:	a802      	add	r0, sp, #8
   b6dee:	f7fe f849 	bl	b4e84 <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>
  bool success = smux_enable_bit.write(true);
   b6df2:	4629      	mov	r1, r5
   b6df4:	a802      	add	r0, sp, #8
   b6df6:	f7fe f857 	bl	b4ea8 <_ZN27Adafruit_BusIO_RegisterBits5writeEm>
   b6dfa:	4605      	mov	r5, r0

  int timeOut = 1000; // Arbitrary value, but if it takes 1000 milliseconds then
                      // something is wrong
  int count = 0;
  while (smux_enable_bit.read() && count < timeOut) {
   b6dfc:	a802      	add	r0, sp, #8
   b6dfe:	f7fe f846 	bl	b4e8e <_ZN27Adafruit_BusIO_RegisterBits4readEv>
   b6e02:	b138      	cbz	r0, b6e14 <_ZN15Adafruit_AS734110enableSMUXEv+0x46>
   b6e04:	f5b4 7f7a 	cmp.w	r4, #1000	; 0x3e8
   b6e08:	d00b      	beq.n	b6e22 <_ZN15Adafruit_AS734110enableSMUXEv+0x54>
    delay(1);
   b6e0a:	2001      	movs	r0, #1
   b6e0c:	f001 f9dc 	bl	b81c8 <delay>
    count++;
   b6e10:	3401      	adds	r4, #1
  while (smux_enable_bit.read() && count < timeOut) {
   b6e12:	e7f3      	b.n	b6dfc <_ZN15Adafruit_AS734110enableSMUXEv+0x2e>
  }
  if (count >= timeOut)
    return false;
   b6e14:	f5b4 7f7a 	cmp.w	r4, #1000	; 0x3e8
   b6e18:	bf08      	it	eq
   b6e1a:	2500      	moveq	r5, #0
  else
    return success;
}
   b6e1c:	4628      	mov	r0, r5
   b6e1e:	b00b      	add	sp, #44	; 0x2c
   b6e20:	bd30      	pop	{r4, r5, pc}
    return false;
   b6e22:	2500      	movs	r5, #0
   b6e24:	e7fa      	b.n	b6e1c <_ZN15Adafruit_AS734110enableSMUXEv+0x4e>

000b6e26 <_ZN15Adafruit_AS734114setSMUXCommandE17as7341_smux_cmd_t>:
      Adafruit_BusIO_RegisterBits(&gpio2_reg, 1, 1);

  return gpio_output_value_bit.write(gpio_high);
}

bool Adafruit_AS7341::setSMUXCommand(as7341_smux_cmd_t command) {
   b6e26:	b510      	push	{r4, lr}
  Adafruit_BusIO_Register cfg6_reg =
      Adafruit_BusIO_Register(i2c_dev, AS7341_CFG6);
   b6e28:	2301      	movs	r3, #1
bool Adafruit_AS7341::setSMUXCommand(as7341_smux_cmd_t command) {
   b6e2a:	b08a      	sub	sp, #40	; 0x28
      Adafruit_BusIO_Register(i2c_dev, AS7341_CFG6);
   b6e2c:	2200      	movs	r2, #0
   b6e2e:	e9cd 2300 	strd	r2, r3, [sp]
bool Adafruit_AS7341::setSMUXCommand(as7341_smux_cmd_t command) {
   b6e32:	460c      	mov	r4, r1
      Adafruit_BusIO_Register(i2c_dev, AS7341_CFG6);
   b6e34:	22af      	movs	r2, #175	; 0xaf
   b6e36:	6881      	ldr	r1, [r0, #8]
   b6e38:	a804      	add	r0, sp, #16
   b6e3a:	f7fd ff4c 	bl	b4cd6 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>
  Adafruit_BusIO_RegisterBits smux_command_bits =
      Adafruit_BusIO_RegisterBits(&cfg6_reg, 2, 3);
   b6e3e:	2303      	movs	r3, #3
   b6e40:	2202      	movs	r2, #2
   b6e42:	a904      	add	r1, sp, #16
   b6e44:	a802      	add	r0, sp, #8
   b6e46:	f7fe f81d 	bl	b4e84 <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>

  return smux_command_bits.write(command);
   b6e4a:	4621      	mov	r1, r4
   b6e4c:	a802      	add	r0, sp, #8
   b6e4e:	f7fe f82b 	bl	b4ea8 <_ZN27Adafruit_BusIO_RegisterBits5writeEm>
}
   b6e52:	b00a      	add	sp, #40	; 0x28
   b6e54:	bd10      	pop	{r4, pc}

000b6e56 <_ZN15Adafruit_AS734114getIsDataReadyEv>:
/**
 * @brief
 *
 * @return true: success false: failure
 */
bool Adafruit_AS7341::getIsDataReady() {
   b6e56:	b510      	push	{r4, lr}
  Adafruit_BusIO_Register status2_reg =
      Adafruit_BusIO_Register(i2c_dev, AS7341_STATUS2);
   b6e58:	2300      	movs	r3, #0
bool Adafruit_AS7341::getIsDataReady() {
   b6e5a:	b08a      	sub	sp, #40	; 0x28
      Adafruit_BusIO_Register(i2c_dev, AS7341_STATUS2);
   b6e5c:	2401      	movs	r4, #1
   b6e5e:	e9cd 3400 	strd	r3, r4, [sp]
   b6e62:	22a3      	movs	r2, #163	; 0xa3
   b6e64:	6881      	ldr	r1, [r0, #8]
   b6e66:	4623      	mov	r3, r4
   b6e68:	a804      	add	r0, sp, #16
   b6e6a:	f7fd ff34 	bl	b4cd6 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>
  Adafruit_BusIO_RegisterBits avalid_bit =
      Adafruit_BusIO_RegisterBits(&status2_reg, 1, 6);
   b6e6e:	2306      	movs	r3, #6
   b6e70:	4622      	mov	r2, r4
   b6e72:	a904      	add	r1, sp, #16
   b6e74:	a802      	add	r0, sp, #8
   b6e76:	f7fe f805 	bl	b4e84 <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>

  return avalid_bit.read();
   b6e7a:	a802      	add	r0, sp, #8
   b6e7c:	f7fe f807 	bl	b4e8e <_ZN27Adafruit_BusIO_RegisterBits4readEv>
}
   b6e80:	3800      	subs	r0, #0
   b6e82:	bf18      	it	ne
   b6e84:	2001      	movne	r0, #1
   b6e86:	b00a      	add	sp, #40	; 0x28
   b6e88:	bd10      	pop	{r4, pc}

000b6e8a <_ZN15Adafruit_AS734112delayForDataEi.part.0>:
void Adafruit_AS7341::delayForData(int waitTime) {
   b6e8a:	b510      	push	{r4, lr}
   b6e8c:	4604      	mov	r4, r0
    while (!getIsDataReady()) {
   b6e8e:	4620      	mov	r0, r4
   b6e90:	f7ff ffe1 	bl	b6e56 <_ZN15Adafruit_AS734114getIsDataReadyEv>
   b6e94:	b918      	cbnz	r0, b6e9e <_ZN15Adafruit_AS734112delayForDataEi.part.0+0x14>
      delay(1);
   b6e96:	2001      	movs	r0, #1
   b6e98:	f001 f996 	bl	b81c8 <delay>
    while (!getIsDataReady()) {
   b6e9c:	e7f7      	b.n	b6e8e <_ZN15Adafruit_AS734112delayForDataEi.part.0+0x4>
}
   b6e9e:	bd10      	pop	{r4, pc}

000b6ea0 <_ZN15Adafruit_AS73418setATIMEEh>:
 * Total integration time will be `(ATIME + 1) * (ASTEP + 1) * 2.78µS`
 *
 * @param atime_value The integration time step count
 * @return true: success false: failure
 */
bool Adafruit_AS7341::setATIME(uint8_t atime_value) {
   b6ea0:	b530      	push	{r4, r5, lr}
  Adafruit_BusIO_Register atime_reg =
      Adafruit_BusIO_Register(i2c_dev, AS7341_ATIME);
   b6ea2:	2301      	movs	r3, #1
bool Adafruit_AS7341::setATIME(uint8_t atime_value) {
   b6ea4:	b089      	sub	sp, #36	; 0x24
      Adafruit_BusIO_Register(i2c_dev, AS7341_ATIME);
   b6ea6:	2500      	movs	r5, #0
   b6ea8:	e9cd 5300 	strd	r5, r3, [sp]
bool Adafruit_AS7341::setATIME(uint8_t atime_value) {
   b6eac:	460c      	mov	r4, r1
      Adafruit_BusIO_Register(i2c_dev, AS7341_ATIME);
   b6eae:	2281      	movs	r2, #129	; 0x81
   b6eb0:	6881      	ldr	r1, [r0, #8]
   b6eb2:	a802      	add	r0, sp, #8
   b6eb4:	f7fd ff0f 	bl	b4cd6 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>
  return atime_reg.write(atime_value);
   b6eb8:	462a      	mov	r2, r5
   b6eba:	4621      	mov	r1, r4
   b6ebc:	a802      	add	r0, sp, #8
   b6ebe:	f7fd ff65 	bl	b4d8c <_ZN23Adafruit_BusIO_Register5writeEmh>
}
   b6ec2:	b009      	add	sp, #36	; 0x24
   b6ec4:	bd30      	pop	{r4, r5, pc}

000b6ec6 <_ZN15Adafruit_AS73418getATIMEEv>:
 *
 * Total integration time will be `(ATIME + 1) * (ASTEP + 1) * 2.78µS`
 *
 * @return uint8_t The current integration time step count
 */
uint8_t Adafruit_AS7341::getATIME() {
   b6ec6:	b500      	push	{lr}
  Adafruit_BusIO_Register atime_reg =
      Adafruit_BusIO_Register(i2c_dev, AS7341_ATIME);
   b6ec8:	2301      	movs	r3, #1
uint8_t Adafruit_AS7341::getATIME() {
   b6eca:	b089      	sub	sp, #36	; 0x24
      Adafruit_BusIO_Register(i2c_dev, AS7341_ATIME);
   b6ecc:	2200      	movs	r2, #0
   b6ece:	e9cd 2300 	strd	r2, r3, [sp]
   b6ed2:	2281      	movs	r2, #129	; 0x81
   b6ed4:	6881      	ldr	r1, [r0, #8]
   b6ed6:	a802      	add	r0, sp, #8
   b6ed8:	f7fd fefd 	bl	b4cd6 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>
  return atime_reg.read();
   b6edc:	a802      	add	r0, sp, #8
   b6ede:	f7fd ffb5 	bl	b4e4c <_ZN23Adafruit_BusIO_Register4readEv>
}
   b6ee2:	b2c0      	uxtb	r0, r0
   b6ee4:	b009      	add	sp, #36	; 0x24
   b6ee6:	f85d fb04 	ldr.w	pc, [sp], #4

000b6eea <_ZN15Adafruit_AS73418setASTEPEt>:
 *
 * @param astep_value Integration time step size in 2.78 microsecon increments
 * Step size is `(astep_value+1) * 2.78 uS`
 * @return true: success false: failure
 */
bool Adafruit_AS7341::setASTEP(uint16_t astep_value) {
   b6eea:	b530      	push	{r4, r5, lr}
  Adafruit_BusIO_Register astep_reg =
      Adafruit_BusIO_Register(i2c_dev, AS7341_ASTEP_L, 2, LSBFIRST);
   b6eec:	2301      	movs	r3, #1
bool Adafruit_AS7341::setASTEP(uint16_t astep_value) {
   b6eee:	b089      	sub	sp, #36	; 0x24
      Adafruit_BusIO_Register(i2c_dev, AS7341_ASTEP_L, 2, LSBFIRST);
   b6ef0:	2500      	movs	r5, #0
   b6ef2:	e9cd 5300 	strd	r5, r3, [sp]
bool Adafruit_AS7341::setASTEP(uint16_t astep_value) {
   b6ef6:	460c      	mov	r4, r1
      Adafruit_BusIO_Register(i2c_dev, AS7341_ASTEP_L, 2, LSBFIRST);
   b6ef8:	2302      	movs	r3, #2
   b6efa:	6881      	ldr	r1, [r0, #8]
   b6efc:	22ca      	movs	r2, #202	; 0xca
   b6efe:	a802      	add	r0, sp, #8
   b6f00:	f7fd fee9 	bl	b4cd6 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>
  return astep_reg.write(astep_value);
   b6f04:	462a      	mov	r2, r5
   b6f06:	4621      	mov	r1, r4
   b6f08:	a802      	add	r0, sp, #8
   b6f0a:	f7fd ff3f 	bl	b4d8c <_ZN23Adafruit_BusIO_Register5writeEmh>
}
   b6f0e:	b009      	add	sp, #36	; 0x24
   b6f10:	bd30      	pop	{r4, r5, pc}

000b6f12 <_ZN15Adafruit_AS73418getASTEPEv>:
 *
 * Step size is `(astep_value+1) * 2.78 uS`
 *
 * @return uint16_t The current integration time step size
 */
uint16_t Adafruit_AS7341::getASTEP() {
   b6f12:	b500      	push	{lr}
  Adafruit_BusIO_Register astep_reg =
      Adafruit_BusIO_Register(i2c_dev, AS7341_ASTEP_L, 2, LSBFIRST);
   b6f14:	2300      	movs	r3, #0
uint16_t Adafruit_AS7341::getASTEP() {
   b6f16:	b089      	sub	sp, #36	; 0x24
      Adafruit_BusIO_Register(i2c_dev, AS7341_ASTEP_L, 2, LSBFIRST);
   b6f18:	2201      	movs	r2, #1
   b6f1a:	e9cd 3200 	strd	r3, r2, [sp]
   b6f1e:	2302      	movs	r3, #2
   b6f20:	6881      	ldr	r1, [r0, #8]
   b6f22:	22ca      	movs	r2, #202	; 0xca
   b6f24:	a802      	add	r0, sp, #8
   b6f26:	f7fd fed6 	bl	b4cd6 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>
  return astep_reg.read();
   b6f2a:	a802      	add	r0, sp, #8
   b6f2c:	f7fd ff8e 	bl	b4e4c <_ZN23Adafruit_BusIO_Register4readEv>
}
   b6f30:	b280      	uxth	r0, r0
   b6f32:	b009      	add	sp, #36	; 0x24
   b6f34:	f85d fb04 	ldr.w	pc, [sp], #4

000b6f38 <_ZN15Adafruit_AS73417setGainE13as7341_gain_t>:
 * @brief Sets the ADC gain multiplier
 *
 * @param gain_value The gain amount. must be an `as7341_gain_t`
 * @return true: success false: failure
 */
bool Adafruit_AS7341::setGain(as7341_gain_t gain_value) {
   b6f38:	b530      	push	{r4, r5, lr}
  Adafruit_BusIO_Register cfg1_reg =
      Adafruit_BusIO_Register(i2c_dev, AS7341_CFG1);
   b6f3a:	2301      	movs	r3, #1
bool Adafruit_AS7341::setGain(as7341_gain_t gain_value) {
   b6f3c:	b089      	sub	sp, #36	; 0x24
      Adafruit_BusIO_Register(i2c_dev, AS7341_CFG1);
   b6f3e:	2500      	movs	r5, #0
   b6f40:	e9cd 5300 	strd	r5, r3, [sp]
bool Adafruit_AS7341::setGain(as7341_gain_t gain_value) {
   b6f44:	460c      	mov	r4, r1
      Adafruit_BusIO_Register(i2c_dev, AS7341_CFG1);
   b6f46:	22aa      	movs	r2, #170	; 0xaa
   b6f48:	6881      	ldr	r1, [r0, #8]
   b6f4a:	a802      	add	r0, sp, #8
   b6f4c:	f7fd fec3 	bl	b4cd6 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>
  return cfg1_reg.write(gain_value);
   b6f50:	462a      	mov	r2, r5
   b6f52:	4621      	mov	r1, r4
   b6f54:	a802      	add	r0, sp, #8
   b6f56:	f7fd ff19 	bl	b4d8c <_ZN23Adafruit_BusIO_Register5writeEmh>
  // AGAIN bitfield is only[0:4] but the rest is empty
}
   b6f5a:	b009      	add	sp, #36	; 0x24
   b6f5c:	bd30      	pop	{r4, r5, pc}

000b6f5e <_ZN15Adafruit_AS73417getGainEv>:
/**
 * @brief Returns the ADC gain multiplier
 *
 * @return as7341_gain_t The current ADC gain multiplier
 */
as7341_gain_t Adafruit_AS7341::getGain() {
   b6f5e:	b500      	push	{lr}
  Adafruit_BusIO_Register cfg1_reg =
      Adafruit_BusIO_Register(i2c_dev, AS7341_CFG1);
   b6f60:	2301      	movs	r3, #1
as7341_gain_t Adafruit_AS7341::getGain() {
   b6f62:	b089      	sub	sp, #36	; 0x24
      Adafruit_BusIO_Register(i2c_dev, AS7341_CFG1);
   b6f64:	2200      	movs	r2, #0
   b6f66:	e9cd 2300 	strd	r2, r3, [sp]
   b6f6a:	22aa      	movs	r2, #170	; 0xaa
   b6f6c:	6881      	ldr	r1, [r0, #8]
   b6f6e:	a802      	add	r0, sp, #8
   b6f70:	f7fd feb1 	bl	b4cd6 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>
  return (as7341_gain_t)cfg1_reg.read();
   b6f74:	a802      	add	r0, sp, #8
   b6f76:	f7fd ff69 	bl	b4e4c <_ZN23Adafruit_BusIO_Register4readEv>
}
   b6f7a:	b2c0      	uxtb	r0, r0
   b6f7c:	b009      	add	sp, #36	; 0x24
   b6f7e:	f85d fb04 	ldr.w	pc, [sp], #4
   b6f82:	0000      	movs	r0, r0
   b6f84:	0000      	movs	r0, r0
	...

000b6f88 <_ZN15Adafruit_AS734113toBasicCountsEt>:
 *
 * @param raw The raw ADC values to convert
 *
 * @return float The basic counts
 */
float Adafruit_AS7341::toBasicCounts(uint16_t raw) {
   b6f88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6f8a:	ed2d 8b02 	vpush	{d8}
   b6f8e:	460d      	mov	r5, r1
   b6f90:	4604      	mov	r4, r0
  float gain_val = 0;
  as7341_gain_t gain = getGain();
   b6f92:	f7ff ffe4 	bl	b6f5e <_ZN15Adafruit_AS73417getGainEv>
  switch (gain) {
   b6f96:	280a      	cmp	r0, #10
   b6f98:	bf97      	itett	ls
   b6f9a:	4b1f      	ldrls	r3, [pc, #124]	; (b7018 <_ZN15Adafruit_AS734113toBasicCountsEt+0x90>)
  as7341_gain_t gain = getGain();
   b6f9c:	eddf 8a1f 	vldrhi	s17, [pc, #124]	; b701c <_ZN15Adafruit_AS734113toBasicCountsEt+0x94>
   b6fa0:	eb03 0080 	addls.w	r0, r3, r0, lsl #2
   b6fa4:	edd0 8a00 	vldrls	s17, [r0]
    break;
  case AS7341_GAIN_512X:
    gain_val = 512;
    break;
  }
  return raw / (gain_val * (getATIME() + 1) * (getASTEP() + 1) * 2.78 / 1000);
   b6fa8:	4620      	mov	r0, r4
   b6faa:	f7ff ff8c 	bl	b6ec6 <_ZN15Adafruit_AS73418getATIMEEv>
   b6fae:	1c43      	adds	r3, r0, #1
   b6fb0:	4620      	mov	r0, r4
   b6fb2:	ee08 3a10 	vmov	s16, r3
   b6fb6:	f7ff ffac 	bl	b6f12 <_ZN15Adafruit_AS73418getASTEPEv>
   b6fba:	4604      	mov	r4, r0
   b6fbc:	3401      	adds	r4, #1
   b6fbe:	4628      	mov	r0, r5
   b6fc0:	f002 f84a 	bl	b9058 <__aeabi_i2d>
   b6fc4:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
   b6fc8:	ee07 4a90 	vmov	s15, r4
   b6fcc:	ee28 8a28 	vmul.f32	s16, s16, s17
   b6fd0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b6fd4:	4606      	mov	r6, r0
   b6fd6:	ee67 7a88 	vmul.f32	s15, s15, s16
   b6fda:	460f      	mov	r7, r1
   b6fdc:	ee17 0a90 	vmov	r0, s15
   b6fe0:	f002 f84c 	bl	b907c <__aeabi_f2d>
   b6fe4:	a30a      	add	r3, pc, #40	; (adr r3, b7010 <_ZN15Adafruit_AS734113toBasicCountsEt+0x88>)
   b6fe6:	e9d3 2300 	ldrd	r2, r3, [r3]
   b6fea:	f002 f89f 	bl	b912c <__aeabi_dmul>
   b6fee:	4b0c      	ldr	r3, [pc, #48]	; (b7020 <_ZN15Adafruit_AS734113toBasicCountsEt+0x98>)
   b6ff0:	2200      	movs	r2, #0
   b6ff2:	f002 f9c5 	bl	b9380 <__aeabi_ddiv>
   b6ff6:	4602      	mov	r2, r0
   b6ff8:	460b      	mov	r3, r1
   b6ffa:	4630      	mov	r0, r6
   b6ffc:	4639      	mov	r1, r7
   b6ffe:	f002 f9bf 	bl	b9380 <__aeabi_ddiv>
   b7002:	f002 fb8b 	bl	b971c <__aeabi_d2f>
}
   b7006:	ecbd 8b02 	vpop	{d8}
   b700a:	ee00 0a10 	vmov	s0, r0
   b700e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b7010:	a3d70a3d 	.word	0xa3d70a3d
   b7014:	40063d70 	.word	0x40063d70
   b7018:	000b9cc0 	.word	0x000b9cc0
   b701c:	00000000 	.word	0x00000000
   b7020:	408f4000 	.word	0x408f4000

000b7024 <_ZN15Adafruit_AS734113writeRegisterEhh>:
 * @brief Write a byte to the given register
 *
 * @param addr Register address
 * @param val The value to set the register to
 */
void Adafruit_AS7341::writeRegister(byte addr, byte val) {
   b7024:	b530      	push	{r4, r5, lr}
  Adafruit_BusIO_Register reg = Adafruit_BusIO_Register(i2c_dev, addr);
   b7026:	2301      	movs	r3, #1
void Adafruit_AS7341::writeRegister(byte addr, byte val) {
   b7028:	b089      	sub	sp, #36	; 0x24
  Adafruit_BusIO_Register reg = Adafruit_BusIO_Register(i2c_dev, addr);
   b702a:	2500      	movs	r5, #0
   b702c:	e9cd 5300 	strd	r5, r3, [sp]
void Adafruit_AS7341::writeRegister(byte addr, byte val) {
   b7030:	4614      	mov	r4, r2
  Adafruit_BusIO_Register reg = Adafruit_BusIO_Register(i2c_dev, addr);
   b7032:	460a      	mov	r2, r1
   b7034:	6881      	ldr	r1, [r0, #8]
   b7036:	a802      	add	r0, sp, #8
   b7038:	f7fd fe4d 	bl	b4cd6 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>
  reg.write(val);
   b703c:	462a      	mov	r2, r5
   b703e:	4621      	mov	r1, r4
   b7040:	a802      	add	r0, sp, #8
   b7042:	f7fd fea3 	bl	b4d8c <_ZN23Adafruit_BusIO_Register5writeEmh>
   b7046:	b009      	add	sp, #36	; 0x24
   b7048:	bd30      	pop	{r4, r5, pc}

000b704a <_ZN15Adafruit_AS734120setup_F1F4_Clear_NIREv>:
void Adafruit_AS7341::setup_F1F4_Clear_NIR() {
   b704a:	b510      	push	{r4, lr}
  writeRegister(byte(0x00), byte(0x30)); // F3 left set to ADC2
   b704c:	2230      	movs	r2, #48	; 0x30
   b704e:	2100      	movs	r1, #0
void Adafruit_AS7341::setup_F1F4_Clear_NIR() {
   b7050:	4604      	mov	r4, r0
  writeRegister(byte(0x00), byte(0x30)); // F3 left set to ADC2
   b7052:	f7ff ffe7 	bl	b7024 <_ZN15Adafruit_AS734113writeRegisterEhh>
  writeRegister(byte(0x01), byte(0x01)); // F1 left set to ADC0
   b7056:	2201      	movs	r2, #1
   b7058:	4611      	mov	r1, r2
   b705a:	4620      	mov	r0, r4
   b705c:	f7ff ffe2 	bl	b7024 <_ZN15Adafruit_AS734113writeRegisterEhh>
  writeRegister(byte(0x02), byte(0x00)); // Reserved or disabled
   b7060:	4620      	mov	r0, r4
   b7062:	2200      	movs	r2, #0
   b7064:	2102      	movs	r1, #2
   b7066:	f7ff ffdd 	bl	b7024 <_ZN15Adafruit_AS734113writeRegisterEhh>
  writeRegister(byte(0x03), byte(0x00)); // F8 left disabled
   b706a:	4620      	mov	r0, r4
   b706c:	2200      	movs	r2, #0
   b706e:	2103      	movs	r1, #3
   b7070:	f7ff ffd8 	bl	b7024 <_ZN15Adafruit_AS734113writeRegisterEhh>
  writeRegister(byte(0x04), byte(0x00)); // F6 left disabled
   b7074:	4620      	mov	r0, r4
   b7076:	2200      	movs	r2, #0
   b7078:	2104      	movs	r1, #4
   b707a:	f7ff ffd3 	bl	b7024 <_ZN15Adafruit_AS734113writeRegisterEhh>
  writeRegister(
   b707e:	4620      	mov	r0, r4
   b7080:	2242      	movs	r2, #66	; 0x42
   b7082:	2105      	movs	r1, #5
   b7084:	f7ff ffce 	bl	b7024 <_ZN15Adafruit_AS734113writeRegisterEhh>
  writeRegister(byte(0x06), byte(0x00)); // F5 left disbled
   b7088:	4620      	mov	r0, r4
   b708a:	2200      	movs	r2, #0
   b708c:	2106      	movs	r1, #6
   b708e:	f7ff ffc9 	bl	b7024 <_ZN15Adafruit_AS734113writeRegisterEhh>
  writeRegister(byte(0x07), byte(0x00)); // F7 left disbled
   b7092:	4620      	mov	r0, r4
   b7094:	2200      	movs	r2, #0
   b7096:	2107      	movs	r1, #7
   b7098:	f7ff ffc4 	bl	b7024 <_ZN15Adafruit_AS734113writeRegisterEhh>
  writeRegister(byte(0x08), byte(0x50)); // CLEAR connected to ADC4
   b709c:	4620      	mov	r0, r4
   b709e:	2250      	movs	r2, #80	; 0x50
   b70a0:	2108      	movs	r1, #8
   b70a2:	f7ff ffbf 	bl	b7024 <_ZN15Adafruit_AS734113writeRegisterEhh>
  writeRegister(byte(0x09), byte(0x00)); // F5 right disabled
   b70a6:	4620      	mov	r0, r4
   b70a8:	2200      	movs	r2, #0
   b70aa:	2109      	movs	r1, #9
   b70ac:	f7ff ffba 	bl	b7024 <_ZN15Adafruit_AS734113writeRegisterEhh>
  writeRegister(byte(0x0A), byte(0x00)); // F7 right disabled
   b70b0:	4620      	mov	r0, r4
   b70b2:	2200      	movs	r2, #0
   b70b4:	210a      	movs	r1, #10
   b70b6:	f7ff ffb5 	bl	b7024 <_ZN15Adafruit_AS734113writeRegisterEhh>
  writeRegister(byte(0x0B), byte(0x00)); // Reserved or disabled
   b70ba:	4620      	mov	r0, r4
   b70bc:	2200      	movs	r2, #0
   b70be:	210b      	movs	r1, #11
   b70c0:	f7ff ffb0 	bl	b7024 <_ZN15Adafruit_AS734113writeRegisterEhh>
  writeRegister(byte(0x0C), byte(0x20)); // F2 right connected to ADC1
   b70c4:	4620      	mov	r0, r4
   b70c6:	2220      	movs	r2, #32
   b70c8:	210c      	movs	r1, #12
   b70ca:	f7ff ffab 	bl	b7024 <_ZN15Adafruit_AS734113writeRegisterEhh>
  writeRegister(byte(0x0D), byte(0x04)); // F4 right connected to ADC3
   b70ce:	4620      	mov	r0, r4
   b70d0:	2204      	movs	r2, #4
   b70d2:	210d      	movs	r1, #13
   b70d4:	f7ff ffa6 	bl	b7024 <_ZN15Adafruit_AS734113writeRegisterEhh>
  writeRegister(byte(0x0E), byte(0x00)); // F6/F8 right disabled
   b70d8:	4620      	mov	r0, r4
   b70da:	2200      	movs	r2, #0
   b70dc:	210e      	movs	r1, #14
   b70de:	f7ff ffa1 	bl	b7024 <_ZN15Adafruit_AS734113writeRegisterEhh>
  writeRegister(byte(0x0F), byte(0x30)); // F3 right connected to AD2
   b70e2:	4620      	mov	r0, r4
   b70e4:	2230      	movs	r2, #48	; 0x30
   b70e6:	210f      	movs	r1, #15
   b70e8:	f7ff ff9c 	bl	b7024 <_ZN15Adafruit_AS734113writeRegisterEhh>
  writeRegister(byte(0x10), byte(0x01)); // F1 right connected to AD0
   b70ec:	4620      	mov	r0, r4
   b70ee:	2201      	movs	r2, #1
   b70f0:	2110      	movs	r1, #16
   b70f2:	f7ff ff97 	bl	b7024 <_ZN15Adafruit_AS734113writeRegisterEhh>
  writeRegister(byte(0x11), byte(0x50)); // CLEAR right connected to AD4
   b70f6:	4620      	mov	r0, r4
   b70f8:	2250      	movs	r2, #80	; 0x50
   b70fa:	2111      	movs	r1, #17
   b70fc:	f7ff ff92 	bl	b7024 <_ZN15Adafruit_AS734113writeRegisterEhh>
  writeRegister(byte(0x12), byte(0x00)); // Reserved or disabled
   b7100:	4620      	mov	r0, r4
   b7102:	2200      	movs	r2, #0
   b7104:	2112      	movs	r1, #18
   b7106:	f7ff ff8d 	bl	b7024 <_ZN15Adafruit_AS734113writeRegisterEhh>
  writeRegister(byte(0x13), byte(0x06)); // NIR connected to ADC5
   b710a:	4620      	mov	r0, r4
   b710c:	2206      	movs	r2, #6
}
   b710e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  writeRegister(byte(0x13), byte(0x06)); // NIR connected to ADC5
   b7112:	2113      	movs	r1, #19
   b7114:	f7ff bf86 	b.w	b7024 <_ZN15Adafruit_AS734113writeRegisterEhh>

000b7118 <_ZN15Adafruit_AS734120setup_F5F8_Clear_NIREv>:
  writeRegister(byte(0x00), byte(0x00)); // F3 left disable
   b7118:	2200      	movs	r2, #0
void Adafruit_AS7341::setup_F5F8_Clear_NIR() {
   b711a:	b510      	push	{r4, lr}
  writeRegister(byte(0x00), byte(0x00)); // F3 left disable
   b711c:	4611      	mov	r1, r2
void Adafruit_AS7341::setup_F5F8_Clear_NIR() {
   b711e:	4604      	mov	r4, r0
  writeRegister(byte(0x00), byte(0x00)); // F3 left disable
   b7120:	f7ff ff80 	bl	b7024 <_ZN15Adafruit_AS734113writeRegisterEhh>
  writeRegister(byte(0x01), byte(0x00)); // F1 left disable
   b7124:	4620      	mov	r0, r4
   b7126:	2200      	movs	r2, #0
   b7128:	2101      	movs	r1, #1
   b712a:	f7ff ff7b 	bl	b7024 <_ZN15Adafruit_AS734113writeRegisterEhh>
  writeRegister(byte(0x02), byte(0x00)); // reserved/disable
   b712e:	4620      	mov	r0, r4
   b7130:	2200      	movs	r2, #0
   b7132:	2102      	movs	r1, #2
   b7134:	f7ff ff76 	bl	b7024 <_ZN15Adafruit_AS734113writeRegisterEhh>
  writeRegister(byte(0x03), byte(0x40)); // F8 left connected to ADC3
   b7138:	4620      	mov	r0, r4
   b713a:	2240      	movs	r2, #64	; 0x40
   b713c:	2103      	movs	r1, #3
   b713e:	f7ff ff71 	bl	b7024 <_ZN15Adafruit_AS734113writeRegisterEhh>
  writeRegister(byte(0x04), byte(0x02)); // F6 left connected to ADC1
   b7142:	4620      	mov	r0, r4
   b7144:	2202      	movs	r2, #2
   b7146:	2104      	movs	r1, #4
   b7148:	f7ff ff6c 	bl	b7024 <_ZN15Adafruit_AS734113writeRegisterEhh>
  writeRegister(byte(0x05), byte(0x00)); // F4/ F2 disabled
   b714c:	4620      	mov	r0, r4
   b714e:	2200      	movs	r2, #0
   b7150:	2105      	movs	r1, #5
   b7152:	f7ff ff67 	bl	b7024 <_ZN15Adafruit_AS734113writeRegisterEhh>
  writeRegister(byte(0x06), byte(0x10)); // F5 left connected to ADC0
   b7156:	4620      	mov	r0, r4
   b7158:	2210      	movs	r2, #16
   b715a:	2106      	movs	r1, #6
   b715c:	f7ff ff62 	bl	b7024 <_ZN15Adafruit_AS734113writeRegisterEhh>
  writeRegister(byte(0x07), byte(0x03)); // F7 left connected to ADC2
   b7160:	4620      	mov	r0, r4
   b7162:	2203      	movs	r2, #3
   b7164:	2107      	movs	r1, #7
   b7166:	f7ff ff5d 	bl	b7024 <_ZN15Adafruit_AS734113writeRegisterEhh>
  writeRegister(byte(0x08), byte(0x50)); // CLEAR Connected to ADC4
   b716a:	4620      	mov	r0, r4
   b716c:	2250      	movs	r2, #80	; 0x50
   b716e:	2108      	movs	r1, #8
   b7170:	f7ff ff58 	bl	b7024 <_ZN15Adafruit_AS734113writeRegisterEhh>
  writeRegister(byte(0x09), byte(0x10)); // F5 right connected to ADC0
   b7174:	4620      	mov	r0, r4
   b7176:	2210      	movs	r2, #16
   b7178:	2109      	movs	r1, #9
   b717a:	f7ff ff53 	bl	b7024 <_ZN15Adafruit_AS734113writeRegisterEhh>
  writeRegister(byte(0x0A), byte(0x03)); // F7 right connected to ADC2
   b717e:	4620      	mov	r0, r4
   b7180:	2203      	movs	r2, #3
   b7182:	210a      	movs	r1, #10
   b7184:	f7ff ff4e 	bl	b7024 <_ZN15Adafruit_AS734113writeRegisterEhh>
  writeRegister(byte(0x0B), byte(0x00)); // Reserved or disabled
   b7188:	4620      	mov	r0, r4
   b718a:	2200      	movs	r2, #0
   b718c:	210b      	movs	r1, #11
   b718e:	f7ff ff49 	bl	b7024 <_ZN15Adafruit_AS734113writeRegisterEhh>
  writeRegister(byte(0x0C), byte(0x00)); // F2 right disabled
   b7192:	4620      	mov	r0, r4
   b7194:	2200      	movs	r2, #0
   b7196:	210c      	movs	r1, #12
   b7198:	f7ff ff44 	bl	b7024 <_ZN15Adafruit_AS734113writeRegisterEhh>
  writeRegister(byte(0x0D), byte(0x00)); // F4 right disabled
   b719c:	4620      	mov	r0, r4
   b719e:	2200      	movs	r2, #0
   b71a0:	210d      	movs	r1, #13
   b71a2:	f7ff ff3f 	bl	b7024 <_ZN15Adafruit_AS734113writeRegisterEhh>
  writeRegister(
   b71a6:	4620      	mov	r0, r4
   b71a8:	2224      	movs	r2, #36	; 0x24
   b71aa:	210e      	movs	r1, #14
   b71ac:	f7ff ff3a 	bl	b7024 <_ZN15Adafruit_AS734113writeRegisterEhh>
  writeRegister(byte(0x0F), byte(0x00)); // F3 right disabled
   b71b0:	4620      	mov	r0, r4
   b71b2:	2200      	movs	r2, #0
   b71b4:	210f      	movs	r1, #15
   b71b6:	f7ff ff35 	bl	b7024 <_ZN15Adafruit_AS734113writeRegisterEhh>
  writeRegister(byte(0x10), byte(0x00)); // F1 right disabled
   b71ba:	4620      	mov	r0, r4
   b71bc:	2200      	movs	r2, #0
   b71be:	2110      	movs	r1, #16
   b71c0:	f7ff ff30 	bl	b7024 <_ZN15Adafruit_AS734113writeRegisterEhh>
  writeRegister(byte(0x11), byte(0x50)); // CLEAR right connected to AD4
   b71c4:	4620      	mov	r0, r4
   b71c6:	2250      	movs	r2, #80	; 0x50
   b71c8:	2111      	movs	r1, #17
   b71ca:	f7ff ff2b 	bl	b7024 <_ZN15Adafruit_AS734113writeRegisterEhh>
  writeRegister(byte(0x12), byte(0x00)); // Reserved or disabled
   b71ce:	4620      	mov	r0, r4
   b71d0:	2200      	movs	r2, #0
   b71d2:	2112      	movs	r1, #18
   b71d4:	f7ff ff26 	bl	b7024 <_ZN15Adafruit_AS734113writeRegisterEhh>
  writeRegister(byte(0x13), byte(0x06)); // NIR connected to ADC5
   b71d8:	4620      	mov	r0, r4
   b71da:	2206      	movs	r2, #6
}
   b71dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  writeRegister(byte(0x13), byte(0x06)); // NIR connected to ADC5
   b71e0:	2113      	movs	r1, #19
   b71e2:	f7ff bf1f 	b.w	b7024 <_ZN15Adafruit_AS734113writeRegisterEhh>

000b71e6 <_ZN15Adafruit_AS734118setSMUXLowChannelsEb>:
void Adafruit_AS7341::setSMUXLowChannels(bool f1_f4) {
   b71e6:	b538      	push	{r3, r4, r5, lr}
   b71e8:	4604      	mov	r4, r0
   b71ea:	460d      	mov	r5, r1
  enableSpectralMeasurement(false);
   b71ec:	2100      	movs	r1, #0
   b71ee:	f7ff fdd6 	bl	b6d9e <_ZN15Adafruit_AS734125enableSpectralMeasurementEb>
  setSMUXCommand(AS7341_SMUX_CMD_WRITE);
   b71f2:	2102      	movs	r1, #2
   b71f4:	4620      	mov	r0, r4
   b71f6:	f7ff fe16 	bl	b6e26 <_ZN15Adafruit_AS734114setSMUXCommandE17as7341_smux_cmd_t>
    setup_F1F4_Clear_NIR();
   b71fa:	4620      	mov	r0, r4
  if (f1_f4) {
   b71fc:	b135      	cbz	r5, b720c <_ZN15Adafruit_AS734118setSMUXLowChannelsEb+0x26>
    setup_F1F4_Clear_NIR();
   b71fe:	f7ff ff24 	bl	b704a <_ZN15Adafruit_AS734120setup_F1F4_Clear_NIREv>
  enableSMUX();
   b7202:	4620      	mov	r0, r4
}
   b7204:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  enableSMUX();
   b7208:	f7ff bde1 	b.w	b6dce <_ZN15Adafruit_AS734110enableSMUXEv>
    setup_F5F8_Clear_NIR();
   b720c:	f7ff ff84 	bl	b7118 <_ZN15Adafruit_AS734120setup_F5F8_Clear_NIREv>
   b7210:	e7f7      	b.n	b7202 <_ZN15Adafruit_AS734118setSMUXLowChannelsEb+0x1c>

000b7212 <_ZN15Adafruit_AS734115readAllChannelsEPt>:
bool Adafruit_AS7341::readAllChannels(uint16_t *readings_buffer) {
   b7212:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b7216:	4604      	mov	r4, r0
   b7218:	b088      	sub	sp, #32
   b721a:	460e      	mov	r6, r1
  setSMUXLowChannels(true);        // Configure SMUX to read low channels
   b721c:	2101      	movs	r1, #1
   b721e:	f7ff ffe2 	bl	b71e6 <_ZN15Adafruit_AS734118setSMUXLowChannelsEb>
  enableSpectralMeasurement(true); // Start integration
   b7222:	2101      	movs	r1, #1
   b7224:	4620      	mov	r0, r4
   b7226:	f7ff fdba 	bl	b6d9e <_ZN15Adafruit_AS734125enableSpectralMeasurementEb>
      Adafruit_BusIO_Register(i2c_dev, AS7341_CH0_DATA_L, 2);
   b722a:	f04f 0800 	mov.w	r8, #0
   b722e:	4620      	mov	r0, r4
   b7230:	2701      	movs	r7, #1
   b7232:	f7ff fe2a 	bl	b6e8a <_ZN15Adafruit_AS734112delayForDataEi.part.0>
   b7236:	2302      	movs	r3, #2
   b7238:	68a1      	ldr	r1, [r4, #8]
   b723a:	2295      	movs	r2, #149	; 0x95
   b723c:	e9cd 8700 	strd	r8, r7, [sp]
   b7240:	a802      	add	r0, sp, #8
   b7242:	f7fd fd48 	bl	b4cd6 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>
  bool low_success = channel_data_reg.read((uint8_t *)readings_buffer, 12);
   b7246:	220c      	movs	r2, #12
   b7248:	4631      	mov	r1, r6
   b724a:	a802      	add	r0, sp, #8
   b724c:	f7fd fdbc 	bl	b4dc8 <_ZN23Adafruit_BusIO_Register4readEPhh>
  setSMUXLowChannels(false);       // Configure SMUX to read high channels
   b7250:	4641      	mov	r1, r8
  bool low_success = channel_data_reg.read((uint8_t *)readings_buffer, 12);
   b7252:	4605      	mov	r5, r0
  setSMUXLowChannels(false);       // Configure SMUX to read high channels
   b7254:	4620      	mov	r0, r4
   b7256:	f7ff ffc6 	bl	b71e6 <_ZN15Adafruit_AS734118setSMUXLowChannelsEb>
  enableSpectralMeasurement(true); // Start integration
   b725a:	4639      	mov	r1, r7
   b725c:	4620      	mov	r0, r4
   b725e:	f7ff fd9e 	bl	b6d9e <_ZN15Adafruit_AS734125enableSpectralMeasurementEb>
  if (waitTime == 0) // Wait forever
   b7262:	4620      	mov	r0, r4
   b7264:	f7ff fe11 	bl	b6e8a <_ZN15Adafruit_AS734112delayForDataEi.part.0>
  return low_success &&
   b7268:	b12d      	cbz	r5, b7276 <_ZN15Adafruit_AS734115readAllChannelsEPt+0x64>
         channel_data_reg.read((uint8_t *)&readings_buffer[6], 12);
   b726a:	220c      	movs	r2, #12
   b726c:	18b1      	adds	r1, r6, r2
   b726e:	a802      	add	r0, sp, #8
   b7270:	f7fd fdaa 	bl	b4dc8 <_ZN23Adafruit_BusIO_Register4readEPhh>
   b7274:	4605      	mov	r5, r0
}
   b7276:	4628      	mov	r0, r5
   b7278:	b008      	add	sp, #32
   b727a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000b7280 <_ZL9date2daysthh>:
// utility code, some of this could be exposed in the DateTime API if needed

const uint8_t daysInMonth [] PROGMEM = { 31,28,31,30,31,30,31,31,30,31,30,31 };

// number of days since 2000/01/01, valid for 2001..2099
static uint16_t date2days(uint16_t y, uint8_t m, uint8_t d) {
   b7280:	b530      	push	{r4, r5, lr}
   b7282:	4c0f      	ldr	r4, [pc, #60]	; (b72c0 <_ZL9date2daysthh+0x40>)
    if (y >= 2000)
        y -= 2000;
    uint16_t days = d;
   b7284:	2300      	movs	r3, #0
    for (uint8_t i = 1; i < m; ++i)
   b7286:	3301      	adds	r3, #1
   b7288:	b2dd      	uxtb	r5, r3
   b728a:	428d      	cmp	r5, r1
   b728c:	d204      	bcs.n	b7298 <_ZL9date2daysthh+0x18>
        days += pgm_read_byte(daysInMonth + i - 1);
   b728e:	f814 5b01 	ldrb.w	r5, [r4], #1
   b7292:	442a      	add	r2, r5
   b7294:	b292      	uxth	r2, r2
    for (uint8_t i = 1; i < m; ++i)
   b7296:	e7f6      	b.n	b7286 <_ZL9date2daysthh+0x6>
    if (m > 2 && y % 4 == 0)
   b7298:	2902      	cmp	r1, #2
   b729a:	d903      	bls.n	b72a4 <_ZL9date2daysthh+0x24>
   b729c:	0783      	lsls	r3, r0, #30
        ++days;
   b729e:	bf04      	itt	eq
   b72a0:	3201      	addeq	r2, #1
   b72a2:	b292      	uxtheq	r2, r2
    return days + 365 * y + (y + 3) / 4 - 1;
   b72a4:	eb00 01c0 	add.w	r1, r0, r0, lsl #3
   b72a8:	1cc3      	adds	r3, r0, #3
   b72aa:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
   b72ae:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   b72b2:	f3c3 038d 	ubfx	r3, r3, #2, #14
   b72b6:	3801      	subs	r0, #1
   b72b8:	4418      	add	r0, r3
   b72ba:	4410      	add	r0, r2
}
   b72bc:	b280      	uxth	r0, r0
   b72be:	bd30      	pop	{r4, r5, pc}
   b72c0:	000b9cf8 	.word	0x000b9cf8

000b72c4 <_ZNK8DateTime12dayOfTheWeekEv>:
    hh = conv2d(buff);
    mm = conv2d(buff + 3);
    ss = conv2d(buff + 6);
}

uint8_t DateTime::dayOfTheWeek() const {    
   b72c4:	b508      	push	{r3, lr}
    uint16_t day = date2days(yOff, m, d);
   b72c6:	7882      	ldrb	r2, [r0, #2]
   b72c8:	7841      	ldrb	r1, [r0, #1]
   b72ca:	7800      	ldrb	r0, [r0, #0]
   b72cc:	f7ff ffd8 	bl	b7280 <_ZL9date2daysthh>
    return (day + 6) % 7; // Jan 1, 2000 is a Saturday, i.e. returns 6
   b72d0:	2307      	movs	r3, #7
   b72d2:	3006      	adds	r0, #6
   b72d4:	fbb0 f3f3 	udiv	r3, r0, r3
   b72d8:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   b72dc:	1ac0      	subs	r0, r0, r3
}
   b72de:	b2c0      	uxtb	r0, r0
   b72e0:	bd08      	pop	{r3, pc}

000b72e2 <_ZN10RTC_DS13075beginEv>:
// RTC_DS1307 implementation

static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
static uint8_t bin2bcd (uint8_t val) { return val + 6 * (val / 10); }

boolean RTC_DS1307::begin(void) {
   b72e2:	b508      	push	{r3, lr}
  Wire.begin();
   b72e4:	f001 fba8 	bl	b8a38 <_Z19__fetch_global_Wirev>
   b72e8:	f001 f9b2 	bl	b8650 <_ZN7TwoWire5beginEv>
  return true;
}
   b72ec:	2001      	movs	r0, #1
   b72ee:	bd08      	pop	{r3, pc}

000b72f0 <_ZN11RTC_PCF85235beginEv>:
   b72f0:	f7ff bff7 	b.w	b72e2 <_ZN10RTC_DS13075beginEv>

000b72f4 <_ZN11RTC_PCF852311initializedEv>:
boolean RTC_PCF8523::begin(void) {
  Wire.begin();
  return true;
}

boolean RTC_PCF8523::initialized(void) {
   b72f4:	b508      	push	{r3, lr}
  Wire.beginTransmission(PCF8523_ADDRESS);
   b72f6:	f001 fb9f 	bl	b8a38 <_Z19__fetch_global_Wirev>
   b72fa:	2168      	movs	r1, #104	; 0x68
   b72fc:	f001 f9de 	bl	b86bc <_ZN7TwoWire17beginTransmissionEi>
  Wire._I2C_WRITE((byte)PCF8523_CONTROL_3);
   b7300:	f001 fb9a 	bl	b8a38 <_Z19__fetch_global_Wirev>
   b7304:	6803      	ldr	r3, [r0, #0]
   b7306:	2102      	movs	r1, #2
   b7308:	689b      	ldr	r3, [r3, #8]
   b730a:	4798      	blx	r3
  Wire.endTransmission();
   b730c:	f001 fb94 	bl	b8a38 <_Z19__fetch_global_Wirev>
   b7310:	f001 f9db 	bl	b86ca <_ZN7TwoWire15endTransmissionEv>

  Wire.requestFrom(PCF8523_ADDRESS, 1);
   b7314:	f001 fb90 	bl	b8a38 <_Z19__fetch_global_Wirev>
   b7318:	2201      	movs	r2, #1
   b731a:	2168      	movs	r1, #104	; 0x68
   b731c:	f001 f9c7 	bl	b86ae <_ZN7TwoWire11requestFromEhj>
  uint8_t ss = Wire._I2C_READ();
   b7320:	f001 fb8a 	bl	b8a38 <_Z19__fetch_global_Wirev>
   b7324:	6803      	ldr	r3, [r0, #0]
   b7326:	695b      	ldr	r3, [r3, #20]
   b7328:	4798      	blx	r3
  return ((ss & 0xE0) != 0xE0);
   b732a:	f000 00e0 	and.w	r0, r0, #224	; 0xe0
}
   b732e:	38e0      	subs	r0, #224	; 0xe0
   b7330:	bf18      	it	ne
   b7332:	2001      	movne	r0, #1
   b7334:	bd08      	pop	{r3, pc}

000b7336 <_ZN11RTC_PCF85233nowEv>:
  Wire._I2C_WRITE((byte)PCF8523_CONTROL_3);
  Wire._I2C_WRITE((byte)0x00);
  Wire.endTransmission();
}

DateTime RTC_PCF8523::now() {
   b7336:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b733a:	4604      	mov	r4, r0
  Wire.beginTransmission(PCF8523_ADDRESS);
   b733c:	f001 fb7c 	bl	b8a38 <_Z19__fetch_global_Wirev>
   b7340:	2168      	movs	r1, #104	; 0x68
   b7342:	f001 f9bb 	bl	b86bc <_ZN7TwoWire17beginTransmissionEi>
  Wire._I2C_WRITE((byte)3);	
   b7346:	f001 fb77 	bl	b8a38 <_Z19__fetch_global_Wirev>
   b734a:	6803      	ldr	r3, [r0, #0]
   b734c:	2103      	movs	r1, #3
   b734e:	689b      	ldr	r3, [r3, #8]
   b7350:	4798      	blx	r3
  Wire.endTransmission();
   b7352:	f001 fb71 	bl	b8a38 <_Z19__fetch_global_Wirev>
   b7356:	f001 f9b8 	bl	b86ca <_ZN7TwoWire15endTransmissionEv>

  Wire.requestFrom(PCF8523_ADDRESS, 7);
   b735a:	f001 fb6d 	bl	b8a38 <_Z19__fetch_global_Wirev>
   b735e:	2207      	movs	r2, #7
   b7360:	2168      	movs	r1, #104	; 0x68
   b7362:	f001 f9a4 	bl	b86ae <_ZN7TwoWire11requestFromEhj>
  uint8_t ss = bcd2bin(Wire._I2C_READ() & 0x7F);
   b7366:	f001 fb67 	bl	b8a38 <_Z19__fetch_global_Wirev>
   b736a:	6803      	ldr	r3, [r0, #0]
   b736c:	695b      	ldr	r3, [r3, #20]
   b736e:	4798      	blx	r3
   b7370:	f000 097f 	and.w	r9, r0, #127	; 0x7f
static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
   b7374:	f3c0 1002 	ubfx	r0, r0, #4, #3
   b7378:	eba0 0080 	sub.w	r0, r0, r0, lsl #2
   b737c:	eb09 0040 	add.w	r0, r9, r0, lsl #1
   b7380:	fa5f f980 	uxtb.w	r9, r0
  uint8_t mm = bcd2bin(Wire._I2C_READ());
   b7384:	f001 fb58 	bl	b8a38 <_Z19__fetch_global_Wirev>
   b7388:	6803      	ldr	r3, [r0, #0]
   b738a:	695b      	ldr	r3, [r3, #20]
   b738c:	4798      	blx	r3
static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
   b738e:	f3c0 1503 	ubfx	r5, r0, #4, #4
   b7392:	eba5 0585 	sub.w	r5, r5, r5, lsl #2
   b7396:	eb00 0045 	add.w	r0, r0, r5, lsl #1
   b739a:	f000 05ff 	and.w	r5, r0, #255	; 0xff
  uint8_t hh = bcd2bin(Wire._I2C_READ());
   b739e:	f001 fb4b 	bl	b8a38 <_Z19__fetch_global_Wirev>
   b73a2:	6803      	ldr	r3, [r0, #0]
   b73a4:	695b      	ldr	r3, [r3, #20]
   b73a6:	4798      	blx	r3
static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
   b73a8:	f3c0 1603 	ubfx	r6, r0, #4, #4
   b73ac:	eba6 0686 	sub.w	r6, r6, r6, lsl #2
   b73b0:	eb00 0046 	add.w	r0, r0, r6, lsl #1
   b73b4:	f000 06ff 	and.w	r6, r0, #255	; 0xff
  uint8_t d = bcd2bin(Wire._I2C_READ());
   b73b8:	f001 fb3e 	bl	b8a38 <_Z19__fetch_global_Wirev>
   b73bc:	6803      	ldr	r3, [r0, #0]
   b73be:	695b      	ldr	r3, [r3, #20]
   b73c0:	4798      	blx	r3
static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
   b73c2:	f3c0 1703 	ubfx	r7, r0, #4, #4
   b73c6:	eba7 0787 	sub.w	r7, r7, r7, lsl #2
   b73ca:	eb00 0047 	add.w	r0, r0, r7, lsl #1
   b73ce:	f000 07ff 	and.w	r7, r0, #255	; 0xff
  Wire._I2C_READ();  // skip 'weekdays'
   b73d2:	f001 fb31 	bl	b8a38 <_Z19__fetch_global_Wirev>
   b73d6:	6803      	ldr	r3, [r0, #0]
   b73d8:	695b      	ldr	r3, [r3, #20]
   b73da:	4798      	blx	r3
  uint8_t m = bcd2bin(Wire._I2C_READ());
   b73dc:	f001 fb2c 	bl	b8a38 <_Z19__fetch_global_Wirev>
   b73e0:	6803      	ldr	r3, [r0, #0]
   b73e2:	695b      	ldr	r3, [r3, #20]
   b73e4:	4798      	blx	r3
static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
   b73e6:	f3c0 1803 	ubfx	r8, r0, #4, #4
   b73ea:	eba8 0888 	sub.w	r8, r8, r8, lsl #2
   b73ee:	eb00 0048 	add.w	r0, r0, r8, lsl #1
   b73f2:	f000 08ff 	and.w	r8, r0, #255	; 0xff
  uint16_t y = bcd2bin(Wire._I2C_READ()) + 2000;
   b73f6:	f001 fb1f 	bl	b8a38 <_Z19__fetch_global_Wirev>
   b73fa:	6803      	ldr	r3, [r0, #0]
   b73fc:	695b      	ldr	r3, [r3, #20]
   b73fe:	4798      	blx	r3
static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
   b7400:	f3c0 1303 	ubfx	r3, r0, #4, #4
   b7404:	eba3 0383 	sub.w	r3, r3, r3, lsl #2
   b7408:	eb00 0043 	add.w	r0, r0, r3, lsl #1
    yOff = year;
   b740c:	7020      	strb	r0, [r4, #0]
    m = month;
   b740e:	f884 8001 	strb.w	r8, [r4, #1]
    d = day;
   b7412:	70a7      	strb	r7, [r4, #2]
    hh = hour;
   b7414:	70e6      	strb	r6, [r4, #3]
    mm = min;
   b7416:	7125      	strb	r5, [r4, #4]
    ss = sec;
   b7418:	f884 9005 	strb.w	r9, [r4, #5]
  
  return DateTime (y, m, d, hh, mm, ss);
}
   b741c:	4620      	mov	r0, r4
   b741e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000b7422 <_ZN15Adafruit_AW9523C1Ev>:
#include "Adafruit_AW9523.h"

/*!
 *    @brief  Instantiates a new AW9523 class
 */
Adafruit_AW9523::Adafruit_AW9523(void) {}
   b7422:	2200      	movs	r2, #0
   b7424:	6002      	str	r2, [r0, #0]
   b7426:	4770      	bx	lr

000b7428 <_ZN15Adafruit_AW95235resetEv>:

/*!
 *    @brief  Perform a soft reset over I2C
 *    @return True I2C reset command was acknowledged
 */
bool Adafruit_AW9523::reset(void) {
   b7428:	b510      	push	{r4, lr}
  Adafruit_I2CRegister resetreg =
      Adafruit_I2CRegister(i2c_dev, AW9523_REG_SOFTRESET);
   b742a:	2301      	movs	r3, #1
bool Adafruit_AW9523::reset(void) {
   b742c:	b088      	sub	sp, #32
      Adafruit_I2CRegister(i2c_dev, AW9523_REG_SOFTRESET);
   b742e:	2400      	movs	r4, #0
   b7430:	e9cd 4300 	strd	r4, r3, [sp]
   b7434:	227f      	movs	r2, #127	; 0x7f
   b7436:	6801      	ldr	r1, [r0, #0]
   b7438:	a802      	add	r0, sp, #8
   b743a:	f7fd fc4c 	bl	b4cd6 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>
  return resetreg.write(0);
   b743e:	4622      	mov	r2, r4
   b7440:	4621      	mov	r1, r4
   b7442:	a802      	add	r0, sp, #8
   b7444:	f7fd fca2 	bl	b4d8c <_ZN23Adafruit_BusIO_Register5writeEmh>
}
   b7448:	b008      	add	sp, #32
   b744a:	bd10      	pop	{r4, pc}

000b744c <_ZN15Adafruit_AW952319interruptEnableGPIOEt>:
/*!
 *    @brief  Sets interrupt watch for all 16 GPIO, 1 == enabled
 *    @param  pins 16-bits of pins we may want INT enabled
 *    @return True I2C write command was acknowledged
 */
bool Adafruit_AW9523::interruptEnableGPIO(uint16_t pins) {
   b744c:	b530      	push	{r4, r5, lr}
  Adafruit_I2CRegister int0reg =
      Adafruit_I2CRegister(i2c_dev, AW9523_REG_INTENABLE0, 2, LSBFIRST);
   b744e:	2301      	movs	r3, #1
bool Adafruit_AW9523::interruptEnableGPIO(uint16_t pins) {
   b7450:	b089      	sub	sp, #36	; 0x24
      Adafruit_I2CRegister(i2c_dev, AW9523_REG_INTENABLE0, 2, LSBFIRST);
   b7452:	2500      	movs	r5, #0
   b7454:	e9cd 5300 	strd	r5, r3, [sp]
bool Adafruit_AW9523::interruptEnableGPIO(uint16_t pins) {
   b7458:	460c      	mov	r4, r1
      Adafruit_I2CRegister(i2c_dev, AW9523_REG_INTENABLE0, 2, LSBFIRST);
   b745a:	2302      	movs	r3, #2
   b745c:	6801      	ldr	r1, [r0, #0]
   b745e:	2206      	movs	r2, #6
   b7460:	a802      	add	r0, sp, #8
   b7462:	f7fd fc38 	bl	b4cd6 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>
  if (!int0reg.write(~pins)) {
   b7466:	462a      	mov	r2, r5
   b7468:	43e1      	mvns	r1, r4
   b746a:	a802      	add	r0, sp, #8
   b746c:	f7fd fc8e 	bl	b4d8c <_ZN23Adafruit_BusIO_Register5writeEmh>
    return false;
  }
  return true;
}
   b7470:	b009      	add	sp, #36	; 0x24
   b7472:	bd30      	pop	{r4, r5, pc}

000b7474 <_ZN15Adafruit_AW952318configureDirectionEt>:
/*!
 *    @brief  Sets direction for all 16 GPIO, 1 == output, 0 == input
 *    @param  pins 16-bits of pins we want to set direction
 *    @return True I2C write command was acknowledged
 */
bool Adafruit_AW9523::configureDirection(uint16_t pins) {
   b7474:	b530      	push	{r4, r5, lr}
  Adafruit_I2CRegister conf0reg =
      Adafruit_I2CRegister(i2c_dev, AW9523_REG_CONFIG0, 2, LSBFIRST);
   b7476:	2301      	movs	r3, #1
bool Adafruit_AW9523::configureDirection(uint16_t pins) {
   b7478:	b089      	sub	sp, #36	; 0x24
      Adafruit_I2CRegister(i2c_dev, AW9523_REG_CONFIG0, 2, LSBFIRST);
   b747a:	2500      	movs	r5, #0
   b747c:	e9cd 5300 	strd	r5, r3, [sp]
bool Adafruit_AW9523::configureDirection(uint16_t pins) {
   b7480:	460c      	mov	r4, r1
      Adafruit_I2CRegister(i2c_dev, AW9523_REG_CONFIG0, 2, LSBFIRST);
   b7482:	2302      	movs	r3, #2
   b7484:	6801      	ldr	r1, [r0, #0]
   b7486:	2204      	movs	r2, #4
   b7488:	a802      	add	r0, sp, #8
   b748a:	f7fd fc24 	bl	b4cd6 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>
  if (!conf0reg.write(~pins)) {
   b748e:	462a      	mov	r2, r5
   b7490:	43e1      	mvns	r1, r4
   b7492:	a802      	add	r0, sp, #8
   b7494:	f7fd fc7a 	bl	b4d8c <_ZN23Adafruit_BusIO_Register5writeEmh>
    return false;
  }

  return true;
}
   b7498:	b009      	add	sp, #36	; 0x24
   b749a:	bd30      	pop	{r4, r5, pc}

000b749c <_ZN15Adafruit_AW952312digitalWriteEhb>:
/*!
 *    @brief  Sets digital output for one pin
 *    @param  pin GPIO to set, from 0 to 15 inclusive
 *    @param  val True for high value, False for low value
 */
void Adafruit_AW9523::digitalWrite(uint8_t pin, bool val) {
   b749c:	b570      	push	{r4, r5, r6, lr}
  Adafruit_I2CRegister output0reg =
      Adafruit_I2CRegister(i2c_dev, AW9523_REG_OUTPUT0, 2, LSBFIRST);
   b749e:	2300      	movs	r3, #0
void Adafruit_AW9523::digitalWrite(uint8_t pin, bool val) {
   b74a0:	b08a      	sub	sp, #40	; 0x28
      Adafruit_I2CRegister(i2c_dev, AW9523_REG_OUTPUT0, 2, LSBFIRST);
   b74a2:	2601      	movs	r6, #1
   b74a4:	e9cd 3600 	strd	r3, r6, [sp]
   b74a8:	2302      	movs	r3, #2
void Adafruit_AW9523::digitalWrite(uint8_t pin, bool val) {
   b74aa:	460d      	mov	r5, r1
   b74ac:	4614      	mov	r4, r2
      Adafruit_I2CRegister(i2c_dev, AW9523_REG_OUTPUT0, 2, LSBFIRST);
   b74ae:	6801      	ldr	r1, [r0, #0]
   b74b0:	461a      	mov	r2, r3
   b74b2:	a804      	add	r0, sp, #16
   b74b4:	f7fd fc0f 	bl	b4cd6 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>
  Adafruit_I2CRegisterBits outbit =
      Adafruit_I2CRegisterBits(&output0reg, 1, pin); // # bits, bit_shift
   b74b8:	462b      	mov	r3, r5
   b74ba:	4632      	mov	r2, r6
   b74bc:	a904      	add	r1, sp, #16
   b74be:	a802      	add	r0, sp, #8
   b74c0:	f7fd fce0 	bl	b4e84 <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>

  outbit.write(val);
   b74c4:	4621      	mov	r1, r4
   b74c6:	a802      	add	r0, sp, #8
   b74c8:	f7fd fcee 	bl	b4ea8 <_ZN27Adafruit_BusIO_RegisterBits5writeEm>
}
   b74cc:	b00a      	add	sp, #40	; 0x28
   b74ce:	bd70      	pop	{r4, r5, r6, pc}

000b74d0 <_ZN15Adafruit_AW95237pinModeEhh>:
 *    @brief  Sets pin mode / direction for one pin
 *    @param  pin GPIO to set, from 0 to 15 inclusive
 *    @param  mode Can be INPUT, OUTPUT for GPIO digital, or AW9523_LED_MODE for
 * constant current LED drive
 */
void Adafruit_AW9523::pinMode(uint8_t pin, uint8_t mode) {
   b74d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  // GPIO Direction
  Adafruit_I2CRegister conf0reg =
      Adafruit_I2CRegister(i2c_dev, AW9523_REG_CONFIG0, 2, LSBFIRST);
   b74d4:	2401      	movs	r4, #1
void Adafruit_AW9523::pinMode(uint8_t pin, uint8_t mode) {
   b74d6:	b092      	sub	sp, #72	; 0x48
      Adafruit_I2CRegister(i2c_dev, AW9523_REG_CONFIG0, 2, LSBFIRST);
   b74d8:	2600      	movs	r6, #0
   b74da:	e9cd 6400 	strd	r6, r4, [sp]
void Adafruit_AW9523::pinMode(uint8_t pin, uint8_t mode) {
   b74de:	460f      	mov	r7, r1
   b74e0:	4680      	mov	r8, r0
      Adafruit_I2CRegister(i2c_dev, AW9523_REG_CONFIG0, 2, LSBFIRST);
   b74e2:	6801      	ldr	r1, [r0, #0]
void Adafruit_AW9523::pinMode(uint8_t pin, uint8_t mode) {
   b74e4:	4615      	mov	r5, r2
      Adafruit_I2CRegister(i2c_dev, AW9523_REG_CONFIG0, 2, LSBFIRST);
   b74e6:	2302      	movs	r3, #2
   b74e8:	2204      	movs	r2, #4
   b74ea:	a806      	add	r0, sp, #24
   b74ec:	f7fd fbf3 	bl	b4cd6 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>
  Adafruit_I2CRegisterBits confbit =
      Adafruit_I2CRegisterBits(&conf0reg, 1, pin); // # bits, bit_shift
   b74f0:	463b      	mov	r3, r7
   b74f2:	4622      	mov	r2, r4
   b74f4:	a906      	add	r1, sp, #24
   b74f6:	a802      	add	r0, sp, #8
   b74f8:	f7fd fcc4 	bl	b4e84 <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>

  // GPIO mode or LED mode?
  Adafruit_I2CRegister ledmodereg =
      Adafruit_I2CRegister(i2c_dev, AW9523_REG_LEDMODE, 2, LSBFIRST);
   b74fc:	f8d8 1000 	ldr.w	r1, [r8]
   b7500:	2302      	movs	r3, #2
   b7502:	2212      	movs	r2, #18
   b7504:	e9cd 6400 	strd	r6, r4, [sp]
   b7508:	a80c      	add	r0, sp, #48	; 0x30
   b750a:	f7fd fbe4 	bl	b4cd6 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>
  Adafruit_I2CRegisterBits modebit =
      Adafruit_I2CRegisterBits(&ledmodereg, 1, pin); // # bits, bit_shift
   b750e:	463b      	mov	r3, r7
   b7510:	4622      	mov	r2, r4
   b7512:	a90c      	add	r1, sp, #48	; 0x30
   b7514:	a804      	add	r0, sp, #16
   b7516:	f7fd fcb5 	bl	b4e84 <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>

  if (mode == OUTPUT) {
   b751a:	42a5      	cmp	r5, r4
   b751c:	d10a      	bne.n	b7534 <_ZN15Adafruit_AW95237pinModeEhh+0x64>
    confbit.write(0);
   b751e:	4631      	mov	r1, r6
   b7520:	a802      	add	r0, sp, #8
   b7522:	f7fd fcc1 	bl	b4ea8 <_ZN27Adafruit_BusIO_RegisterBits5writeEm>
    modebit.write(1);
   b7526:	4629      	mov	r1, r5
    modebit.write(1);
  }

  if (mode == AW9523_LED_MODE) {
    confbit.write(0);
    modebit.write(0);
   b7528:	a804      	add	r0, sp, #16
   b752a:	f7fd fcbd 	bl	b4ea8 <_ZN27Adafruit_BusIO_RegisterBits5writeEm>
  }
}
   b752e:	b012      	add	sp, #72	; 0x48
   b7530:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (mode == INPUT) {
   b7534:	b13d      	cbz	r5, b7546 <_ZN15Adafruit_AW95237pinModeEhh+0x76>
  if (mode == AW9523_LED_MODE) {
   b7536:	2d03      	cmp	r5, #3
   b7538:	d1f9      	bne.n	b752e <_ZN15Adafruit_AW95237pinModeEhh+0x5e>
    confbit.write(0);
   b753a:	4631      	mov	r1, r6
   b753c:	a802      	add	r0, sp, #8
   b753e:	f7fd fcb3 	bl	b4ea8 <_ZN27Adafruit_BusIO_RegisterBits5writeEm>
    modebit.write(0);
   b7542:	4631      	mov	r1, r6
   b7544:	e7f0      	b.n	b7528 <_ZN15Adafruit_AW95237pinModeEhh+0x58>
    confbit.write(1);
   b7546:	4621      	mov	r1, r4
   b7548:	a802      	add	r0, sp, #8
   b754a:	f7fd fcad 	bl	b4ea8 <_ZN27Adafruit_BusIO_RegisterBits5writeEm>
    modebit.write(1);
   b754e:	4621      	mov	r1, r4
   b7550:	e7ea      	b.n	b7528 <_ZN15Adafruit_AW95237pinModeEhh+0x58>

000b7552 <_ZN15Adafruit_AW952314openDrainPort0Eb>:
/*!
 *    @brief  Turns on/off open drain output for ALL port 0 pins (GPIO 0-7)
 *    @param  od True to enable open drain, False for push-pull
 *    @return True I2C write command was acknowledged
 */
bool Adafruit_AW9523::openDrainPort0(bool od) {
   b7552:	b530      	push	{r4, r5, lr}
  Adafruit_I2CRegister gcrreg =
      Adafruit_I2CRegister(i2c_dev, AW9523_REG_GCR, 1);
   b7554:	2300      	movs	r3, #0
bool Adafruit_AW9523::openDrainPort0(bool od) {
   b7556:	b08b      	sub	sp, #44	; 0x2c
      Adafruit_I2CRegister(i2c_dev, AW9523_REG_GCR, 1);
   b7558:	2501      	movs	r5, #1
   b755a:	e9cd 3500 	strd	r3, r5, [sp]
bool Adafruit_AW9523::openDrainPort0(bool od) {
   b755e:	460c      	mov	r4, r1
      Adafruit_I2CRegister(i2c_dev, AW9523_REG_GCR, 1);
   b7560:	462b      	mov	r3, r5
   b7562:	6801      	ldr	r1, [r0, #0]
   b7564:	2211      	movs	r2, #17
   b7566:	a804      	add	r0, sp, #16
   b7568:	f7fd fbb5 	bl	b4cd6 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>

  Adafruit_I2CRegisterBits opendrain =
      Adafruit_I2CRegisterBits(&gcrreg, 1, 4); // # bits, bit_shift
   b756c:	2304      	movs	r3, #4
   b756e:	462a      	mov	r2, r5
   b7570:	a904      	add	r1, sp, #16
   b7572:	a802      	add	r0, sp, #8
   b7574:	f7fd fc86 	bl	b4e84 <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>

  return opendrain.write(!od);
   b7578:	ea84 0105 	eor.w	r1, r4, r5
   b757c:	a802      	add	r0, sp, #8
   b757e:	f7fd fc93 	bl	b4ea8 <_ZN27Adafruit_BusIO_RegisterBits5writeEm>
}
   b7582:	b00b      	add	sp, #44	; 0x2c
   b7584:	bd30      	pop	{r4, r5, pc}

000b7586 <_ZN15Adafruit_AW95235beginEhP7TwoWire>:
bool Adafruit_AW9523::begin(uint8_t addr, TwoWire *wire) {
   b7586:	b5f0      	push	{r4, r5, r6, r7, lr}
   b7588:	4604      	mov	r4, r0
  if (i2c_dev) {
   b758a:	6800      	ldr	r0, [r0, #0]
bool Adafruit_AW9523::begin(uint8_t addr, TwoWire *wire) {
   b758c:	b089      	sub	sp, #36	; 0x24
   b758e:	460e      	mov	r6, r1
   b7590:	4617      	mov	r7, r2
  if (i2c_dev) {
   b7592:	b110      	cbz	r0, b759a <_ZN15Adafruit_AW95235beginEhP7TwoWire+0x14>
    delete i2c_dev; // remove old interface
   b7594:	2110      	movs	r1, #16
   b7596:	f7fc fd82 	bl	b409e <_ZdlPvj>
  i2c_dev = new Adafruit_I2CDevice(addr, wire);
   b759a:	2010      	movs	r0, #16
   b759c:	f7fc fd7b 	bl	b4096 <_Znwj>
   b75a0:	4605      	mov	r5, r0
   b75a2:	b118      	cbz	r0, b75ac <_ZN15Adafruit_AW95235beginEhP7TwoWire+0x26>
   b75a4:	463a      	mov	r2, r7
   b75a6:	4631      	mov	r1, r6
   b75a8:	f7fd fdba 	bl	b5120 <_ZN18Adafruit_I2CDeviceC1EhP7TwoWire>
   b75ac:	6025      	str	r5, [r4, #0]
  if (!i2c_dev->begin()) {
   b75ae:	2101      	movs	r1, #1
   b75b0:	4628      	mov	r0, r5
   b75b2:	f7fd fdd1 	bl	b5158 <_ZN18Adafruit_I2CDevice5beginEb>
   b75b6:	b918      	cbnz	r0, b75c0 <_ZN15Adafruit_AW95235beginEhP7TwoWire+0x3a>
    return false;
   b75b8:	2500      	movs	r5, #0
}
   b75ba:	4628      	mov	r0, r5
   b75bc:	b009      	add	sp, #36	; 0x24
   b75be:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (!reset()) {
   b75c0:	4620      	mov	r0, r4
   b75c2:	f7ff ff31 	bl	b7428 <_ZN15Adafruit_AW95235resetEv>
   b75c6:	4605      	mov	r5, r0
   b75c8:	2800      	cmp	r0, #0
   b75ca:	d0f5      	beq.n	b75b8 <_ZN15Adafruit_AW95235beginEhP7TwoWire+0x32>
  Adafruit_I2CRegister idreg = Adafruit_I2CRegister(i2c_dev, AW9523_REG_CHIPID);
   b75cc:	2301      	movs	r3, #1
   b75ce:	2600      	movs	r6, #0
   b75d0:	e9cd 6300 	strd	r6, r3, [sp]
   b75d4:	6821      	ldr	r1, [r4, #0]
   b75d6:	2210      	movs	r2, #16
   b75d8:	a802      	add	r0, sp, #8
   b75da:	f7fd fb7c 	bl	b4cd6 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>
  if (idreg.read() != 0x23) {
   b75de:	a802      	add	r0, sp, #8
   b75e0:	f7fd fc34 	bl	b4e4c <_ZN23Adafruit_BusIO_Register4readEv>
   b75e4:	2823      	cmp	r0, #35	; 0x23
   b75e6:	d1e7      	bne.n	b75b8 <_ZN15Adafruit_AW95235beginEhP7TwoWire+0x32>
  configureDirection(0x0); // all inputs!
   b75e8:	4631      	mov	r1, r6
   b75ea:	4620      	mov	r0, r4
   b75ec:	f7ff ff42 	bl	b7474 <_ZN15Adafruit_AW952318configureDirectionEt>
  openDrainPort0(false);   // push pull default
   b75f0:	4631      	mov	r1, r6
   b75f2:	4620      	mov	r0, r4
   b75f4:	f7ff ffad 	bl	b7552 <_ZN15Adafruit_AW952314openDrainPort0Eb>
  interruptEnableGPIO(0);  // no interrupt
   b75f8:	4631      	mov	r1, r6
   b75fa:	4620      	mov	r0, r4
   b75fc:	f7ff ff26 	bl	b744c <_ZN15Adafruit_AW952319interruptEnableGPIOEt>
  return true;
   b7600:	e7db      	b.n	b75ba <_ZN15Adafruit_AW95235beginEhP7TwoWire+0x34>
	...

000b7604 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b7604:	b508      	push	{r3, lr}
   b7606:	4b02      	ldr	r3, [pc, #8]	; (b7610 <netdb_freeaddrinfo+0xc>)
   b7608:	681b      	ldr	r3, [r3, #0]
   b760a:	689b      	ldr	r3, [r3, #8]
   b760c:	9301      	str	r3, [sp, #4]
   b760e:	bd08      	pop	{r3, pc}
   b7610:	00030268 	.word	0x00030268

000b7614 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b7614:	b508      	push	{r3, lr}
   b7616:	4b02      	ldr	r3, [pc, #8]	; (b7620 <netdb_getaddrinfo+0xc>)
   b7618:	681b      	ldr	r3, [r3, #0]
   b761a:	68db      	ldr	r3, [r3, #12]
   b761c:	9301      	str	r3, [sp, #4]
   b761e:	bd08      	pop	{r3, pc}
   b7620:	00030268 	.word	0x00030268

000b7624 <HAL_Pin_Mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   b7624:	b508      	push	{r3, lr}
   b7626:	4b02      	ldr	r3, [pc, #8]	; (b7630 <HAL_Pin_Mode+0xc>)
   b7628:	681b      	ldr	r3, [r3, #0]
   b762a:	689b      	ldr	r3, [r3, #8]
   b762c:	9301      	str	r3, [sp, #4]
   b762e:	bd08      	pop	{r3, pc}
   b7630:	0003022c 	.word	0x0003022c

000b7634 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   b7634:	b508      	push	{r3, lr}
   b7636:	4b02      	ldr	r3, [pc, #8]	; (b7640 <HAL_Get_Pin_Mode+0xc>)
   b7638:	681b      	ldr	r3, [r3, #0]
   b763a:	68db      	ldr	r3, [r3, #12]
   b763c:	9301      	str	r3, [sp, #4]
   b763e:	bd08      	pop	{r3, pc}
   b7640:	0003022c 	.word	0x0003022c

000b7644 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   b7644:	b508      	push	{r3, lr}
   b7646:	4b02      	ldr	r3, [pc, #8]	; (b7650 <HAL_GPIO_Write+0xc>)
   b7648:	681b      	ldr	r3, [r3, #0]
   b764a:	691b      	ldr	r3, [r3, #16]
   b764c:	9301      	str	r3, [sp, #4]
   b764e:	bd08      	pop	{r3, pc}
   b7650:	0003022c 	.word	0x0003022c

000b7654 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b7654:	b508      	push	{r3, lr}
   b7656:	4b02      	ldr	r3, [pc, #8]	; (b7660 <HAL_RNG_GetRandomNumber+0xc>)
   b7658:	681b      	ldr	r3, [r3, #0]
   b765a:	685b      	ldr	r3, [r3, #4]
   b765c:	9301      	str	r3, [sp, #4]
   b765e:	bd08      	pop	{r3, pc}
   b7660:	00030218 	.word	0x00030218

000b7664 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b7664:	b508      	push	{r3, lr}
   b7666:	4b02      	ldr	r3, [pc, #8]	; (b7670 <HAL_Delay_Microseconds+0xc>)
   b7668:	681b      	ldr	r3, [r3, #0]
   b766a:	68db      	ldr	r3, [r3, #12]
   b766c:	9301      	str	r3, [sp, #4]
   b766e:	bd08      	pop	{r3, pc}
   b7670:	00030218 	.word	0x00030218

000b7674 <HAL_Timer_Get_Micro_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
   b7674:	b508      	push	{r3, lr}
   b7676:	4b02      	ldr	r3, [pc, #8]	; (b7680 <HAL_Timer_Get_Micro_Seconds+0xc>)
   b7678:	681b      	ldr	r3, [r3, #0]
   b767a:	691b      	ldr	r3, [r3, #16]
   b767c:	9301      	str	r3, [sp, #4]
   b767e:	bd08      	pop	{r3, pc}
   b7680:	00030218 	.word	0x00030218

000b7684 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b7684:	b508      	push	{r3, lr}
   b7686:	4b02      	ldr	r3, [pc, #8]	; (b7690 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b7688:	681b      	ldr	r3, [r3, #0]
   b768a:	695b      	ldr	r3, [r3, #20]
   b768c:	9301      	str	r3, [sp, #4]
   b768e:	bd08      	pop	{r3, pc}
   b7690:	00030218 	.word	0x00030218

000b7694 <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
   b7694:	b508      	push	{r3, lr}
   b7696:	4b02      	ldr	r3, [pc, #8]	; (b76a0 <hal_rtc_time_is_valid+0xc>)
   b7698:	681b      	ldr	r3, [r3, #0]
   b769a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b769c:	9301      	str	r3, [sp, #4]
   b769e:	bd08      	pop	{r3, pc}
   b76a0:	00030218 	.word	0x00030218

000b76a4 <hal_rtc_get_time>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
   b76a4:	b508      	push	{r3, lr}
   b76a6:	4b02      	ldr	r3, [pc, #8]	; (b76b0 <hal_rtc_get_time+0xc>)
   b76a8:	681b      	ldr	r3, [r3, #0]
   b76aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   b76ac:	9301      	str	r3, [sp, #4]
   b76ae:	bd08      	pop	{r3, pc}
   b76b0:	00030218 	.word	0x00030218

000b76b4 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b76b4:	b508      	push	{r3, lr}
   b76b6:	4b02      	ldr	r3, [pc, #8]	; (b76c0 <os_mutex_recursive_create+0xc>)
   b76b8:	681b      	ldr	r3, [r3, #0]
   b76ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b76bc:	9301      	str	r3, [sp, #4]
   b76be:	bd08      	pop	{r3, pc}
   b76c0:	00030248 	.word	0x00030248

000b76c4 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b76c4:	b508      	push	{r3, lr}
   b76c6:	4b02      	ldr	r3, [pc, #8]	; (b76d0 <inet_inet_ntop+0xc>)
   b76c8:	681b      	ldr	r3, [r3, #0]
   b76ca:	695b      	ldr	r3, [r3, #20]
   b76cc:	9301      	str	r3, [sp, #4]
   b76ce:	bd08      	pop	{r3, pc}
   b76d0:	00030264 	.word	0x00030264

000b76d4 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b76d4:	b508      	push	{r3, lr}
   b76d6:	4b02      	ldr	r3, [pc, #8]	; (b76e0 <hal_usart_write+0xc>)
   b76d8:	681b      	ldr	r3, [r3, #0]
   b76da:	68db      	ldr	r3, [r3, #12]
   b76dc:	9301      	str	r3, [sp, #4]
   b76de:	bd08      	pop	{r3, pc}
   b76e0:	0003023c 	.word	0x0003023c

000b76e4 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b76e4:	b508      	push	{r3, lr}
   b76e6:	4b02      	ldr	r3, [pc, #8]	; (b76f0 <hal_usart_available+0xc>)
   b76e8:	681b      	ldr	r3, [r3, #0]
   b76ea:	691b      	ldr	r3, [r3, #16]
   b76ec:	9301      	str	r3, [sp, #4]
   b76ee:	bd08      	pop	{r3, pc}
   b76f0:	0003023c 	.word	0x0003023c

000b76f4 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b76f4:	b508      	push	{r3, lr}
   b76f6:	4b02      	ldr	r3, [pc, #8]	; (b7700 <hal_usart_read+0xc>)
   b76f8:	681b      	ldr	r3, [r3, #0]
   b76fa:	695b      	ldr	r3, [r3, #20]
   b76fc:	9301      	str	r3, [sp, #4]
   b76fe:	bd08      	pop	{r3, pc}
   b7700:	0003023c 	.word	0x0003023c

000b7704 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b7704:	b508      	push	{r3, lr}
   b7706:	4b02      	ldr	r3, [pc, #8]	; (b7710 <hal_usart_peek+0xc>)
   b7708:	681b      	ldr	r3, [r3, #0]
   b770a:	699b      	ldr	r3, [r3, #24]
   b770c:	9301      	str	r3, [sp, #4]
   b770e:	bd08      	pop	{r3, pc}
   b7710:	0003023c 	.word	0x0003023c

000b7714 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b7714:	b508      	push	{r3, lr}
   b7716:	4b02      	ldr	r3, [pc, #8]	; (b7720 <hal_usart_flush+0xc>)
   b7718:	681b      	ldr	r3, [r3, #0]
   b771a:	69db      	ldr	r3, [r3, #28]
   b771c:	9301      	str	r3, [sp, #4]
   b771e:	bd08      	pop	{r3, pc}
   b7720:	0003023c 	.word	0x0003023c

000b7724 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b7724:	b508      	push	{r3, lr}
   b7726:	4b02      	ldr	r3, [pc, #8]	; (b7730 <hal_usart_is_enabled+0xc>)
   b7728:	681b      	ldr	r3, [r3, #0]
   b772a:	6a1b      	ldr	r3, [r3, #32]
   b772c:	9301      	str	r3, [sp, #4]
   b772e:	bd08      	pop	{r3, pc}
   b7730:	0003023c 	.word	0x0003023c

000b7734 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b7734:	b508      	push	{r3, lr}
   b7736:	4b02      	ldr	r3, [pc, #8]	; (b7740 <hal_usart_available_data_for_write+0xc>)
   b7738:	681b      	ldr	r3, [r3, #0]
   b773a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b773c:	9301      	str	r3, [sp, #4]
   b773e:	bd08      	pop	{r3, pc}
   b7740:	0003023c 	.word	0x0003023c

000b7744 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b7744:	b508      	push	{r3, lr}
   b7746:	4b02      	ldr	r3, [pc, #8]	; (b7750 <hal_usart_init_ex+0xc>)
   b7748:	681b      	ldr	r3, [r3, #0]
   b774a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b774c:	9301      	str	r3, [sp, #4]
   b774e:	bd08      	pop	{r3, pc}
   b7750:	0003023c 	.word	0x0003023c

000b7754 <hal_i2c_begin>:
DYNALIB_BEGIN(hal_i2c)

DYNALIB_FN(0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   b7754:	b508      	push	{r3, lr}
   b7756:	4b02      	ldr	r3, [pc, #8]	; (b7760 <hal_i2c_begin+0xc>)
   b7758:	681b      	ldr	r3, [r3, #0]
   b775a:	68db      	ldr	r3, [r3, #12]
   b775c:	9301      	str	r3, [sp, #4]
   b775e:	bd08      	pop	{r3, pc}
   b7760:	00030228 	.word	0x00030228

000b7764 <hal_i2c_begin_transmission>:
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   b7764:	b508      	push	{r3, lr}
   b7766:	4b02      	ldr	r3, [pc, #8]	; (b7770 <hal_i2c_begin_transmission+0xc>)
   b7768:	681b      	ldr	r3, [r3, #0]
   b776a:	699b      	ldr	r3, [r3, #24]
   b776c:	9301      	str	r3, [sp, #4]
   b776e:	bd08      	pop	{r3, pc}
   b7770:	00030228 	.word	0x00030228

000b7774 <hal_i2c_end_transmission>:
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   b7774:	b508      	push	{r3, lr}
   b7776:	4b02      	ldr	r3, [pc, #8]	; (b7780 <hal_i2c_end_transmission+0xc>)
   b7778:	681b      	ldr	r3, [r3, #0]
   b777a:	69db      	ldr	r3, [r3, #28]
   b777c:	9301      	str	r3, [sp, #4]
   b777e:	bd08      	pop	{r3, pc}
   b7780:	00030228 	.word	0x00030228

000b7784 <hal_i2c_write>:
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b7784:	b508      	push	{r3, lr}
   b7786:	4b02      	ldr	r3, [pc, #8]	; (b7790 <hal_i2c_write+0xc>)
   b7788:	681b      	ldr	r3, [r3, #0]
   b778a:	6a1b      	ldr	r3, [r3, #32]
   b778c:	9301      	str	r3, [sp, #4]
   b778e:	bd08      	pop	{r3, pc}
   b7790:	00030228 	.word	0x00030228

000b7794 <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b7794:	b508      	push	{r3, lr}
   b7796:	4b02      	ldr	r3, [pc, #8]	; (b77a0 <hal_i2c_available+0xc>)
   b7798:	681b      	ldr	r3, [r3, #0]
   b779a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b779c:	9301      	str	r3, [sp, #4]
   b779e:	bd08      	pop	{r3, pc}
   b77a0:	00030228 	.word	0x00030228

000b77a4 <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b77a4:	b508      	push	{r3, lr}
   b77a6:	4b02      	ldr	r3, [pc, #8]	; (b77b0 <hal_i2c_read+0xc>)
   b77a8:	681b      	ldr	r3, [r3, #0]
   b77aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b77ac:	9301      	str	r3, [sp, #4]
   b77ae:	bd08      	pop	{r3, pc}
   b77b0:	00030228 	.word	0x00030228

000b77b4 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b77b4:	b508      	push	{r3, lr}
   b77b6:	4b02      	ldr	r3, [pc, #8]	; (b77c0 <hal_i2c_peek+0xc>)
   b77b8:	681b      	ldr	r3, [r3, #0]
   b77ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b77bc:	9301      	str	r3, [sp, #4]
   b77be:	bd08      	pop	{r3, pc}
   b77c0:	00030228 	.word	0x00030228

000b77c4 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b77c4:	b508      	push	{r3, lr}
   b77c6:	4b02      	ldr	r3, [pc, #8]	; (b77d0 <hal_i2c_flush+0xc>)
   b77c8:	681b      	ldr	r3, [r3, #0]
   b77ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b77cc:	9301      	str	r3, [sp, #4]
   b77ce:	bd08      	pop	{r3, pc}
   b77d0:	00030228 	.word	0x00030228

000b77d4 <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b77d4:	b508      	push	{r3, lr}
   b77d6:	4b02      	ldr	r3, [pc, #8]	; (b77e0 <hal_i2c_is_enabled+0xc>)
   b77d8:	681b      	ldr	r3, [r3, #0]
   b77da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b77dc:	9301      	str	r3, [sp, #4]
   b77de:	bd08      	pop	{r3, pc}
   b77e0:	00030228 	.word	0x00030228

000b77e4 <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b77e4:	b508      	push	{r3, lr}
   b77e6:	4b02      	ldr	r3, [pc, #8]	; (b77f0 <hal_i2c_init+0xc>)
   b77e8:	681b      	ldr	r3, [r3, #0]
   b77ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b77ec:	9301      	str	r3, [sp, #4]
   b77ee:	bd08      	pop	{r3, pc}
   b77f0:	00030228 	.word	0x00030228

000b77f4 <hal_i2c_request_ex>:
DYNALIB_FN(17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   b77f4:	b508      	push	{r3, lr}
   b77f6:	4b02      	ldr	r3, [pc, #8]	; (b7800 <hal_i2c_request_ex+0xc>)
   b77f8:	681b      	ldr	r3, [r3, #0]
   b77fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b77fc:	9301      	str	r3, [sp, #4]
   b77fe:	bd08      	pop	{r3, pc}
   b7800:	00030228 	.word	0x00030228

000b7804 <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   b7804:	b508      	push	{r3, lr}
   b7806:	4b02      	ldr	r3, [pc, #8]	; (b7810 <hal_spi_begin+0xc>)
   b7808:	681b      	ldr	r3, [r3, #0]
   b780a:	681b      	ldr	r3, [r3, #0]
   b780c:	9301      	str	r3, [sp, #4]
   b780e:	bd08      	pop	{r3, pc}
   b7810:	00030230 	.word	0x00030230

000b7814 <hal_spi_transfer>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   b7814:	b508      	push	{r3, lr}
   b7816:	4b02      	ldr	r3, [pc, #8]	; (b7820 <hal_spi_transfer+0xc>)
   b7818:	681b      	ldr	r3, [r3, #0]
   b781a:	695b      	ldr	r3, [r3, #20]
   b781c:	9301      	str	r3, [sp, #4]
   b781e:	bd08      	pop	{r3, pc}
   b7820:	00030230 	.word	0x00030230

000b7824 <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b7824:	b508      	push	{r3, lr}
   b7826:	4b02      	ldr	r3, [pc, #8]	; (b7830 <hal_spi_init+0xc>)
   b7828:	681b      	ldr	r3, [r3, #0]
   b782a:	69db      	ldr	r3, [r3, #28]
   b782c:	9301      	str	r3, [sp, #4]
   b782e:	bd08      	pop	{r3, pc}
   b7830:	00030230 	.word	0x00030230

000b7834 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b7834:	b508      	push	{r3, lr}
   b7836:	4b02      	ldr	r3, [pc, #8]	; (b7840 <hal_spi_is_enabled+0xc>)
   b7838:	681b      	ldr	r3, [r3, #0]
   b783a:	6a1b      	ldr	r3, [r3, #32]
   b783c:	9301      	str	r3, [sp, #4]
   b783e:	bd08      	pop	{r3, pc}
   b7840:	00030230 	.word	0x00030230

000b7844 <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   b7844:	b508      	push	{r3, lr}
   b7846:	4b02      	ldr	r3, [pc, #8]	; (b7850 <hal_spi_info+0xc>)
   b7848:	681b      	ldr	r3, [r3, #0]
   b784a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b784c:	9301      	str	r3, [sp, #4]
   b784e:	bd08      	pop	{r3, pc}
   b7850:	00030230 	.word	0x00030230

000b7854 <hal_spi_transfer_dma>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, const void*, void*, uint32_t, hal_spi_dma_user_callback))
   b7854:	b508      	push	{r3, lr}
   b7856:	4b02      	ldr	r3, [pc, #8]	; (b7860 <hal_spi_transfer_dma+0xc>)
   b7858:	681b      	ldr	r3, [r3, #0]
   b785a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b785c:	9301      	str	r3, [sp, #4]
   b785e:	bd08      	pop	{r3, pc}
   b7860:	00030230 	.word	0x00030230

000b7864 <hal_spi_transfer_dma_status>:
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, void*))
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
   b7864:	b508      	push	{r3, lr}
   b7866:	4b02      	ldr	r3, [pc, #8]	; (b7870 <hal_spi_transfer_dma_status+0xc>)
   b7868:	681b      	ldr	r3, [r3, #0]
   b786a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b786c:	9301      	str	r3, [sp, #4]
   b786e:	bd08      	pop	{r3, pc}
   b7870:	00030230 	.word	0x00030230

000b7874 <hal_spi_set_settings>:
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   b7874:	b508      	push	{r3, lr}
   b7876:	4b02      	ldr	r3, [pc, #8]	; (b7880 <hal_spi_set_settings+0xc>)
   b7878:	681b      	ldr	r3, [r3, #0]
   b787a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b787c:	9301      	str	r3, [sp, #4]
   b787e:	bd08      	pop	{r3, pc}
   b7880:	00030230 	.word	0x00030230

000b7884 <hal_spi_acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   b7884:	b508      	push	{r3, lr}
   b7886:	4b02      	ldr	r3, [pc, #8]	; (b7890 <hal_spi_acquire+0xc>)
   b7888:	681b      	ldr	r3, [r3, #0]
   b788a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b788c:	9301      	str	r3, [sp, #4]
   b788e:	bd08      	pop	{r3, pc}
   b7890:	00030230 	.word	0x00030230

000b7894 <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   b7894:	b508      	push	{r3, lr}
   b7896:	4b02      	ldr	r3, [pc, #8]	; (b78a0 <hal_spi_release+0xc>)
   b7898:	681b      	ldr	r3, [r3, #0]
   b789a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b789c:	9301      	str	r3, [sp, #4]
   b789e:	bd08      	pop	{r3, pc}
   b78a0:	00030230 	.word	0x00030230

000b78a4 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b78a4:	b508      	push	{r3, lr}
   b78a6:	4b02      	ldr	r3, [pc, #8]	; (b78b0 <HAL_USB_USART_Init+0xc>)
   b78a8:	681b      	ldr	r3, [r3, #0]
   b78aa:	681b      	ldr	r3, [r3, #0]
   b78ac:	9301      	str	r3, [sp, #4]
   b78ae:	bd08      	pop	{r3, pc}
   b78b0:	0003024c 	.word	0x0003024c

000b78b4 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b78b4:	b508      	push	{r3, lr}
   b78b6:	4b02      	ldr	r3, [pc, #8]	; (b78c0 <HAL_USB_USART_Begin+0xc>)
   b78b8:	681b      	ldr	r3, [r3, #0]
   b78ba:	685b      	ldr	r3, [r3, #4]
   b78bc:	9301      	str	r3, [sp, #4]
   b78be:	bd08      	pop	{r3, pc}
   b78c0:	0003024c 	.word	0x0003024c

000b78c4 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b78c4:	b508      	push	{r3, lr}
   b78c6:	4b02      	ldr	r3, [pc, #8]	; (b78d0 <HAL_USB_USART_Available_Data+0xc>)
   b78c8:	681b      	ldr	r3, [r3, #0]
   b78ca:	691b      	ldr	r3, [r3, #16]
   b78cc:	9301      	str	r3, [sp, #4]
   b78ce:	bd08      	pop	{r3, pc}
   b78d0:	0003024c 	.word	0x0003024c

000b78d4 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b78d4:	b508      	push	{r3, lr}
   b78d6:	4b02      	ldr	r3, [pc, #8]	; (b78e0 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b78d8:	681b      	ldr	r3, [r3, #0]
   b78da:	695b      	ldr	r3, [r3, #20]
   b78dc:	9301      	str	r3, [sp, #4]
   b78de:	bd08      	pop	{r3, pc}
   b78e0:	0003024c 	.word	0x0003024c

000b78e4 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b78e4:	b508      	push	{r3, lr}
   b78e6:	4b02      	ldr	r3, [pc, #8]	; (b78f0 <HAL_USB_USART_Receive_Data+0xc>)
   b78e8:	681b      	ldr	r3, [r3, #0]
   b78ea:	699b      	ldr	r3, [r3, #24]
   b78ec:	9301      	str	r3, [sp, #4]
   b78ee:	bd08      	pop	{r3, pc}
   b78f0:	0003024c 	.word	0x0003024c

000b78f4 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b78f4:	b508      	push	{r3, lr}
   b78f6:	4b02      	ldr	r3, [pc, #8]	; (b7900 <HAL_USB_USART_Send_Data+0xc>)
   b78f8:	681b      	ldr	r3, [r3, #0]
   b78fa:	69db      	ldr	r3, [r3, #28]
   b78fc:	9301      	str	r3, [sp, #4]
   b78fe:	bd08      	pop	{r3, pc}
   b7900:	0003024c 	.word	0x0003024c

000b7904 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b7904:	b508      	push	{r3, lr}
   b7906:	4b02      	ldr	r3, [pc, #8]	; (b7910 <HAL_USB_USART_Flush_Data+0xc>)
   b7908:	681b      	ldr	r3, [r3, #0]
   b790a:	6a1b      	ldr	r3, [r3, #32]
   b790c:	9301      	str	r3, [sp, #4]
   b790e:	bd08      	pop	{r3, pc}
   b7910:	0003024c 	.word	0x0003024c

000b7914 <HAL_USB_USART_Is_Enabled>:
DYNALIB_FN(9, hal_usb, HAL_USB_USART_Is_Enabled, bool(HAL_USB_USART_Serial))
   b7914:	b508      	push	{r3, lr}
   b7916:	4b02      	ldr	r3, [pc, #8]	; (b7920 <HAL_USB_USART_Is_Enabled+0xc>)
   b7918:	681b      	ldr	r3, [r3, #0]
   b791a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b791c:	9301      	str	r3, [sp, #4]
   b791e:	bd08      	pop	{r3, pc}
   b7920:	0003024c 	.word	0x0003024c

000b7924 <system_mode>:
#include "system_ble_prov.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   b7924:	b508      	push	{r3, lr}
   b7926:	4b02      	ldr	r3, [pc, #8]	; (b7930 <system_mode+0xc>)
   b7928:	681b      	ldr	r3, [r3, #0]
   b792a:	681b      	ldr	r3, [r3, #0]
   b792c:	9301      	str	r3, [sp, #4]
   b792e:	bd08      	pop	{r3, pc}
   b7930:	00030220 	.word	0x00030220

000b7934 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b7934:	b508      	push	{r3, lr}
   b7936:	4b02      	ldr	r3, [pc, #8]	; (b7940 <set_system_mode+0xc>)
   b7938:	681b      	ldr	r3, [r3, #0]
   b793a:	685b      	ldr	r3, [r3, #4]
   b793c:	9301      	str	r3, [sp, #4]
   b793e:	bd08      	pop	{r3, pc}
   b7940:	00030220 	.word	0x00030220

000b7944 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b7944:	b508      	push	{r3, lr}
   b7946:	4b02      	ldr	r3, [pc, #8]	; (b7950 <system_delay_ms+0xc>)
   b7948:	681b      	ldr	r3, [r3, #0]
   b794a:	695b      	ldr	r3, [r3, #20]
   b794c:	9301      	str	r3, [sp, #4]
   b794e:	bd08      	pop	{r3, pc}
   b7950:	00030220 	.word	0x00030220

000b7954 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, const SystemEventContext*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   b7954:	b508      	push	{r3, lr}
   b7956:	4b02      	ldr	r3, [pc, #8]	; (b7960 <system_thread_set_state+0xc>)
   b7958:	681b      	ldr	r3, [r3, #0]
   b795a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b795c:	9301      	str	r3, [sp, #4]
   b795e:	bd08      	pop	{r3, pc}
   b7960:	00030220 	.word	0x00030220

000b7964 <system_thread_get_state>:
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   b7964:	b508      	push	{r3, lr}
   b7966:	4b02      	ldr	r3, [pc, #8]	; (b7970 <system_thread_get_state+0xc>)
   b7968:	681b      	ldr	r3, [r3, #0]
   b796a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b796c:	9301      	str	r3, [sp, #4]
   b796e:	bd08      	pop	{r3, pc}
   b7970:	00030220 	.word	0x00030220

000b7974 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b7974:	b508      	push	{r3, lr}
   b7976:	4b03      	ldr	r3, [pc, #12]	; (b7984 <system_ctrl_set_app_request_handler+0x10>)
   b7978:	681b      	ldr	r3, [r3, #0]
   b797a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b797e:	9301      	str	r3, [sp, #4]
   b7980:	bd08      	pop	{r3, pc}
   b7982:	0000      	.short	0x0000
   b7984:	00030220 	.word	0x00030220

000b7988 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b7988:	b508      	push	{r3, lr}
   b798a:	4b03      	ldr	r3, [pc, #12]	; (b7998 <system_ctrl_set_result+0x10>)
   b798c:	681b      	ldr	r3, [r3, #0]
   b798e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b7992:	9301      	str	r3, [sp, #4]
   b7994:	bd08      	pop	{r3, pc}
   b7996:	0000      	.short	0x0000
   b7998:	00030220 	.word	0x00030220

000b799c <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b799c:	b508      	push	{r3, lr}
   b799e:	4b02      	ldr	r3, [pc, #8]	; (b79a8 <network_connect+0xc>)
   b79a0:	681b      	ldr	r3, [r3, #0]
   b79a2:	685b      	ldr	r3, [r3, #4]
   b79a4:	9301      	str	r3, [sp, #4]
   b79a6:	bd08      	pop	{r3, pc}
   b79a8:	00030240 	.word	0x00030240

000b79ac <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b79ac:	b508      	push	{r3, lr}
   b79ae:	4b02      	ldr	r3, [pc, #8]	; (b79b8 <network_connecting+0xc>)
   b79b0:	681b      	ldr	r3, [r3, #0]
   b79b2:	689b      	ldr	r3, [r3, #8]
   b79b4:	9301      	str	r3, [sp, #4]
   b79b6:	bd08      	pop	{r3, pc}
   b79b8:	00030240 	.word	0x00030240

000b79bc <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b79bc:	b508      	push	{r3, lr}
   b79be:	4b02      	ldr	r3, [pc, #8]	; (b79c8 <network_disconnect+0xc>)
   b79c0:	681b      	ldr	r3, [r3, #0]
   b79c2:	68db      	ldr	r3, [r3, #12]
   b79c4:	9301      	str	r3, [sp, #4]
   b79c6:	bd08      	pop	{r3, pc}
   b79c8:	00030240 	.word	0x00030240

000b79cc <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b79cc:	b508      	push	{r3, lr}
   b79ce:	4b02      	ldr	r3, [pc, #8]	; (b79d8 <network_ready+0xc>)
   b79d0:	681b      	ldr	r3, [r3, #0]
   b79d2:	691b      	ldr	r3, [r3, #16]
   b79d4:	9301      	str	r3, [sp, #4]
   b79d6:	bd08      	pop	{r3, pc}
   b79d8:	00030240 	.word	0x00030240

000b79dc <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b79dc:	b508      	push	{r3, lr}
   b79de:	4b02      	ldr	r3, [pc, #8]	; (b79e8 <network_on+0xc>)
   b79e0:	681b      	ldr	r3, [r3, #0]
   b79e2:	695b      	ldr	r3, [r3, #20]
   b79e4:	9301      	str	r3, [sp, #4]
   b79e6:	bd08      	pop	{r3, pc}
   b79e8:	00030240 	.word	0x00030240

000b79ec <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b79ec:	b508      	push	{r3, lr}
   b79ee:	4b02      	ldr	r3, [pc, #8]	; (b79f8 <network_off+0xc>)
   b79f0:	681b      	ldr	r3, [r3, #0]
   b79f2:	699b      	ldr	r3, [r3, #24]
   b79f4:	9301      	str	r3, [sp, #4]
   b79f6:	bd08      	pop	{r3, pc}
   b79f8:	00030240 	.word	0x00030240

000b79fc <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b79fc:	b508      	push	{r3, lr}
   b79fe:	4b02      	ldr	r3, [pc, #8]	; (b7a08 <network_listen+0xc>)
   b7a00:	681b      	ldr	r3, [r3, #0]
   b7a02:	69db      	ldr	r3, [r3, #28]
   b7a04:	9301      	str	r3, [sp, #4]
   b7a06:	bd08      	pop	{r3, pc}
   b7a08:	00030240 	.word	0x00030240

000b7a0c <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b7a0c:	b508      	push	{r3, lr}
   b7a0e:	4b02      	ldr	r3, [pc, #8]	; (b7a18 <network_listening+0xc>)
   b7a10:	681b      	ldr	r3, [r3, #0]
   b7a12:	6a1b      	ldr	r3, [r3, #32]
   b7a14:	9301      	str	r3, [sp, #4]
   b7a16:	bd08      	pop	{r3, pc}
   b7a18:	00030240 	.word	0x00030240

000b7a1c <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b7a1c:	b508      	push	{r3, lr}
   b7a1e:	4b02      	ldr	r3, [pc, #8]	; (b7a28 <network_set_listen_timeout+0xc>)
   b7a20:	681b      	ldr	r3, [r3, #0]
   b7a22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b7a24:	9301      	str	r3, [sp, #4]
   b7a26:	bd08      	pop	{r3, pc}
   b7a28:	00030240 	.word	0x00030240

000b7a2c <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b7a2c:	b508      	push	{r3, lr}
   b7a2e:	4b02      	ldr	r3, [pc, #8]	; (b7a38 <network_get_listen_timeout+0xc>)
   b7a30:	681b      	ldr	r3, [r3, #0]
   b7a32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b7a34:	9301      	str	r3, [sp, #4]
   b7a36:	bd08      	pop	{r3, pc}
   b7a38:	00030240 	.word	0x00030240

000b7a3c <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b7a3c:	b508      	push	{r3, lr}
   b7a3e:	4b02      	ldr	r3, [pc, #8]	; (b7a48 <network_is_on+0xc>)
   b7a40:	681b      	ldr	r3, [r3, #0]
   b7a42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b7a44:	9301      	str	r3, [sp, #4]
   b7a46:	bd08      	pop	{r3, pc}
   b7a48:	00030240 	.word	0x00030240

000b7a4c <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b7a4c:	b508      	push	{r3, lr}
   b7a4e:	4b02      	ldr	r3, [pc, #8]	; (b7a58 <network_is_off+0xc>)
   b7a50:	681b      	ldr	r3, [r3, #0]
   b7a52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b7a54:	9301      	str	r3, [sp, #4]
   b7a56:	bd08      	pop	{r3, pc}
   b7a58:	00030240 	.word	0x00030240

000b7a5c <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, bool(void))
   b7a5c:	b508      	push	{r3, lr}
   b7a5e:	4b02      	ldr	r3, [pc, #8]	; (b7a68 <spark_process+0xc>)
   b7a60:	681b      	ldr	r3, [r3, #0]
   b7a62:	689b      	ldr	r3, [r3, #8]
   b7a64:	9301      	str	r3, [sp, #4]
   b7a66:	bd08      	pop	{r3, pc}
   b7a68:	00030244 	.word	0x00030244

000b7a6c <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   b7a6c:	b508      	push	{r3, lr}
   b7a6e:	4b02      	ldr	r3, [pc, #8]	; (b7a78 <spark_cloud_flag_connected+0xc>)
   b7a70:	681b      	ldr	r3, [r3, #0]
   b7a72:	695b      	ldr	r3, [r3, #20]
   b7a74:	9301      	str	r3, [sp, #4]
   b7a76:	bd08      	pop	{r3, pc}
   b7a78:	00030244 	.word	0x00030244

000b7a7c <spark_sync_time_pending>:
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   b7a7c:	b508      	push	{r3, lr}
   b7a7e:	4b02      	ldr	r3, [pc, #8]	; (b7a88 <spark_sync_time_pending+0xc>)
   b7a80:	681b      	ldr	r3, [r3, #0]
   b7a82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b7a84:	9301      	str	r3, [sp, #4]
   b7a86:	bd08      	pop	{r3, pc}
   b7a88:	00030244 	.word	0x00030244

000b7a8c <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b7a8c:	b508      	push	{r3, lr}
   b7a8e:	4b02      	ldr	r3, [pc, #8]	; (b7a98 <spark_set_random_seed_from_cloud_handler+0xc>)
   b7a90:	681b      	ldr	r3, [r3, #0]
   b7a92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b7a94:	9301      	str	r3, [sp, #4]
   b7a96:	bd08      	pop	{r3, pc}
   b7a98:	00030244 	.word	0x00030244

000b7a9c <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b7a9c:	b508      	push	{r3, lr}
   b7a9e:	4b02      	ldr	r3, [pc, #8]	; (b7aa8 <malloc+0xc>)
   b7aa0:	681b      	ldr	r3, [r3, #0]
   b7aa2:	681b      	ldr	r3, [r3, #0]
   b7aa4:	9301      	str	r3, [sp, #4]
   b7aa6:	bd08      	pop	{r3, pc}
   b7aa8:	0003021c 	.word	0x0003021c

000b7aac <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b7aac:	b508      	push	{r3, lr}
   b7aae:	4b02      	ldr	r3, [pc, #8]	; (b7ab8 <free+0xc>)
   b7ab0:	681b      	ldr	r3, [r3, #0]
   b7ab2:	685b      	ldr	r3, [r3, #4]
   b7ab4:	9301      	str	r3, [sp, #4]
   b7ab6:	bd08      	pop	{r3, pc}
   b7ab8:	0003021c 	.word	0x0003021c

000b7abc <snprintf>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   b7abc:	b508      	push	{r3, lr}
   b7abe:	4b02      	ldr	r3, [pc, #8]	; (b7ac8 <snprintf+0xc>)
   b7ac0:	681b      	ldr	r3, [r3, #0]
   b7ac2:	69db      	ldr	r3, [r3, #28]
   b7ac4:	9301      	str	r3, [sp, #4]
   b7ac6:	bd08      	pop	{r3, pc}
   b7ac8:	0003021c 	.word	0x0003021c

000b7acc <vsnprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b7acc:	b508      	push	{r3, lr}
   b7ace:	4b02      	ldr	r3, [pc, #8]	; (b7ad8 <vsnprintf+0xc>)
   b7ad0:	681b      	ldr	r3, [r3, #0]
   b7ad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b7ad4:	9301      	str	r3, [sp, #4]
   b7ad6:	bd08      	pop	{r3, pc}
   b7ad8:	0003021c 	.word	0x0003021c

000b7adc <__errno>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   b7adc:	b508      	push	{r3, lr}
   b7ade:	4b02      	ldr	r3, [pc, #8]	; (b7ae8 <__errno+0xc>)
   b7ae0:	681b      	ldr	r3, [r3, #0]
   b7ae2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b7ae4:	9301      	str	r3, [sp, #4]
   b7ae6:	bd08      	pop	{r3, pc}
   b7ae8:	0003021c 	.word	0x0003021c

000b7aec <__assert_func>:

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b7aec:	b508      	push	{r3, lr}
   b7aee:	4b02      	ldr	r3, [pc, #8]	; (b7af8 <__assert_func+0xc>)
   b7af0:	681b      	ldr	r3, [r3, #0]
   b7af2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b7af4:	9301      	str	r3, [sp, #4]
   b7af6:	bd08      	pop	{r3, pc}
   b7af8:	0003021c 	.word	0x0003021c

000b7afc <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b7afc:	b508      	push	{r3, lr}
   b7afe:	4b02      	ldr	r3, [pc, #8]	; (b7b08 <newlib_impure_ptr_callback+0xc>)
   b7b00:	681b      	ldr	r3, [r3, #0]
   b7b02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b7b04:	9301      	str	r3, [sp, #4]
   b7b06:	bd08      	pop	{r3, pc}
   b7b08:	0003021c 	.word	0x0003021c

000b7b0c <localtime_r>:

#if HAL_PLATFORM_EXPORT_STDLIB_RT_DYNALIB
DYNALIB_FN(18, rt, strftime, size_t(char* __restrict, size_t, const char* __restrict, const struct tm* __restrict))
DYNALIB_FN(19, rt, localtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   b7b0c:	b508      	push	{r3, lr}
   b7b0e:	4b02      	ldr	r3, [pc, #8]	; (b7b18 <localtime_r+0xc>)
   b7b10:	681b      	ldr	r3, [r3, #0]
   b7b12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b7b14:	9301      	str	r3, [sp, #4]
   b7b16:	bd08      	pop	{r3, pc}
   b7b18:	0003021c 	.word	0x0003021c

000b7b1c <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b7b1c:	2200      	movs	r2, #0
   b7b1e:	6840      	ldr	r0, [r0, #4]
   b7b20:	4611      	mov	r1, r2
   b7b22:	f7ff bf73 	b.w	b7a0c <network_listening>

000b7b26 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b7b26:	2200      	movs	r2, #0
   b7b28:	6840      	ldr	r0, [r0, #4]
   b7b2a:	4611      	mov	r1, r2
   b7b2c:	f7ff bf7e 	b.w	b7a2c <network_get_listen_timeout>

000b7b30 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b7b30:	6840      	ldr	r0, [r0, #4]
   b7b32:	2200      	movs	r2, #0
   b7b34:	f7ff bf72 	b.w	b7a1c <network_set_listen_timeout>

000b7b38 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b7b38:	6840      	ldr	r0, [r0, #4]
   b7b3a:	2200      	movs	r2, #0
   b7b3c:	f081 0101 	eor.w	r1, r1, #1
   b7b40:	f7ff bf5c 	b.w	b79fc <network_listen>

000b7b44 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b7b44:	2300      	movs	r3, #0
   b7b46:	6840      	ldr	r0, [r0, #4]
   b7b48:	461a      	mov	r2, r3
   b7b4a:	4619      	mov	r1, r3
   b7b4c:	f7ff bf4e 	b.w	b79ec <network_off>

000b7b50 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b7b50:	2300      	movs	r3, #0
   b7b52:	6840      	ldr	r0, [r0, #4]
   b7b54:	461a      	mov	r2, r3
   b7b56:	4619      	mov	r1, r3
   b7b58:	f7ff bf40 	b.w	b79dc <network_on>

000b7b5c <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b7b5c:	2200      	movs	r2, #0
   b7b5e:	6840      	ldr	r0, [r0, #4]
   b7b60:	4611      	mov	r1, r2
   b7b62:	f7ff bf33 	b.w	b79cc <network_ready>

000b7b66 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b7b66:	2200      	movs	r2, #0
   b7b68:	6840      	ldr	r0, [r0, #4]
   b7b6a:	4611      	mov	r1, r2
   b7b6c:	f7ff bf1e 	b.w	b79ac <network_connecting>

000b7b70 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b7b70:	6840      	ldr	r0, [r0, #4]
   b7b72:	2200      	movs	r2, #0
   b7b74:	2102      	movs	r1, #2
   b7b76:	f7ff bf21 	b.w	b79bc <network_disconnect>

000b7b7a <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b7b7a:	2300      	movs	r3, #0
   b7b7c:	6840      	ldr	r0, [r0, #4]
   b7b7e:	461a      	mov	r2, r3
   b7b80:	f7ff bf0c 	b.w	b799c <network_connect>

000b7b84 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b7b84:	4b02      	ldr	r3, [pc, #8]	; (b7b90 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b7b86:	2203      	movs	r2, #3
   b7b88:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b7b8a:	4a02      	ldr	r2, [pc, #8]	; (b7b94 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b7b8c:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b7b8e:	4770      	bx	lr
   b7b90:	2003e688 	.word	0x2003e688
   b7b94:	000b9d0c 	.word	0x000b9d0c

000b7b98 <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   b7b98:	2100      	movs	r1, #0
   b7b9a:	f7ff be7b 	b.w	b7894 <hal_spi_release>

000b7b9e <_ZN8SPIClass4lockEv.isra.0>:
    return hal_spi_acquire(_spi, nullptr);
   b7b9e:	2100      	movs	r1, #0
   b7ba0:	f7ff be70 	b.w	b7884 <hal_spi_acquire>

000b7ba4 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b7ba4:	b510      	push	{r4, lr}
   b7ba6:	4604      	mov	r4, r0
   b7ba8:	4608      	mov	r0, r1
{
    _spi = spi;
   b7baa:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b7bac:	f7ff fe3a 	bl	b7824 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b7bb0:	2300      	movs	r3, #0
   b7bb2:	6063      	str	r3, [r4, #4]
}
   b7bb4:	4620      	mov	r0, r4
   b7bb6:	bd10      	pop	{r4, pc}

000b7bb8 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   b7bb8:	b513      	push	{r0, r1, r4, lr}
   b7bba:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   b7bbc:	7800      	ldrb	r0, [r0, #0]
   b7bbe:	f7ff ffee 	bl	b7b9e <_ZN8SPIClass4lockEv.isra.0>
   b7bc2:	b958      	cbnz	r0, b7bdc <_ZN8SPIClass5beginEv+0x24>
   b7bc4:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   b7bc6:	9001      	str	r0, [sp, #4]
   b7bc8:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b7bcc:	f7ff fe1a 	bl	b7804 <hal_spi_begin>
        unlock();
   b7bd0:	9801      	ldr	r0, [sp, #4]
    }
}
   b7bd2:	b002      	add	sp, #8
   b7bd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b7bd8:	f7ff bfde 	b.w	b7b98 <_ZN8SPIClass6unlockEv.isra.0>
   b7bdc:	b002      	add	sp, #8
   b7bde:	bd10      	pop	{r4, pc}

000b7be0 <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   b7be0:	7800      	ldrb	r0, [r0, #0]
   b7be2:	f7ff bfd9 	b.w	b7b98 <_ZN8SPIClass6unlockEv.isra.0>
	...

000b7be8 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   b7be8:	0840      	lsrs	r0, r0, #1
{
   b7bea:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   b7bec:	6018      	str	r0, [r3, #0]
   b7bee:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   b7bf0:	6818      	ldr	r0, [r3, #0]
   b7bf2:	4288      	cmp	r0, r1
   b7bf4:	b2e5      	uxtb	r5, r4
   b7bf6:	d906      	bls.n	b7c06 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   b7bf8:	3401      	adds	r4, #1
   b7bfa:	2c08      	cmp	r4, #8
   b7bfc:	d002      	beq.n	b7c04 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   b7bfe:	0840      	lsrs	r0, r0, #1
   b7c00:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   b7c02:	e7f5      	b.n	b7bf0 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   b7c04:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   b7c06:	4b02      	ldr	r3, [pc, #8]	; (b7c10 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   b7c08:	5d5b      	ldrb	r3, [r3, r5]
   b7c0a:	7013      	strb	r3, [r2, #0]
}
   b7c0c:	bd30      	pop	{r4, r5, pc}
   b7c0e:	bf00      	nop
   b7c10:	000b9d40 	.word	0x000b9d40

000b7c14 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
   b7c14:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b7c18:	4606      	mov	r6, r0
   b7c1a:	b08f      	sub	sp, #60	; 0x3c
    CHECK(lock());
   b7c1c:	7800      	ldrb	r0, [r0, #0]
{
   b7c1e:	460c      	mov	r4, r1
    CHECK(lock());
   b7c20:	f7ff ffbd 	bl	b7b9e <_ZN8SPIClass4lockEv.isra.0>
   b7c24:	2800      	cmp	r0, #0
   b7c26:	db1b      	blt.n	b7c60 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4c>
    querySpiInfo(_spi, &spi_info);
   b7c28:	7835      	ldrb	r5, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
   b7c2a:	2214      	movs	r2, #20
   b7c2c:	2100      	movs	r1, #0
   b7c2e:	a809      	add	r0, sp, #36	; 0x24
   b7c30:	f001 fdec 	bl	b980c <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   b7c34:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   b7c36:	2200      	movs	r2, #0
   b7c38:	a909      	add	r1, sp, #36	; 0x24
   b7c3a:	4628      	mov	r0, r5
    info->version = HAL_SPI_INFO_VERSION_1;
   b7c3c:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
   b7c40:	f7ff fe00 	bl	b7844 <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
   b7c44:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
   b7c48:	b113      	cbz	r3, b7c50 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x3c>
   b7c4a:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   b7c4e:	b155      	cbz	r5, b7c66 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x52>
  {
   b7c50:	2700      	movs	r7, #0
   b7c52:	46b9      	mov	r9, r7
   b7c54:	46b8      	mov	r8, r7
   b7c56:	2501      	movs	r5, #1
    if (default_ && other.default_)
   b7c58:	7923      	ldrb	r3, [r4, #4]
   b7c5a:	b15d      	cbz	r5, b7c74 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x60>
   b7c5c:	b1c3      	cbz	r3, b7c90 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
    return 0;
   b7c5e:	2000      	movs	r0, #0
}
   b7c60:	b00f      	add	sp, #60	; 0x3c
   b7c62:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
   b7c66:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   b7c6a:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   b7c6e:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
   b7c72:	e7f1      	b.n	b7c58 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x44>
    if (default_ == other.default_ &&
   b7c74:	2b00      	cmp	r3, #0
   b7c76:	d135      	bne.n	b7ce4 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xd0>
   b7c78:	68a3      	ldr	r3, [r4, #8]
   b7c7a:	4543      	cmp	r3, r8
   b7c7c:	d108      	bne.n	b7c90 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
        bitOrder_ == other.bitOrder_ &&
   b7c7e:	f88d 9020 	strb.w	r9, [sp, #32]
   b7c82:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   b7c86:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   b7c8a:	89a3      	ldrh	r3, [r4, #12]
   b7c8c:	429a      	cmp	r2, r3
   b7c8e:	d0e6      	beq.n	b7c5e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
            uint8_t divisor = 0;
   b7c90:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   b7c92:	68a1      	ldr	r1, [r4, #8]
            uint8_t divisor = 0;
   b7c94:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   b7c98:	980a      	ldr	r0, [sp, #40]	; 0x28
   b7c9a:	ab04      	add	r3, sp, #16
   b7c9c:	f10d 020f 	add.w	r2, sp, #15
   b7ca0:	f7ff ffa2 	bl	b7be8 <_ZN8SPIClass19computeClockDividerEjjRhRj>
    if (default_ && other.default_)
   b7ca4:	7921      	ldrb	r1, [r4, #4]
   b7ca6:	b985      	cbnz	r5, b7cca <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
    if (default_ == other.default_ &&
   b7ca8:	b989      	cbnz	r1, b7cce <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   b7caa:	68a3      	ldr	r3, [r4, #8]
   b7cac:	4543      	cmp	r3, r8
   b7cae:	d30e      	bcc.n	b7cce <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
        bitOrder_ == other.bitOrder_ &&
   b7cb0:	f88d 9020 	strb.w	r9, [sp, #32]
   b7cb4:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   b7cb8:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   b7cbc:	89a3      	ldrh	r3, [r4, #12]
   b7cbe:	429a      	cmp	r2, r3
   b7cc0:	d105      	bne.n	b7cce <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   b7cc2:	9b04      	ldr	r3, [sp, #16]
   b7cc4:	4543      	cmp	r3, r8
   b7cc6:	d102      	bne.n	b7cce <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   b7cc8:	e7c9      	b.n	b7c5e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
    if (default_ && other.default_)
   b7cca:	2900      	cmp	r1, #0
   b7ccc:	d1f9      	bne.n	b7cc2 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xae>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
   b7cce:	2300      	movs	r3, #0
   b7cd0:	9301      	str	r3, [sp, #4]
   b7cd2:	7b63      	ldrb	r3, [r4, #13]
   b7cd4:	9300      	str	r3, [sp, #0]
   b7cd6:	f89d 200f 	ldrb.w	r2, [sp, #15]
   b7cda:	7b23      	ldrb	r3, [r4, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
   b7cdc:	7830      	ldrb	r0, [r6, #0]
   b7cde:	f7ff fdc9 	bl	b7874 <hal_spi_set_settings>
   b7ce2:	e7bc      	b.n	b7c5e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
   b7ce4:	e9cd 5500 	strd	r5, r5, [sp]
   b7ce8:	462b      	mov	r3, r5
   b7cea:	462a      	mov	r2, r5
   b7cec:	2101      	movs	r1, #1
   b7cee:	e7f5      	b.n	b7cdc <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc8>

000b7cf0 <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   b7cf0:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   b7cf2:	7800      	ldrb	r0, [r0, #0]
   b7cf4:	f7ff fd8e 	bl	b7814 <hal_spi_transfer>
}
   b7cf8:	b2c0      	uxtb	r0, r0
   b7cfa:	bd08      	pop	{r3, pc}

000b7cfc <_ZN8SPIClass8transferEPKvPvjPFvvE>:

void SPIClass::transfer(const void* tx_buffer, void* rx_buffer, size_t length,
                        wiring_spi_dma_transfercomplete_callback_t user_callback)
{
   b7cfc:	b530      	push	{r4, r5, lr}
   b7cfe:	b087      	sub	sp, #28
   b7d00:	4604      	mov	r4, r0
   b7d02:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    hal_spi_transfer_dma(_spi, tx_buffer, rx_buffer, length, user_callback);
   b7d04:	9500      	str	r5, [sp, #0]
   b7d06:	7800      	ldrb	r0, [r0, #0]
   b7d08:	f7ff fda4 	bl	b7854 <hal_spi_transfer_dma>
    if (user_callback == NULL)
   b7d0c:	b93d      	cbnz	r5, b7d1e <_ZN8SPIClass8transferEPKvPvjPFvvE+0x22>
    {
        hal_spi_transfer_status_t st;
        do
        {
            hal_spi_transfer_dma_status(_spi, &st);
   b7d0e:	7820      	ldrb	r0, [r4, #0]
   b7d10:	a902      	add	r1, sp, #8
   b7d12:	f7ff fda7 	bl	b7864 <hal_spi_transfer_dma_status>
        } while (st.transfer_ongoing);
   b7d16:	f89d 3014 	ldrb.w	r3, [sp, #20]
   b7d1a:	07db      	lsls	r3, r3, #31
   b7d1c:	d4f7      	bmi.n	b7d0e <_ZN8SPIClass8transferEPKvPvjPFvvE+0x12>
    }
}
   b7d1e:	b007      	add	sp, #28
   b7d20:	bd30      	pop	{r4, r5, pc}
	...

000b7d24 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b7d24:	4b05      	ldr	r3, [pc, #20]	; (b7d3c <_GLOBAL__sub_I_System+0x18>)
   b7d26:	2202      	movs	r2, #2
   b7d28:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b7d2a:	4b05      	ldr	r3, [pc, #20]	; (b7d40 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b7d2c:	4a05      	ldr	r2, [pc, #20]	; (b7d44 <_GLOBAL__sub_I_System+0x20>)
   b7d2e:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b7d30:	2000      	movs	r0, #0
   b7d32:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b7d36:	f7ff bdfd 	b.w	b7934 <set_system_mode>
   b7d3a:	bf00      	nop
   b7d3c:	2003e69c 	.word	0x2003e69c
   b7d40:	2003e690 	.word	0x2003e690
   b7d44:	ffff0000 	.word	0xffff0000

000b7d48 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b7d48:	4802      	ldr	r0, [pc, #8]	; (b7d54 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b7d4a:	2300      	movs	r3, #0
   b7d4c:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b7d4e:	f7ff bcb1 	b.w	b76b4 <os_mutex_recursive_create>
   b7d52:	bf00      	nop
   b7d54:	2003e6a0 	.word	0x2003e6a0

000b7d58 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b7d58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7d5a:	4606      	mov	r6, r0
   b7d5c:	460d      	mov	r5, r1
  size_t n = 0;
   b7d5e:	188f      	adds	r7, r1, r2
   b7d60:	2400      	movs	r4, #0
  while (size--) {
   b7d62:	42bd      	cmp	r5, r7
   b7d64:	d00c      	beq.n	b7d80 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b7d66:	6833      	ldr	r3, [r6, #0]
   b7d68:	f815 1b01 	ldrb.w	r1, [r5], #1
   b7d6c:	689b      	ldr	r3, [r3, #8]
   b7d6e:	4630      	mov	r0, r6
   b7d70:	4798      	blx	r3
     if (chunk>=0)
   b7d72:	1e03      	subs	r3, r0, #0
   b7d74:	db01      	blt.n	b7d7a <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b7d76:	441c      	add	r4, r3
  while (size--) {
   b7d78:	e7f3      	b.n	b7d62 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b7d7a:	2c00      	cmp	r4, #0
   b7d7c:	bf08      	it	eq
   b7d7e:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b7d80:	4620      	mov	r0, r4
   b7d82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b7d84 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   b7d84:	b508      	push	{r3, lr}
  return write(str);
   b7d86:	f7fe fb23 	bl	b63d0 <_ZN5Print5writeEPKc>
}
   b7d8a:	bd08      	pop	{r3, pc}

000b7d8c <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   b7d8c:	6803      	ldr	r3, [r0, #0]
   b7d8e:	689b      	ldr	r3, [r3, #8]
   b7d90:	4718      	bx	r3

000b7d92 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b7d92:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b7d94:	210d      	movs	r1, #13
{
   b7d96:	4605      	mov	r5, r0
  size_t n = print('\r');
   b7d98:	f7ff fff8 	bl	b7d8c <_ZN5Print5printEc>
  n += print('\n');
   b7d9c:	210a      	movs	r1, #10
  size_t n = print('\r');
   b7d9e:	4604      	mov	r4, r0
  n += print('\n');
   b7da0:	4628      	mov	r0, r5
   b7da2:	f7ff fff3 	bl	b7d8c <_ZN5Print5printEc>
  return n;
}
   b7da6:	4420      	add	r0, r4
   b7da8:	bd38      	pop	{r3, r4, r5, pc}

000b7daa <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   b7daa:	b538      	push	{r3, r4, r5, lr}
   b7dac:	4605      	mov	r5, r0
  return write(str);
   b7dae:	f7fe fb0f 	bl	b63d0 <_ZN5Print5writeEPKc>
   b7db2:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   b7db4:	4628      	mov	r0, r5
   b7db6:	f7ff ffec 	bl	b7d92 <_ZN5Print7printlnEv>
  return n;
}
   b7dba:	4420      	add	r0, r4
   b7dbc:	bd38      	pop	{r3, r4, r5, pc}

000b7dbe <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b7dbe:	b530      	push	{r4, r5, lr}
   b7dc0:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b7dc2:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b7dc4:	2a01      	cmp	r2, #1
  *str = '\0';
   b7dc6:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b7dca:	bf98      	it	ls
   b7dcc:	220a      	movls	r2, #10
   b7dce:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b7dd0:	460d      	mov	r5, r1
   b7dd2:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b7dd6:	fb01 5312 	mls	r3, r1, r2, r5
   b7dda:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b7dde:	2b09      	cmp	r3, #9
   b7de0:	bf94      	ite	ls
   b7de2:	3330      	addls	r3, #48	; 0x30
   b7de4:	3337      	addhi	r3, #55	; 0x37
   b7de6:	b2db      	uxtb	r3, r3
  } while(n);
   b7de8:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b7dea:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b7dee:	d9ef      	bls.n	b7dd0 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b7df0:	4621      	mov	r1, r4
   b7df2:	f7fe faed 	bl	b63d0 <_ZN5Print5writeEPKc>
}
   b7df6:	b00b      	add	sp, #44	; 0x2c
   b7df8:	bd30      	pop	{r4, r5, pc}
	...

000b7dfc <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
   b7dfc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b7e00:	ec55 4b10 	vmov	r4, r5, d0
   b7e04:	4606      	mov	r6, r0
   b7e06:	460f      	mov	r7, r1
  size_t n = 0;

  if (isnan(number)) return print("nan");
   b7e08:	ee10 2a10 	vmov	r2, s0
   b7e0c:	ee10 0a10 	vmov	r0, s0
   b7e10:	462b      	mov	r3, r5
   b7e12:	4629      	mov	r1, r5
   b7e14:	f001 fc24 	bl	b9660 <__aeabi_dcmpun>
   b7e18:	b140      	cbz	r0, b7e2c <_ZN5Print10printFloatEdh+0x30>
  return write(str);
   b7e1a:	4953      	ldr	r1, [pc, #332]	; (b7f68 <_ZN5Print10printFloatEdh+0x16c>)
   b7e1c:	4630      	mov	r0, r6
   b7e1e:	f7fe fad7 	bl	b63d0 <_ZN5Print5writeEPKc>
   b7e22:	4682      	mov	sl, r0
    n += print(toPrint);
    remainder -= toPrint;
  }

  return n;
}
   b7e24:	4650      	mov	r0, sl
   b7e26:	b003      	add	sp, #12
   b7e28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
   b7e2c:	f025 4900 	bic.w	r9, r5, #2147483648	; 0x80000000
  if (isinf(number)) return print("inf");
   b7e30:	4b4e      	ldr	r3, [pc, #312]	; (b7f6c <_ZN5Print10printFloatEdh+0x170>)
   b7e32:	f04f 32ff 	mov.w	r2, #4294967295
   b7e36:	4620      	mov	r0, r4
   b7e38:	4649      	mov	r1, r9
   b7e3a:	f001 fc11 	bl	b9660 <__aeabi_dcmpun>
   b7e3e:	b948      	cbnz	r0, b7e54 <_ZN5Print10printFloatEdh+0x58>
   b7e40:	4b4a      	ldr	r3, [pc, #296]	; (b7f6c <_ZN5Print10printFloatEdh+0x170>)
   b7e42:	f04f 32ff 	mov.w	r2, #4294967295
   b7e46:	4620      	mov	r0, r4
   b7e48:	4649      	mov	r1, r9
   b7e4a:	f001 fbeb 	bl	b9624 <__aeabi_dcmple>
   b7e4e:	b908      	cbnz	r0, b7e54 <_ZN5Print10printFloatEdh+0x58>
  return write(str);
   b7e50:	4947      	ldr	r1, [pc, #284]	; (b7f70 <_ZN5Print10printFloatEdh+0x174>)
   b7e52:	e7e3      	b.n	b7e1c <_ZN5Print10printFloatEdh+0x20>
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
   b7e54:	4b47      	ldr	r3, [pc, #284]	; (b7f74 <_ZN5Print10printFloatEdh+0x178>)
   b7e56:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   b7e5a:	4620      	mov	r0, r4
   b7e5c:	4629      	mov	r1, r5
   b7e5e:	f001 fbf5 	bl	b964c <__aeabi_dcmpgt>
   b7e62:	b108      	cbz	r0, b7e68 <_ZN5Print10printFloatEdh+0x6c>
  return write(str);
   b7e64:	4944      	ldr	r1, [pc, #272]	; (b7f78 <_ZN5Print10printFloatEdh+0x17c>)
   b7e66:	e7d9      	b.n	b7e1c <_ZN5Print10printFloatEdh+0x20>
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
   b7e68:	4b44      	ldr	r3, [pc, #272]	; (b7f7c <_ZN5Print10printFloatEdh+0x180>)
   b7e6a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   b7e6e:	4620      	mov	r0, r4
   b7e70:	4629      	mov	r1, r5
   b7e72:	f001 fbcd 	bl	b9610 <__aeabi_dcmplt>
   b7e76:	2800      	cmp	r0, #0
   b7e78:	d1f4      	bne.n	b7e64 <_ZN5Print10printFloatEdh+0x68>
  if (number < 0.0)
   b7e7a:	2200      	movs	r2, #0
   b7e7c:	2300      	movs	r3, #0
   b7e7e:	4620      	mov	r0, r4
   b7e80:	4629      	mov	r1, r5
   b7e82:	f001 fbc5 	bl	b9610 <__aeabi_dcmplt>
   b7e86:	b1d0      	cbz	r0, b7ebe <_ZN5Print10printFloatEdh+0xc2>
     n += print('-');
   b7e88:	212d      	movs	r1, #45	; 0x2d
   b7e8a:	4630      	mov	r0, r6
   b7e8c:	f7ff ff7e 	bl	b7d8c <_ZN5Print5printEc>
     number = -number;
   b7e90:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
     n += print('-');
   b7e94:	4682      	mov	sl, r0
     number = -number;
   b7e96:	461d      	mov	r5, r3
  double rounding = 0.5;
   b7e98:	4939      	ldr	r1, [pc, #228]	; (b7f80 <_ZN5Print10printFloatEdh+0x184>)
    rounding /= 10.0;
   b7e9a:	f8df 90ec 	ldr.w	r9, [pc, #236]	; b7f88 <_ZN5Print10printFloatEdh+0x18c>
  size_t n = 0;
   b7e9e:	f04f 0b00 	mov.w	fp, #0
  double rounding = 0.5;
   b7ea2:	2000      	movs	r0, #0
    rounding /= 10.0;
   b7ea4:	f04f 0800 	mov.w	r8, #0
  for (uint8_t i=0; i<digits; ++i)
   b7ea8:	fa5f f38b 	uxtb.w	r3, fp
   b7eac:	429f      	cmp	r7, r3
   b7eae:	d908      	bls.n	b7ec2 <_ZN5Print10printFloatEdh+0xc6>
    rounding /= 10.0;
   b7eb0:	4642      	mov	r2, r8
   b7eb2:	464b      	mov	r3, r9
   b7eb4:	f001 fa64 	bl	b9380 <__aeabi_ddiv>
  for (uint8_t i=0; i<digits; ++i)
   b7eb8:	f10b 0b01 	add.w	fp, fp, #1
   b7ebc:	e7f4      	b.n	b7ea8 <_ZN5Print10printFloatEdh+0xac>
  size_t n = 0;
   b7ebe:	4682      	mov	sl, r0
   b7ec0:	e7ea      	b.n	b7e98 <_ZN5Print10printFloatEdh+0x9c>
  number += rounding;
   b7ec2:	4622      	mov	r2, r4
   b7ec4:	462b      	mov	r3, r5
   b7ec6:	f000 ff7b 	bl	b8dc0 <__adddf3>
   b7eca:	460d      	mov	r5, r1
   b7ecc:	4604      	mov	r4, r0
  unsigned long int_part = (unsigned long)number;
   b7ece:	f001 fc05 	bl	b96dc <__aeabi_d2uiz>
   b7ed2:	4680      	mov	r8, r0
  double remainder = number - (double)int_part;
   b7ed4:	f001 f8b0 	bl	b9038 <__aeabi_ui2d>
   b7ed8:	4602      	mov	r2, r0
   b7eda:	460b      	mov	r3, r1
   b7edc:	4620      	mov	r0, r4
   b7ede:	4629      	mov	r1, r5
   b7ee0:	f000 ff6c 	bl	b8dbc <__aeabi_dsub>
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b7ee4:	220a      	movs	r2, #10
   b7ee6:	4604      	mov	r4, r0
   b7ee8:	460d      	mov	r5, r1
   b7eea:	4630      	mov	r0, r6
   b7eec:	4641      	mov	r1, r8
   b7eee:	f7ff ff66 	bl	b7dbe <_ZN5Print11printNumberEmh>
  n += print(int_part);
   b7ef2:	4482      	add	sl, r0
  if (digits > 0) {
   b7ef4:	2f00      	cmp	r7, #0
   b7ef6:	d095      	beq.n	b7e24 <_ZN5Print10printFloatEdh+0x28>
  return write(str);
   b7ef8:	4922      	ldr	r1, [pc, #136]	; (b7f84 <_ZN5Print10printFloatEdh+0x188>)
    remainder *= 10.0;
   b7efa:	f8df 908c 	ldr.w	r9, [pc, #140]	; b7f88 <_ZN5Print10printFloatEdh+0x18c>
  return write(str);
   b7efe:	4630      	mov	r0, r6
   b7f00:	f7fe fa66 	bl	b63d0 <_ZN5Print5writeEPKc>
    remainder *= 10.0;
   b7f04:	f04f 0800 	mov.w	r8, #0
    n += print(".");
   b7f08:	4482      	add	sl, r0
  while (digits-- > 0)
   b7f0a:	2f00      	cmp	r7, #0
   b7f0c:	d08a      	beq.n	b7e24 <_ZN5Print10printFloatEdh+0x28>
    remainder *= 10.0;
   b7f0e:	4642      	mov	r2, r8
   b7f10:	464b      	mov	r3, r9
   b7f12:	4620      	mov	r0, r4
   b7f14:	4629      	mov	r1, r5
   b7f16:	f001 f909 	bl	b912c <__aeabi_dmul>
   b7f1a:	4604      	mov	r4, r0
   b7f1c:	460d      	mov	r5, r1
    int toPrint = int(remainder);
   b7f1e:	f001 fbb5 	bl	b968c <__aeabi_d2iz>
        if (n < 0 && base == 10) {
   b7f22:	f1b0 0b00 	subs.w	fp, r0, #0
   b7f26:	da1c      	bge.n	b7f62 <_ZN5Print10printFloatEdh+0x166>
            t = print('-');
   b7f28:	212d      	movs	r1, #45	; 0x2d
   b7f2a:	4630      	mov	r0, r6
   b7f2c:	f7ff ff2e 	bl	b7d8c <_ZN5Print5printEc>
            val = -n;
   b7f30:	f1cb 0100 	rsb	r1, fp, #0
            t = print('-');
   b7f34:	4603      	mov	r3, r0
        return printNumber(val, base) + t;
   b7f36:	220a      	movs	r2, #10
   b7f38:	4630      	mov	r0, r6
   b7f3a:	9301      	str	r3, [sp, #4]
   b7f3c:	f7ff ff3f 	bl	b7dbe <_ZN5Print11printNumberEmh>
   b7f40:	9b01      	ldr	r3, [sp, #4]
   b7f42:	4418      	add	r0, r3
    n += print(toPrint);
   b7f44:	4482      	add	sl, r0
    remainder -= toPrint;
   b7f46:	4658      	mov	r0, fp
   b7f48:	f001 f886 	bl	b9058 <__aeabi_i2d>
   b7f4c:	4602      	mov	r2, r0
   b7f4e:	460b      	mov	r3, r1
   b7f50:	4620      	mov	r0, r4
   b7f52:	4629      	mov	r1, r5
   b7f54:	f000 ff32 	bl	b8dbc <__aeabi_dsub>
   b7f58:	3f01      	subs	r7, #1
   b7f5a:	4604      	mov	r4, r0
   b7f5c:	460d      	mov	r5, r1
   b7f5e:	b2ff      	uxtb	r7, r7
  while (digits-- > 0)
   b7f60:	e7d3      	b.n	b7f0a <_ZN5Print10printFloatEdh+0x10e>
            val = n;
   b7f62:	4659      	mov	r1, fp
        size_t t = 0;
   b7f64:	2300      	movs	r3, #0
   b7f66:	e7e6      	b.n	b7f36 <_ZN5Print10printFloatEdh+0x13a>
   b7f68:	000b9d48 	.word	0x000b9d48
   b7f6c:	7fefffff 	.word	0x7fefffff
   b7f70:	000b9d4c 	.word	0x000b9d4c
   b7f74:	41efffff 	.word	0x41efffff
   b7f78:	000b9d50 	.word	0x000b9d50
   b7f7c:	c1efffff 	.word	0xc1efffff
   b7f80:	3fe00000 	.word	0x3fe00000
   b7f84:	000b9d54 	.word	0x000b9d54
   b7f88:	40240000 	.word	0x40240000

000b7f8c <_ZN5Print7printlnEdi>:
{
   b7f8c:	b538      	push	{r3, r4, r5, lr}
  return printFloat(n, digits);
   b7f8e:	b2c9      	uxtb	r1, r1
{
   b7f90:	4605      	mov	r5, r0
  return printFloat(n, digits);
   b7f92:	f7ff ff33 	bl	b7dfc <_ZN5Print10printFloatEdh>
   b7f96:	4604      	mov	r4, r0
  n += println();
   b7f98:	4628      	mov	r0, r5
   b7f9a:	f7ff fefa 	bl	b7d92 <_ZN5Print7printlnEv>
}
   b7f9e:	4420      	add	r0, r4
   b7fa0:	bd38      	pop	{r3, r4, r5, pc}

000b7fa2 <_ZN5Print7printlnEfi>:
{
   b7fa2:	b538      	push	{r3, r4, r5, lr}
   b7fa4:	4604      	mov	r4, r0
   b7fa6:	ee10 0a10 	vmov	r0, s0
   b7faa:	460d      	mov	r5, r1
    return println((double)num, digits);
   b7fac:	f001 f866 	bl	b907c <__aeabi_f2d>
   b7fb0:	ec41 0b10 	vmov	d0, r0, r1
   b7fb4:	4629      	mov	r1, r5
   b7fb6:	4620      	mov	r0, r4
}
   b7fb8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return println((double)num, digits);
   b7fbc:	f7ff bfe6 	b.w	b7f8c <_ZN5Print7printlnEdi>

000b7fc0 <_ZN5Print7vprintfEbPKcSt9__va_list>:

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   b7fc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b7fc4:	b086      	sub	sp, #24
   b7fc6:	af00      	add	r7, sp, #0
   b7fc8:	4605      	mov	r5, r0
   b7fca:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   b7fcc:	1d38      	adds	r0, r7, #4
   b7fce:	2114      	movs	r1, #20
{
   b7fd0:	4614      	mov	r4, r2
    va_copy(args2, args);
   b7fd2:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   b7fd4:	f7ff fd7a 	bl	b7acc <vsnprintf>

    if (n<bufsize)
   b7fd8:	2813      	cmp	r0, #19
   b7fda:	d80e      	bhi.n	b7ffa <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   b7fdc:	1d39      	adds	r1, r7, #4
   b7fde:	4628      	mov	r0, r5
   b7fe0:	f7fe f9f6 	bl	b63d0 <_ZN5Print5writeEPKc>
   b7fe4:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   b7fe6:	b11e      	cbz	r6, b7ff0 <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   b7fe8:	4628      	mov	r0, r5
   b7fea:	f7ff fed2 	bl	b7d92 <_ZN5Print7printlnEv>
   b7fee:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   b7ff0:	4620      	mov	r0, r4
   b7ff2:	3718      	adds	r7, #24
   b7ff4:	46bd      	mov	sp, r7
   b7ff6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   b7ffa:	f100 0308 	add.w	r3, r0, #8
   b7ffe:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   b8002:	46e8      	mov	r8, sp
        char bigger[n+1];
   b8004:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   b8008:	4622      	mov	r2, r4
   b800a:	1c41      	adds	r1, r0, #1
   b800c:	683b      	ldr	r3, [r7, #0]
   b800e:	4668      	mov	r0, sp
   b8010:	f7ff fd5c 	bl	b7acc <vsnprintf>
  return write(str);
   b8014:	4669      	mov	r1, sp
   b8016:	4628      	mov	r0, r5
   b8018:	f7fe f9da 	bl	b63d0 <_ZN5Print5writeEPKc>
   b801c:	4604      	mov	r4, r0
   b801e:	46c5      	mov	sp, r8
   b8020:	e7e1      	b.n	b7fe6 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>
	...

000b8024 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b8024:	4b01      	ldr	r3, [pc, #4]	; (b802c <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b8026:	4a02      	ldr	r2, [pc, #8]	; (b8030 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b8028:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b802a:	4770      	bx	lr
   b802c:	2003e6a4 	.word	0x2003e6a4
   b8030:	000b9d56 	.word	0x000b9d56

000b8034 <_ZL22Refresh_UnixTime_Cachex>:
	return calendar_time;
}

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   b8034:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    unix_time += time_zone_cache;
   b8038:	4a15      	ldr	r2, [pc, #84]	; (b8090 <_ZL22Refresh_UnixTime_Cachex+0x5c>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   b803a:	f8df 8060 	ldr.w	r8, [pc, #96]	; b809c <_ZL22Refresh_UnixTime_Cachex+0x68>
    unix_time += time_zone_cache;
   b803e:	e9d2 6300 	ldrd	r6, r3, [r2]
   b8042:	1980      	adds	r0, r0, r6
   b8044:	eb43 0101 	adc.w	r1, r3, r1
    unix_time += dst_current_cache;
   b8048:	4b12      	ldr	r3, [pc, #72]	; (b8094 <_ZL22Refresh_UnixTime_Cachex+0x60>)
   b804a:	e9d3 6700 	ldrd	r6, r7, [r3]
    if(unix_time != unix_time_cache)
   b804e:	e9d8 2300 	ldrd	r2, r3, [r8]
    unix_time += dst_current_cache;
   b8052:	1986      	adds	r6, r0, r6
   b8054:	eb41 0707 	adc.w	r7, r1, r7
    if(unix_time != unix_time_cache)
   b8058:	42bb      	cmp	r3, r7
   b805a:	bf08      	it	eq
   b805c:	42b2      	cmpeq	r2, r6
{
   b805e:	b08c      	sub	sp, #48	; 0x30
    if(unix_time != unix_time_cache)
   b8060:	d013      	beq.n	b808a <_ZL22Refresh_UnixTime_Cachex+0x56>
	localtime_r(&unix_time, &calendar_time);
   b8062:	a903      	add	r1, sp, #12
   b8064:	4668      	mov	r0, sp
   b8066:	e9cd 6700 	strd	r6, r7, [sp]
   b806a:	f7ff fd4f 	bl	b7b0c <localtime_r>
	calendar_time.tm_year += 1900;
   b806e:	9b08      	ldr	r3, [sp, #32]
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   b8070:	4d09      	ldr	r5, [pc, #36]	; (b8098 <_ZL22Refresh_UnixTime_Cachex+0x64>)
	calendar_time.tm_year += 1900;
   b8072:	f203 736c 	addw	r3, r3, #1900	; 0x76c
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   b8076:	ac03      	add	r4, sp, #12
	calendar_time.tm_year += 1900;
   b8078:	9308      	str	r3, [sp, #32]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   b807a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b807c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b807e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b8080:	c50f      	stmia	r5!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
   b8082:	e9c8 6700 	strd	r6, r7, [r8]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   b8086:	6823      	ldr	r3, [r4, #0]
   b8088:	602b      	str	r3, [r5, #0]
    }
}
   b808a:	b00c      	add	sp, #48	; 0x30
   b808c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b8090:	2003e6d8 	.word	0x2003e6d8
   b8094:	2003e6d0 	.word	0x2003e6d0
   b8098:	2003e6ac 	.word	0x2003e6ac
   b809c:	2003e6e0 	.word	0x2003e6e0

000b80a0 <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
   b80a0:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   b80a2:	2000      	movs	r0, #0
   b80a4:	f7ff fcea 	bl	b7a7c <spark_sync_time_pending>
   b80a8:	b128      	cbz	r0, b80b6 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   b80aa:	f7ff fcdf 	bl	b7a6c <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   b80ae:	f080 0001 	eor.w	r0, r0, #1
   b80b2:	b2c0      	uxtb	r0, r0
    }
   b80b4:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   b80b6:	2001      	movs	r0, #1
   b80b8:	e7fc      	b.n	b80b4 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>
	...

000b80bc <_ZN9TimeClass5monthEx>:
	return month(now());
}

/* the month for the given time */
int TimeClass::month(time_t t)
{
   b80bc:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   b80be:	f7ff ffb9 	bl	b8034 <_ZL22Refresh_UnixTime_Cachex>
	return (calendar_time_cache.tm_mon + 1);//Arduino's month representation
   b80c2:	4b02      	ldr	r3, [pc, #8]	; (b80cc <_ZN9TimeClass5monthEx+0x10>)
   b80c4:	6918      	ldr	r0, [r3, #16]
}
   b80c6:	3001      	adds	r0, #1
   b80c8:	bd08      	pop	{r3, pc}
   b80ca:	bf00      	nop
   b80cc:	2003e6ac 	.word	0x2003e6ac

000b80d0 <_ZN9TimeClass7isValidEv>:
    strftime(buf, sizeof(buf), format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   b80d0:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
   b80d2:	2000      	movs	r0, #0
   b80d4:	f7ff fade 	bl	b7694 <hal_rtc_time_is_valid>
    if (rtcstate)
   b80d8:	4604      	mov	r4, r0
   b80da:	b9a0      	cbnz	r0, b8106 <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   b80dc:	f7ff fc22 	bl	b7924 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   b80e0:	2801      	cmp	r0, #1
   b80e2:	d110      	bne.n	b8106 <_ZN9TimeClass7isValidEv+0x36>
   b80e4:	4620      	mov	r0, r4
   b80e6:	f7ff fc3d 	bl	b7964 <system_thread_get_state>
   b80ea:	b960      	cbnz	r0, b8106 <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
   b80ec:	f7ff ffd8 	bl	b80a0 <_ZN10CloudClass12syncTimeDoneEv.isra.0>

    static uint32_t freeMemory();

    template<typename Condition, typename While>
    static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   b80f0:	b910      	cbnz	r0, b80f8 <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
   b80f2:	f7ff fcb3 	bl	b7a5c <spark_process>
        while (_while() && !_condition()) {
   b80f6:	e7f9      	b.n	b80ec <_ZN9TimeClass7isValidEv+0x1c>
   b80f8:	f7ff ffd2 	bl	b80a0 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
   b80fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
   b8100:	2000      	movs	r0, #0
   b8102:	f7ff bac7 	b.w	b7694 <hal_rtc_time_is_valid>
}
   b8106:	4620      	mov	r0, r4
   b8108:	bd10      	pop	{r4, pc}

000b810a <_ZN9TimeClass3nowEv>:
{
   b810a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
   b810c:	f7ff ffe0 	bl	b80d0 <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
   b8110:	2210      	movs	r2, #16
   b8112:	2100      	movs	r1, #0
   b8114:	4668      	mov	r0, sp
   b8116:	f001 fb79 	bl	b980c <memset>
    hal_rtc_get_time(&tv, nullptr);
   b811a:	2100      	movs	r1, #0
   b811c:	4668      	mov	r0, sp
   b811e:	f7ff fac1 	bl	b76a4 <hal_rtc_get_time>
}
   b8122:	9800      	ldr	r0, [sp, #0]
   b8124:	b005      	add	sp, #20
   b8126:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b812c <_ZN9TimeClass4hourEv>:
{
   b812c:	b508      	push	{r3, lr}
	return hour(now());
   b812e:	f7ff ffec 	bl	b810a <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   b8132:	17c1      	asrs	r1, r0, #31
   b8134:	f7ff ff7e 	bl	b8034 <_ZL22Refresh_UnixTime_Cachex>
}
   b8138:	4b01      	ldr	r3, [pc, #4]	; (b8140 <_ZN9TimeClass4hourEv+0x14>)
   b813a:	6898      	ldr	r0, [r3, #8]
   b813c:	bd08      	pop	{r3, pc}
   b813e:	bf00      	nop
   b8140:	2003e6ac 	.word	0x2003e6ac

000b8144 <_ZN9TimeClass6minuteEv>:
{
   b8144:	b508      	push	{r3, lr}
	return minute(now());
   b8146:	f7ff ffe0 	bl	b810a <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   b814a:	17c1      	asrs	r1, r0, #31
   b814c:	f7ff ff72 	bl	b8034 <_ZL22Refresh_UnixTime_Cachex>
}
   b8150:	4b01      	ldr	r3, [pc, #4]	; (b8158 <_ZN9TimeClass6minuteEv+0x14>)
   b8152:	6858      	ldr	r0, [r3, #4]
   b8154:	bd08      	pop	{r3, pc}
   b8156:	bf00      	nop
   b8158:	2003e6ac 	.word	0x2003e6ac

000b815c <_ZN9TimeClass6secondEv>:
{
   b815c:	b508      	push	{r3, lr}
	return second(now());
   b815e:	f7ff ffd4 	bl	b810a <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   b8162:	17c1      	asrs	r1, r0, #31
   b8164:	f7ff ff66 	bl	b8034 <_ZL22Refresh_UnixTime_Cachex>
}
   b8168:	4b01      	ldr	r3, [pc, #4]	; (b8170 <_ZN9TimeClass6secondEv+0x14>)
   b816a:	6818      	ldr	r0, [r3, #0]
   b816c:	bd08      	pop	{r3, pc}
   b816e:	bf00      	nop
   b8170:	2003e6ac 	.word	0x2003e6ac

000b8174 <_ZN9TimeClass3dayEv>:
{
   b8174:	b508      	push	{r3, lr}
	return day(now());
   b8176:	f7ff ffc8 	bl	b810a <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   b817a:	17c1      	asrs	r1, r0, #31
   b817c:	f7ff ff5a 	bl	b8034 <_ZL22Refresh_UnixTime_Cachex>
}
   b8180:	4b01      	ldr	r3, [pc, #4]	; (b8188 <_ZN9TimeClass3dayEv+0x14>)
   b8182:	68d8      	ldr	r0, [r3, #12]
   b8184:	bd08      	pop	{r3, pc}
   b8186:	bf00      	nop
   b8188:	2003e6ac 	.word	0x2003e6ac

000b818c <_ZN9TimeClass5monthEv>:
{
   b818c:	b508      	push	{r3, lr}
	return month(now());
   b818e:	f7ff ffbc 	bl	b810a <_ZN9TimeClass3nowEv>
}
   b8192:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return month(now());
   b8196:	17c1      	asrs	r1, r0, #31
   b8198:	f7ff bf90 	b.w	b80bc <_ZN9TimeClass5monthEx>

000b819c <_ZN9TimeClass4yearEv>:
{
   b819c:	b508      	push	{r3, lr}
	return year(now());
   b819e:	f7ff ffb4 	bl	b810a <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   b81a2:	17c1      	asrs	r1, r0, #31
   b81a4:	f7ff ff46 	bl	b8034 <_ZL22Refresh_UnixTime_Cachex>
}
   b81a8:	4b01      	ldr	r3, [pc, #4]	; (b81b0 <_ZN9TimeClass4yearEv+0x14>)
   b81aa:	6958      	ldr	r0, [r3, #20]
   b81ac:	bd08      	pop	{r3, pc}
   b81ae:	bf00      	nop
   b81b0:	2003e6ac 	.word	0x2003e6ac

000b81b4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b81b4:	4b02      	ldr	r3, [pc, #8]	; (b81c0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b81b6:	681a      	ldr	r2, [r3, #0]
   b81b8:	4b02      	ldr	r3, [pc, #8]	; (b81c4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b81ba:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b81bc:	4770      	bx	lr
   b81be:	bf00      	nop
   b81c0:	2003dfd4 	.word	0x2003dfd4
   b81c4:	2003e6a8 	.word	0x2003e6a8

000b81c8 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b81c8:	2100      	movs	r1, #0
   b81ca:	f7ff bbbb 	b.w	b7944 <system_delay_ms>
	...

000b81d0 <_GLOBAL__sub_I_RGB>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
   b81d0:	4b01      	ldr	r3, [pc, #4]	; (b81d8 <_GLOBAL__sub_I_RGB+0x8>)
   b81d2:	2200      	movs	r2, #0
   b81d4:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b81d6:	4770      	bx	lr
   b81d8:	2003e6e8 	.word	0x2003e6e8

000b81dc <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b81dc:	4b01      	ldr	r3, [pc, #4]	; (b81e4 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b81de:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b81e0:	4770      	bx	lr
   b81e2:	bf00      	nop
   b81e4:	2003dfd8 	.word	0x2003dfd8

000b81e8 <serialEventRun>:
{
   b81e8:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b81ea:	4b0b      	ldr	r3, [pc, #44]	; (b8218 <serialEventRun+0x30>)
   b81ec:	b143      	cbz	r3, b8200 <serialEventRun+0x18>
   b81ee:	f000 f96d 	bl	b84cc <_Z16_fetch_usbserialv>
   b81f2:	6803      	ldr	r3, [r0, #0]
   b81f4:	691b      	ldr	r3, [r3, #16]
   b81f6:	4798      	blx	r3
   b81f8:	2800      	cmp	r0, #0
   b81fa:	dd01      	ble.n	b8200 <serialEventRun+0x18>
        serialEvent();
   b81fc:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b8200:	4b06      	ldr	r3, [pc, #24]	; (b821c <serialEventRun+0x34>)
   b8202:	b143      	cbz	r3, b8216 <serialEventRun+0x2e>
   b8204:	f000 fbd8 	bl	b89b8 <_Z22__fetch_global_Serial1v>
   b8208:	6803      	ldr	r3, [r0, #0]
   b820a:	691b      	ldr	r3, [r3, #16]
   b820c:	4798      	blx	r3
   b820e:	2800      	cmp	r0, #0
   b8210:	dd01      	ble.n	b8216 <serialEventRun+0x2e>
        serialEvent1();
   b8212:	f3af 8000 	nop.w
}
   b8216:	bd08      	pop	{r3, pc}
	...

000b8220 <_post_loop>:
{
   b8220:	b508      	push	{r3, lr}
	serialEventRun();
   b8222:	f7ff ffe1 	bl	b81e8 <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b8226:	f7ff fa2d 	bl	b7684 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b822a:	4b01      	ldr	r3, [pc, #4]	; (b8230 <_post_loop+0x10>)
   b822c:	6018      	str	r0, [r3, #0]
}
   b822e:	bd08      	pop	{r3, pc}
   b8230:	2003e740 	.word	0x2003e740

000b8234 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b8234:	4805      	ldr	r0, [pc, #20]	; (b824c <_Z33system_initialize_user_backup_ramv+0x18>)
   b8236:	4a06      	ldr	r2, [pc, #24]	; (b8250 <_Z33system_initialize_user_backup_ramv+0x1c>)
   b8238:	4906      	ldr	r1, [pc, #24]	; (b8254 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b823a:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b823c:	1a12      	subs	r2, r2, r0
   b823e:	f001 fad7 	bl	b97f0 <memcpy>
    __backup_sram_signature = signature;
   b8242:	4b05      	ldr	r3, [pc, #20]	; (b8258 <_Z33system_initialize_user_backup_ramv+0x24>)
   b8244:	4a05      	ldr	r2, [pc, #20]	; (b825c <_Z33system_initialize_user_backup_ramv+0x28>)
   b8246:	601a      	str	r2, [r3, #0]
}
   b8248:	bd08      	pop	{r3, pc}
   b824a:	bf00      	nop
   b824c:	2003f400 	.word	0x2003f400
   b8250:	2003f404 	.word	0x2003f404
   b8254:	000ba074 	.word	0x000ba074
   b8258:	2003f400 	.word	0x2003f400
   b825c:	9a271c1e 	.word	0x9a271c1e

000b8260 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b8260:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b8262:	2300      	movs	r3, #0
   b8264:	9300      	str	r3, [sp, #0]
   b8266:	461a      	mov	r2, r3
   b8268:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b826c:	f7ff fb8c 	bl	b7988 <system_ctrl_set_result>
}
   b8270:	b003      	add	sp, #12
   b8272:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b8278 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b8278:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b827a:	8843      	ldrh	r3, [r0, #2]
   b827c:	2b0a      	cmp	r3, #10
   b827e:	d008      	beq.n	b8292 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b8280:	2b50      	cmp	r3, #80	; 0x50
   b8282:	d10b      	bne.n	b829c <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b8284:	4b09      	ldr	r3, [pc, #36]	; (b82ac <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b8286:	681b      	ldr	r3, [r3, #0]
   b8288:	b14b      	cbz	r3, b829e <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b828a:	b003      	add	sp, #12
   b828c:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b8290:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b8292:	f7ff ffe5 	bl	b8260 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b8296:	b003      	add	sp, #12
   b8298:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b829c:	2300      	movs	r3, #0
   b829e:	9300      	str	r3, [sp, #0]
   b82a0:	461a      	mov	r2, r3
   b82a2:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b82a6:	f7ff fb6f 	bl	b7988 <system_ctrl_set_result>
}
   b82aa:	e7f4      	b.n	b8296 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b82ac:	2003e6fc 	.word	0x2003e6fc

000b82b0 <module_user_init_hook>:
{
   b82b0:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b82b2:	4812      	ldr	r0, [pc, #72]	; (b82fc <module_user_init_hook+0x4c>)
   b82b4:	2100      	movs	r1, #0
   b82b6:	f7ff fc21 	bl	b7afc <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b82ba:	4b11      	ldr	r3, [pc, #68]	; (b8300 <module_user_init_hook+0x50>)
   b82bc:	681a      	ldr	r2, [r3, #0]
   b82be:	4b11      	ldr	r3, [pc, #68]	; (b8304 <module_user_init_hook+0x54>)
   b82c0:	429a      	cmp	r2, r3
   b82c2:	4b11      	ldr	r3, [pc, #68]	; (b8308 <module_user_init_hook+0x58>)
   b82c4:	bf0c      	ite	eq
   b82c6:	2201      	moveq	r2, #1
   b82c8:	2200      	movne	r2, #0
   b82ca:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b82cc:	d001      	beq.n	b82d2 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b82ce:	f7ff ffb1 	bl	b8234 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b82d2:	f7ff f9bf 	bl	b7654 <HAL_RNG_GetRandomNumber>
   b82d6:	4604      	mov	r4, r0
    srand(seed);
   b82d8:	f001 faa0 	bl	b981c <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b82dc:	4b0b      	ldr	r3, [pc, #44]	; (b830c <module_user_init_hook+0x5c>)
   b82de:	b113      	cbz	r3, b82e6 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b82e0:	4620      	mov	r0, r4
   b82e2:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b82e6:	2100      	movs	r1, #0
   b82e8:	4808      	ldr	r0, [pc, #32]	; (b830c <module_user_init_hook+0x5c>)
   b82ea:	f7ff fbcf 	bl	b7a8c <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b82ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b82f2:	4807      	ldr	r0, [pc, #28]	; (b8310 <module_user_init_hook+0x60>)
   b82f4:	2100      	movs	r1, #0
   b82f6:	f7ff bb3d 	b.w	b7974 <system_ctrl_set_app_request_handler>
   b82fa:	bf00      	nop
   b82fc:	000b81dd 	.word	0x000b81dd
   b8300:	2003f400 	.word	0x2003f400
   b8304:	9a271c1e 	.word	0x9a271c1e
   b8308:	2003e6f8 	.word	0x2003e6f8
   b830c:	00000000 	.word	0x00000000
   b8310:	000b8279 	.word	0x000b8279

000b8314 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b8314:	4770      	bx	lr

000b8316 <_ZN9IPAddressD0Ev>:
   b8316:	b510      	push	{r4, lr}
   b8318:	2118      	movs	r1, #24
   b831a:	4604      	mov	r4, r0
   b831c:	f7fb febf 	bl	b409e <_ZdlPvj>
   b8320:	4620      	mov	r0, r4
   b8322:	bd10      	pop	{r4, pc}

000b8324 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b8324:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b8326:	7d03      	ldrb	r3, [r0, #20]
   b8328:	2b06      	cmp	r3, #6
{
   b832a:	b08d      	sub	sp, #52	; 0x34
   b832c:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b832e:	f100 0704 	add.w	r7, r0, #4
   b8332:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b8336:	d012      	beq.n	b835e <_ZNK9IPAddress7printToER5Print+0x3a>
   b8338:	f100 0508 	add.w	r5, r0, #8
        return printNumber(val, base) + t;
   b833c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b8340:	220a      	movs	r2, #10
   b8342:	4630      	mov	r0, r6
   b8344:	f7ff fd3b 	bl	b7dbe <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b8348:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b834a:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b834c:	d019      	beq.n	b8382 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b834e:	2c00      	cmp	r4, #0
   b8350:	d0f4      	beq.n	b833c <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b8352:	212e      	movs	r1, #46	; 0x2e
   b8354:	4630      	mov	r0, r6
   b8356:	f7ff fd19 	bl	b7d8c <_ZN5Print5printEc>
   b835a:	4404      	add	r4, r0
   b835c:	e7ee      	b.n	b833c <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b835e:	232f      	movs	r3, #47	; 0x2f
   b8360:	466a      	mov	r2, sp
   b8362:	4639      	mov	r1, r7
   b8364:	200a      	movs	r0, #10
		buf[0] = 0;
   b8366:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b836a:	f7ff f9ab 	bl	b76c4 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b836e:	4668      	mov	r0, sp
   b8370:	f001 fa82 	bl	b9878 <strlen>
   b8374:	6833      	ldr	r3, [r6, #0]
   b8376:	4602      	mov	r2, r0
   b8378:	68db      	ldr	r3, [r3, #12]
   b837a:	4669      	mov	r1, sp
   b837c:	4630      	mov	r0, r6
   b837e:	4798      	blx	r3
   b8380:	4604      	mov	r4, r0
    }
    return n;
}
   b8382:	4620      	mov	r0, r4
   b8384:	b00d      	add	sp, #52	; 0x34
   b8386:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b8388 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b8388:	b510      	push	{r4, lr}
   b838a:	4b05      	ldr	r3, [pc, #20]	; (b83a0 <_ZN9IPAddressC1Ev+0x18>)
   b838c:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b838e:	2211      	movs	r2, #17
   b8390:	f840 3b04 	str.w	r3, [r0], #4
   b8394:	2100      	movs	r1, #0
   b8396:	f001 fa39 	bl	b980c <memset>
}
   b839a:	4620      	mov	r0, r4
   b839c:	bd10      	pop	{r4, pc}
   b839e:	bf00      	nop
   b83a0:	000b9d80 	.word	0x000b9d80

000b83a4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b83a4:	4603      	mov	r3, r0
   b83a6:	4a07      	ldr	r2, [pc, #28]	; (b83c4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b83a8:	b510      	push	{r4, lr}
   b83aa:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b83ae:	f101 0210 	add.w	r2, r1, #16
   b83b2:	f851 4b04 	ldr.w	r4, [r1], #4
   b83b6:	f843 4b04 	str.w	r4, [r3], #4
   b83ba:	4291      	cmp	r1, r2
   b83bc:	d1f9      	bne.n	b83b2 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b83be:	780a      	ldrb	r2, [r1, #0]
   b83c0:	701a      	strb	r2, [r3, #0]
}
   b83c2:	bd10      	pop	{r4, pc}
   b83c4:	000b9d80 	.word	0x000b9d80

000b83c8 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b83c8:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b83ca:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b83ce:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b83d2:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b83d6:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b83da:	2304      	movs	r3, #4
   b83dc:	6041      	str	r1, [r0, #4]
   b83de:	7503      	strb	r3, [r0, #20]
}
   b83e0:	bd10      	pop	{r4, pc}
	...

000b83e4 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b83e4:	b507      	push	{r0, r1, r2, lr}
   b83e6:	4b06      	ldr	r3, [pc, #24]	; (b8400 <_ZN9IPAddressC1EPKh+0x1c>)
   b83e8:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b83ea:	78cb      	ldrb	r3, [r1, #3]
   b83ec:	9300      	str	r3, [sp, #0]
   b83ee:	788b      	ldrb	r3, [r1, #2]
   b83f0:	784a      	ldrb	r2, [r1, #1]
   b83f2:	7809      	ldrb	r1, [r1, #0]
   b83f4:	f7ff ffe8 	bl	b83c8 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b83f8:	b003      	add	sp, #12
   b83fa:	f85d fb04 	ldr.w	pc, [sp], #4
   b83fe:	bf00      	nop
   b8400:	000b9d80 	.word	0x000b9d80

000b8404 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b8404:	7441      	strb	r1, [r0, #17]
}
   b8406:	4770      	bx	lr

000b8408 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b8408:	4770      	bx	lr

000b840a <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b840a:	4770      	bx	lr

000b840c <_ZN9USBSerial4readEv>:
{
   b840c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b840e:	2100      	movs	r1, #0
   b8410:	7c00      	ldrb	r0, [r0, #16]
   b8412:	f7ff fa67 	bl	b78e4 <HAL_USB_USART_Receive_Data>
}
   b8416:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b841a:	bd08      	pop	{r3, pc}

000b841c <_ZN9USBSerial4peekEv>:
{
   b841c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b841e:	2101      	movs	r1, #1
   b8420:	7c00      	ldrb	r0, [r0, #16]
   b8422:	f7ff fa5f 	bl	b78e4 <HAL_USB_USART_Receive_Data>
}
   b8426:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b842a:	bd08      	pop	{r3, pc}

000b842c <_ZN9USBSerial17availableForWriteEv>:
{
   b842c:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b842e:	7c00      	ldrb	r0, [r0, #16]
   b8430:	f7ff fa50 	bl	b78d4 <HAL_USB_USART_Available_Data_For_Write>
}
   b8434:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b8438:	bd08      	pop	{r3, pc}

000b843a <_ZN9USBSerial9availableEv>:
{
   b843a:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b843c:	7c00      	ldrb	r0, [r0, #16]
   b843e:	f7ff fa41 	bl	b78c4 <HAL_USB_USART_Available_Data>
}
   b8442:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b8446:	bd08      	pop	{r3, pc}

000b8448 <_ZN9USBSerial5writeEh>:
{
   b8448:	b513      	push	{r0, r1, r4, lr}
   b844a:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b844c:	7c00      	ldrb	r0, [r0, #16]
{
   b844e:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b8450:	f7ff fa40 	bl	b78d4 <HAL_USB_USART_Available_Data_For_Write>
   b8454:	2800      	cmp	r0, #0
   b8456:	9901      	ldr	r1, [sp, #4]
   b8458:	dc01      	bgt.n	b845e <_ZN9USBSerial5writeEh+0x16>
   b845a:	7c60      	ldrb	r0, [r4, #17]
   b845c:	b120      	cbz	r0, b8468 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b845e:	7c20      	ldrb	r0, [r4, #16]
   b8460:	f7ff fa48 	bl	b78f4 <HAL_USB_USART_Send_Data>
   b8464:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b8468:	b002      	add	sp, #8
   b846a:	bd10      	pop	{r4, pc}

000b846c <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b846c:	7c00      	ldrb	r0, [r0, #16]
   b846e:	f7ff ba49 	b.w	b7904 <HAL_USB_USART_Flush_Data>

000b8472 <_ZN9USBSerialD0Ev>:
   b8472:	b510      	push	{r4, lr}
   b8474:	2114      	movs	r1, #20
   b8476:	4604      	mov	r4, r0
   b8478:	f7fb fe11 	bl	b409e <_ZdlPvj>
   b847c:	4620      	mov	r0, r4
   b847e:	bd10      	pop	{r4, pc}

000b8480 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b8480:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b8482:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b8486:	4604      	mov	r4, r0
   b8488:	4608      	mov	r0, r1
   b848a:	2100      	movs	r1, #0
   b848c:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b8490:	4b04      	ldr	r3, [pc, #16]	; (b84a4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b8492:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b8494:	2301      	movs	r3, #1
  _serial = serial;
   b8496:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b8498:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b849a:	4611      	mov	r1, r2
   b849c:	f7ff fa02 	bl	b78a4 <HAL_USB_USART_Init>
}
   b84a0:	4620      	mov	r0, r4
   b84a2:	bd10      	pop	{r4, pc}
   b84a4:	000b9d94 	.word	0x000b9d94

000b84a8 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   b84a8:	7c00      	ldrb	r0, [r0, #16]
   b84aa:	2200      	movs	r2, #0
   b84ac:	f7ff ba02 	b.w	b78b4 <HAL_USB_USART_Begin>

000b84b0 <_ZN9USBSerial9isEnabledEv>:
  return HAL_USB_USART_Is_Enabled(_serial);
   b84b0:	7c00      	ldrb	r0, [r0, #16]
   b84b2:	f7ff ba2f 	b.w	b7914 <HAL_USB_USART_Is_Enabled>

000b84b6 <_ZN9USBSerialcvbEv>:
  return isEnabled();
   b84b6:	f7ff bffb 	b.w	b84b0 <_ZN9USBSerial9isEnabledEv>

000b84ba <_Z19acquireSerialBufferv>:
{
   b84ba:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b84bc:	2214      	movs	r2, #20
{
   b84be:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b84c0:	2100      	movs	r1, #0
   b84c2:	f001 f9a3 	bl	b980c <memset>
}
   b84c6:	4620      	mov	r0, r4
   b84c8:	bd10      	pop	{r4, pc}
	...

000b84cc <_Z16_fetch_usbserialv>:
{
   b84cc:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b84ce:	4c0f      	ldr	r4, [pc, #60]	; (b850c <_Z16_fetch_usbserialv+0x40>)
{
   b84d0:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b84d2:	a803      	add	r0, sp, #12
   b84d4:	f7ff fff1 	bl	b84ba <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b84d8:	7821      	ldrb	r1, [r4, #0]
   b84da:	f3bf 8f5b 	dmb	ish
   b84de:	f011 0101 	ands.w	r1, r1, #1
   b84e2:	d10f      	bne.n	b8504 <_Z16_fetch_usbserialv+0x38>
   b84e4:	4620      	mov	r0, r4
   b84e6:	9101      	str	r1, [sp, #4]
   b84e8:	f7fb fddb 	bl	b40a2 <__cxa_guard_acquire>
   b84ec:	9901      	ldr	r1, [sp, #4]
   b84ee:	b148      	cbz	r0, b8504 <_Z16_fetch_usbserialv+0x38>
   b84f0:	aa03      	add	r2, sp, #12
   b84f2:	4807      	ldr	r0, [pc, #28]	; (b8510 <_Z16_fetch_usbserialv+0x44>)
   b84f4:	f7ff ffc4 	bl	b8480 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b84f8:	4620      	mov	r0, r4
   b84fa:	f7fb fdd7 	bl	b40ac <__cxa_guard_release>
   b84fe:	4805      	ldr	r0, [pc, #20]	; (b8514 <_Z16_fetch_usbserialv+0x48>)
   b8500:	f001 f95c 	bl	b97bc <atexit>
	return _usbserial;
}
   b8504:	4802      	ldr	r0, [pc, #8]	; (b8510 <_Z16_fetch_usbserialv+0x44>)
   b8506:	b008      	add	sp, #32
   b8508:	bd10      	pop	{r4, pc}
   b850a:	bf00      	nop
   b850c:	2003e700 	.word	0x2003e700
   b8510:	2003e704 	.word	0x2003e704
   b8514:	000b8409 	.word	0x000b8409

000b8518 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b8518:	4770      	bx	lr

000b851a <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b851a:	7441      	strb	r1, [r0, #17]
}
   b851c:	4770      	bx	lr

000b851e <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b851e:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b8520:	7c00      	ldrb	r0, [r0, #16]
   b8522:	f7ff f907 	bl	b7734 <hal_usart_available_data_for_write>
}
   b8526:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b852a:	bd08      	pop	{r3, pc}

000b852c <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b852c:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b852e:	7c00      	ldrb	r0, [r0, #16]
   b8530:	f7ff f8d8 	bl	b76e4 <hal_usart_available>
}
   b8534:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b8538:	bd08      	pop	{r3, pc}

000b853a <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b853a:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b853c:	7c00      	ldrb	r0, [r0, #16]
   b853e:	f7ff f8e1 	bl	b7704 <hal_usart_peek>
}
   b8542:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b8546:	bd08      	pop	{r3, pc}

000b8548 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b8548:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b854a:	7c00      	ldrb	r0, [r0, #16]
   b854c:	f7ff f8d2 	bl	b76f4 <hal_usart_read>
}
   b8550:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b8554:	bd08      	pop	{r3, pc}

000b8556 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b8556:	7c00      	ldrb	r0, [r0, #16]
   b8558:	f7ff b8dc 	b.w	b7714 <hal_usart_flush>

000b855c <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b855c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b855e:	7c45      	ldrb	r5, [r0, #17]
{
   b8560:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b8562:	b12d      	cbz	r5, b8570 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b8564:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b8566:	b003      	add	sp, #12
   b8568:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b856c:	f7ff b8b2 	b.w	b76d4 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b8570:	7c00      	ldrb	r0, [r0, #16]
   b8572:	9101      	str	r1, [sp, #4]
   b8574:	f7ff f8de 	bl	b7734 <hal_usart_available_data_for_write>
   b8578:	2800      	cmp	r0, #0
   b857a:	9901      	ldr	r1, [sp, #4]
   b857c:	dcf2      	bgt.n	b8564 <_ZN11USARTSerial5writeEh+0x8>
}
   b857e:	4628      	mov	r0, r5
   b8580:	b003      	add	sp, #12
   b8582:	bd30      	pop	{r4, r5, pc}

000b8584 <_ZN11USARTSerialD0Ev>:
   b8584:	b510      	push	{r4, lr}
   b8586:	2114      	movs	r1, #20
   b8588:	4604      	mov	r4, r0
   b858a:	f7fb fd88 	bl	b409e <_ZdlPvj>
   b858e:	4620      	mov	r0, r4
   b8590:	bd10      	pop	{r4, pc}
	...

000b8594 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b8594:	b510      	push	{r4, lr}
   b8596:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b859a:	4604      	mov	r4, r0
   b859c:	4608      	mov	r0, r1
   b859e:	4611      	mov	r1, r2
   b85a0:	2200      	movs	r2, #0
   b85a2:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b85a6:	4b04      	ldr	r3, [pc, #16]	; (b85b8 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b85a8:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b85aa:	2301      	movs	r3, #1
  _serial = serial;
   b85ac:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b85ae:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b85b0:	f7ff f8c8 	bl	b7744 <hal_usart_init_ex>
}
   b85b4:	4620      	mov	r0, r4
   b85b6:	bd10      	pop	{r4, pc}
   b85b8:	000b9dc4 	.word	0x000b9dc4

000b85bc <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b85bc:	4770      	bx	lr

000b85be <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b85be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b85c0:	4606      	mov	r6, r0
   b85c2:	4615      	mov	r5, r2
   b85c4:	460c      	mov	r4, r1
   b85c6:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b85c8:	42bc      	cmp	r4, r7
   b85ca:	d006      	beq.n	b85da <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b85cc:	6833      	ldr	r3, [r6, #0]
   b85ce:	f814 1b01 	ldrb.w	r1, [r4], #1
   b85d2:	689b      	ldr	r3, [r3, #8]
   b85d4:	4630      	mov	r0, r6
   b85d6:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b85d8:	e7f6      	b.n	b85c8 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b85da:	4628      	mov	r0, r5
   b85dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b85de <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b85de:	7c00      	ldrb	r0, [r0, #16]
   b85e0:	2200      	movs	r2, #0
   b85e2:	f7ff b8cf 	b.w	b7784 <hal_i2c_write>

000b85e6 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b85e6:	7c00      	ldrb	r0, [r0, #16]
   b85e8:	2100      	movs	r1, #0
   b85ea:	f7ff b8d3 	b.w	b7794 <hal_i2c_available>

000b85ee <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b85ee:	7c00      	ldrb	r0, [r0, #16]
   b85f0:	2100      	movs	r1, #0
   b85f2:	f7ff b8d7 	b.w	b77a4 <hal_i2c_read>

000b85f6 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b85f6:	7c00      	ldrb	r0, [r0, #16]
   b85f8:	2100      	movs	r1, #0
   b85fa:	f7ff b8db 	b.w	b77b4 <hal_i2c_peek>

000b85fe <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b85fe:	7c00      	ldrb	r0, [r0, #16]
   b8600:	2100      	movs	r1, #0
   b8602:	f7ff b8df 	b.w	b77c4 <hal_i2c_flush>

000b8606 <_ZN7TwoWireD0Ev>:
   b8606:	b510      	push	{r4, lr}
   b8608:	2114      	movs	r1, #20
   b860a:	4604      	mov	r4, r0
   b860c:	f7fb fd47 	bl	b409e <_ZdlPvj>
   b8610:	4620      	mov	r0, r4
   b8612:	bd10      	pop	{r4, pc}

000b8614 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b8614:	b538      	push	{r3, r4, r5, lr}
   b8616:	4604      	mov	r4, r0
   b8618:	4615      	mov	r5, r2
   b861a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b861e:	2200      	movs	r2, #0
   b8620:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b8624:	4b09      	ldr	r3, [pc, #36]	; (b864c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x38>)
  _i2c = i2c;
   b8626:	7421      	strb	r1, [r4, #16]
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b8628:	4608      	mov	r0, r1
   b862a:	6023      	str	r3, [r4, #0]
  int result = hal_i2c_init(_i2c, &conf);
   b862c:	4629      	mov	r1, r5
   b862e:	f7ff f8d9 	bl	b77e4 <hal_i2c_init>
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b8632:	30bf      	adds	r0, #191	; 0xbf
   b8634:	d108      	bne.n	b8648 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
      (conf.flags & HAL_I2C_CONFIG_FLAG_FREEABLE)) {
   b8636:	696b      	ldr	r3, [r5, #20]
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b8638:	07db      	lsls	r3, r3, #31
   b863a:	d505      	bpl.n	b8648 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
    free(conf.rx_buffer);
   b863c:	6868      	ldr	r0, [r5, #4]
   b863e:	f7ff fa35 	bl	b7aac <free>
    free(conf.tx_buffer);
   b8642:	68e8      	ldr	r0, [r5, #12]
   b8644:	f7ff fa32 	bl	b7aac <free>
}
   b8648:	4620      	mov	r0, r4
   b864a:	bd38      	pop	{r3, r4, r5, pc}
   b864c:	000b9df4 	.word	0x000b9df4

000b8650 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   b8650:	2300      	movs	r3, #0
   b8652:	7c00      	ldrb	r0, [r0, #16]
   b8654:	461a      	mov	r2, r3
   b8656:	4619      	mov	r1, r3
   b8658:	f7ff b87c 	b.w	b7754 <hal_i2c_begin>

000b865c <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   b865c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   b865e:	2200      	movs	r2, #0
   b8660:	2314      	movs	r3, #20
   b8662:	e9cd 2201 	strd	r2, r2, [sp, #4]
   b8666:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   b866a:	780b      	ldrb	r3, [r1, #0]
   b866c:	f88d 3008 	strb.w	r3, [sp, #8]
   b8670:	684b      	ldr	r3, [r1, #4]
   b8672:	9303      	str	r3, [sp, #12]
   b8674:	68cb      	ldr	r3, [r1, #12]
   b8676:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   b8678:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   b867a:	7a0b      	ldrb	r3, [r1, #8]
   b867c:	9305      	str	r3, [sp, #20]
   b867e:	a901      	add	r1, sp, #4
   b8680:	f7ff f8b8 	bl	b77f4 <hal_i2c_request_ex>
}
   b8684:	b007      	add	sp, #28
   b8686:	f85d fb04 	ldr.w	pc, [sp], #4

000b868a <_ZN7TwoWire11requestFromEhjh>:
{
   b868a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   b868c:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   b868e:	f88d 1000 	strb.w	r1, [sp]
   b8692:	f04f 0164 	mov.w	r1, #100	; 0x64
   b8696:	9103      	str	r1, [sp, #12]
   b8698:	bf18      	it	ne
   b869a:	2301      	movne	r3, #1
   b869c:	4669      	mov	r1, sp
    size_ = size;
   b869e:	9201      	str	r2, [sp, #4]
   b86a0:	f88d 3008 	strb.w	r3, [sp, #8]
   b86a4:	f7ff ffda 	bl	b865c <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   b86a8:	b005      	add	sp, #20
   b86aa:	f85d fb04 	ldr.w	pc, [sp], #4

000b86ae <_ZN7TwoWire11requestFromEhj>:
  return requestFrom(address, quantity, (uint8_t)true);
   b86ae:	2301      	movs	r3, #1
   b86b0:	f7ff bfeb 	b.w	b868a <_ZN7TwoWire11requestFromEhjh>

000b86b4 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   b86b4:	7c00      	ldrb	r0, [r0, #16]
   b86b6:	2200      	movs	r2, #0
   b86b8:	f7ff b854 	b.w	b7764 <hal_i2c_begin_transmission>

000b86bc <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   b86bc:	b2c9      	uxtb	r1, r1
   b86be:	f7ff bff9 	b.w	b86b4 <_ZN7TwoWire17beginTransmissionEh>

000b86c2 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   b86c2:	7c00      	ldrb	r0, [r0, #16]
   b86c4:	2200      	movs	r2, #0
   b86c6:	f7ff b855 	b.w	b7774 <hal_i2c_end_transmission>

000b86ca <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   b86ca:	2101      	movs	r1, #1
   b86cc:	f7ff bff9 	b.w	b86c2 <_ZN7TwoWire15endTransmissionEh>

000b86d0 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b86d0:	2200      	movs	r2, #0
   b86d2:	6840      	ldr	r0, [r0, #4]
   b86d4:	4611      	mov	r1, r2
   b86d6:	f7ff b979 	b.w	b79cc <network_ready>

000b86da <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b86da:	2200      	movs	r2, #0
   b86dc:	6840      	ldr	r0, [r0, #4]
   b86de:	4611      	mov	r1, r2
   b86e0:	f7ff b994 	b.w	b7a0c <network_listening>

000b86e4 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b86e4:	2200      	movs	r2, #0
   b86e6:	6840      	ldr	r0, [r0, #4]
   b86e8:	4611      	mov	r1, r2
   b86ea:	f7ff b99f 	b.w	b7a2c <network_get_listen_timeout>

000b86ee <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b86ee:	6840      	ldr	r0, [r0, #4]
   b86f0:	2200      	movs	r2, #0
   b86f2:	f7ff b993 	b.w	b7a1c <network_set_listen_timeout>

000b86f6 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b86f6:	6840      	ldr	r0, [r0, #4]
   b86f8:	2200      	movs	r2, #0
   b86fa:	f081 0101 	eor.w	r1, r1, #1
   b86fe:	f7ff b97d 	b.w	b79fc <network_listen>

000b8702 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b8702:	2300      	movs	r3, #0
   b8704:	6840      	ldr	r0, [r0, #4]
   b8706:	461a      	mov	r2, r3
   b8708:	4619      	mov	r1, r3
   b870a:	f7ff b96f 	b.w	b79ec <network_off>

000b870e <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b870e:	2300      	movs	r3, #0
   b8710:	6840      	ldr	r0, [r0, #4]
   b8712:	461a      	mov	r2, r3
   b8714:	4619      	mov	r1, r3
   b8716:	f7ff b961 	b.w	b79dc <network_on>

000b871a <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b871a:	2200      	movs	r2, #0
   b871c:	6840      	ldr	r0, [r0, #4]
   b871e:	4611      	mov	r1, r2
   b8720:	f7ff b944 	b.w	b79ac <network_connecting>

000b8724 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b8724:	6840      	ldr	r0, [r0, #4]
   b8726:	2200      	movs	r2, #0
   b8728:	2102      	movs	r1, #2
   b872a:	f7ff b947 	b.w	b79bc <network_disconnect>

000b872e <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b872e:	2300      	movs	r3, #0
   b8730:	6840      	ldr	r0, [r0, #4]
   b8732:	461a      	mov	r2, r3
   b8734:	f7ff b932 	b.w	b799c <network_connect>

000b8738 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   b8738:	4b02      	ldr	r3, [pc, #8]	; (b8744 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   b873a:	2204      	movs	r2, #4
   b873c:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   b873e:	4a02      	ldr	r2, [pc, #8]	; (b8748 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   b8740:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   b8742:	4770      	bx	lr
   b8744:	2003e718 	.word	0x2003e718
   b8748:	000b9e1c 	.word	0x000b9e1c

000b874c <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b874c:	2300      	movs	r3, #0
   b874e:	6840      	ldr	r0, [r0, #4]
   b8750:	461a      	mov	r2, r3
   b8752:	f7ff b923 	b.w	b799c <network_connect>

000b8756 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b8756:	6840      	ldr	r0, [r0, #4]
   b8758:	2200      	movs	r2, #0
   b875a:	2102      	movs	r1, #2
   b875c:	f7ff b92e 	b.w	b79bc <network_disconnect>

000b8760 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b8760:	2200      	movs	r2, #0
   b8762:	6840      	ldr	r0, [r0, #4]
   b8764:	4611      	mov	r1, r2
   b8766:	f7ff b921 	b.w	b79ac <network_connecting>

000b876a <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b876a:	2200      	movs	r2, #0
   b876c:	6840      	ldr	r0, [r0, #4]
   b876e:	4611      	mov	r1, r2
   b8770:	f7ff b92c 	b.w	b79cc <network_ready>

000b8774 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b8774:	2300      	movs	r3, #0
   b8776:	6840      	ldr	r0, [r0, #4]
   b8778:	461a      	mov	r2, r3
   b877a:	4619      	mov	r1, r3
   b877c:	f7ff b92e 	b.w	b79dc <network_on>

000b8780 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b8780:	2300      	movs	r3, #0
   b8782:	6840      	ldr	r0, [r0, #4]
   b8784:	461a      	mov	r2, r3
   b8786:	4619      	mov	r1, r3
   b8788:	f7ff b930 	b.w	b79ec <network_off>

000b878c <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b878c:	6840      	ldr	r0, [r0, #4]
   b878e:	2100      	movs	r1, #0
   b8790:	f7ff b954 	b.w	b7a3c <network_is_on>

000b8794 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b8794:	6840      	ldr	r0, [r0, #4]
   b8796:	2100      	movs	r1, #0
   b8798:	f7ff b958 	b.w	b7a4c <network_is_off>

000b879c <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b879c:	6840      	ldr	r0, [r0, #4]
   b879e:	2200      	movs	r2, #0
   b87a0:	f081 0101 	eor.w	r1, r1, #1
   b87a4:	f7ff b92a 	b.w	b79fc <network_listen>

000b87a8 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b87a8:	6840      	ldr	r0, [r0, #4]
   b87aa:	2200      	movs	r2, #0
   b87ac:	f7ff b936 	b.w	b7a1c <network_set_listen_timeout>

000b87b0 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b87b0:	2200      	movs	r2, #0
   b87b2:	6840      	ldr	r0, [r0, #4]
   b87b4:	4611      	mov	r1, r2
   b87b6:	f7ff b939 	b.w	b7a2c <network_get_listen_timeout>

000b87ba <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b87ba:	2200      	movs	r2, #0
   b87bc:	6840      	ldr	r0, [r0, #4]
   b87be:	4611      	mov	r1, r2
   b87c0:	f7ff b924 	b.w	b7a0c <network_listening>

000b87c4 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b87c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b87c8:	b095      	sub	sp, #84	; 0x54
   b87ca:	4614      	mov	r4, r2
   b87cc:	460d      	mov	r5, r1
   b87ce:	4607      	mov	r7, r0
    IPAddress addr;
   b87d0:	f7ff fdda 	bl	b8388 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b87d4:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b87d6:	221c      	movs	r2, #28
   b87d8:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b87da:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b87dc:	f001 f816 	bl	b980c <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b87e0:	2340      	movs	r3, #64	; 0x40
   b87e2:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b87e4:	4620      	mov	r0, r4
   b87e6:	466b      	mov	r3, sp
   b87e8:	aa0c      	add	r2, sp, #48	; 0x30
   b87ea:	2100      	movs	r1, #0
   b87ec:	f7fe ff12 	bl	b7614 <netdb_getaddrinfo>
    if (!r) {
   b87f0:	4604      	mov	r4, r0
   b87f2:	2800      	cmp	r0, #0
   b87f4:	d14b      	bne.n	b888e <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b87f6:	4602      	mov	r2, r0
   b87f8:	2101      	movs	r1, #1
   b87fa:	6868      	ldr	r0, [r5, #4]
   b87fc:	f7ff f8e6 	bl	b79cc <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b8800:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b8802:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b8804:	4622      	mov	r2, r4
   b8806:	6868      	ldr	r0, [r5, #4]
   b8808:	f7ff f8e0 	bl	b79cc <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b880c:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b880e:	4681      	mov	r9, r0
        bool ok = false;
   b8810:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b8812:	2e00      	cmp	r6, #0
   b8814:	d03b      	beq.n	b888e <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b8816:	2900      	cmp	r1, #0
   b8818:	d139      	bne.n	b888e <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b881a:	6873      	ldr	r3, [r6, #4]
   b881c:	2b02      	cmp	r3, #2
   b881e:	d003      	beq.n	b8828 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b8820:	2b0a      	cmp	r3, #10
   b8822:	d011      	beq.n	b8848 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b8824:	69f6      	ldr	r6, [r6, #28]
   b8826:	e7f4      	b.n	b8812 <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b8828:	f1b8 0f00 	cmp.w	r8, #0
   b882c:	d0fa      	beq.n	b8824 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b882e:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b8830:	a806      	add	r0, sp, #24
   b8832:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b8834:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b8836:	f7ff fdd5 	bl	b83e4 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b883a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b883c:	1d3c      	adds	r4, r7, #4
   b883e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b8840:	682b      	ldr	r3, [r5, #0]
   b8842:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b8844:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b8846:	e7ed      	b.n	b8824 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b8848:	f1b9 0f00 	cmp.w	r9, #0
   b884c:	d0ea      	beq.n	b8824 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b884e:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b8850:	2210      	movs	r2, #16
   b8852:	a801      	add	r0, sp, #4
   b8854:	f000 ffda 	bl	b980c <memset>
                    a.v = 6;
   b8858:	2306      	movs	r3, #6
   b885a:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b885e:	ad01      	add	r5, sp, #4
   b8860:	f104 0308 	add.w	r3, r4, #8
   b8864:	3418      	adds	r4, #24
   b8866:	6818      	ldr	r0, [r3, #0]
   b8868:	6859      	ldr	r1, [r3, #4]
   b886a:	462a      	mov	r2, r5
   b886c:	c203      	stmia	r2!, {r0, r1}
   b886e:	3308      	adds	r3, #8
   b8870:	42a3      	cmp	r3, r4
   b8872:	4615      	mov	r5, r2
   b8874:	d1f7      	bne.n	b8866 <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b8876:	a901      	add	r1, sp, #4
   b8878:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b887a:	ad07      	add	r5, sp, #28
   b887c:	f7ff fd92 	bl	b83a4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b8880:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b8882:	1d3c      	adds	r4, r7, #4
   b8884:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b8886:	682b      	ldr	r3, [r5, #0]
   b8888:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b888a:	4649      	mov	r1, r9
   b888c:	e7ca      	b.n	b8824 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b888e:	9800      	ldr	r0, [sp, #0]
   b8890:	f7fe feb8 	bl	b7604 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b8894:	4638      	mov	r0, r7
   b8896:	b015      	add	sp, #84	; 0x54
   b8898:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b889c <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b889c:	4b02      	ldr	r3, [pc, #8]	; (b88a8 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b889e:	4a03      	ldr	r2, [pc, #12]	; (b88ac <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b88a0:	601a      	str	r2, [r3, #0]
   b88a2:	2200      	movs	r2, #0
   b88a4:	605a      	str	r2, [r3, #4]

} // spark
   b88a6:	4770      	bx	lr
   b88a8:	2003e720 	.word	0x2003e720
   b88ac:	000b9e58 	.word	0x000b9e58

000b88b0 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   b88b0:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   b88b2:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   b88b4:	d902      	bls.n	b88bc <pinAvailable+0xc>
    return false;
   b88b6:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   b88b8:	b002      	add	sp, #8
   b88ba:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   b88bc:	f1a0 030b 	sub.w	r3, r0, #11
   b88c0:	2b02      	cmp	r3, #2
   b88c2:	d81a      	bhi.n	b88fa <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b88c4:	4c17      	ldr	r4, [pc, #92]	; (b8924 <pinAvailable+0x74>)
   b88c6:	7821      	ldrb	r1, [r4, #0]
   b88c8:	f3bf 8f5b 	dmb	ish
   b88cc:	f011 0101 	ands.w	r1, r1, #1
   b88d0:	d10b      	bne.n	b88ea <pinAvailable+0x3a>
   b88d2:	4620      	mov	r0, r4
   b88d4:	9101      	str	r1, [sp, #4]
   b88d6:	f7fb fbe4 	bl	b40a2 <__cxa_guard_acquire>
   b88da:	9901      	ldr	r1, [sp, #4]
   b88dc:	b128      	cbz	r0, b88ea <pinAvailable+0x3a>
   b88de:	4812      	ldr	r0, [pc, #72]	; (b8928 <pinAvailable+0x78>)
   b88e0:	f7ff f960 	bl	b7ba4 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b88e4:	4620      	mov	r0, r4
   b88e6:	f7fb fbe1 	bl	b40ac <__cxa_guard_release>
   b88ea:	4b0f      	ldr	r3, [pc, #60]	; (b8928 <pinAvailable+0x78>)
   b88ec:	7818      	ldrb	r0, [r3, #0]
   b88ee:	f7fe ffa1 	bl	b7834 <hal_spi_is_enabled>
   b88f2:	2800      	cmp	r0, #0
   b88f4:	d1df      	bne.n	b88b6 <pinAvailable+0x6>
  return true; // 'pin' is available
   b88f6:	2001      	movs	r0, #1
   b88f8:	e7de      	b.n	b88b8 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   b88fa:	2801      	cmp	r0, #1
   b88fc:	d809      	bhi.n	b8912 <pinAvailable+0x62>
   b88fe:	f000 f89b 	bl	b8a38 <_Z19__fetch_global_Wirev>
   b8902:	2100      	movs	r1, #0
   b8904:	7c00      	ldrb	r0, [r0, #16]
   b8906:	f7fe ff65 	bl	b77d4 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   b890a:	f080 0001 	eor.w	r0, r0, #1
   b890e:	b2c0      	uxtb	r0, r0
   b8910:	e7d2      	b.n	b88b8 <pinAvailable+0x8>
   b8912:	3809      	subs	r0, #9
   b8914:	2801      	cmp	r0, #1
   b8916:	d8ee      	bhi.n	b88f6 <pinAvailable+0x46>
   b8918:	f000 f84e 	bl	b89b8 <_Z22__fetch_global_Serial1v>
   b891c:	7c00      	ldrb	r0, [r0, #16]
   b891e:	f7fe ff01 	bl	b7724 <hal_usart_is_enabled>
   b8922:	e7f2      	b.n	b890a <pinAvailable+0x5a>
   b8924:	2003e040 	.word	0x2003e040
   b8928:	2003e044 	.word	0x2003e044

000b892c <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b892c:	2823      	cmp	r0, #35	; 0x23
{
   b892e:	b538      	push	{r3, r4, r5, lr}
   b8930:	4604      	mov	r4, r0
   b8932:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b8934:	d80a      	bhi.n	b894c <pinMode+0x20>
   b8936:	29ff      	cmp	r1, #255	; 0xff
   b8938:	d008      	beq.n	b894c <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   b893a:	f7ff ffb9 	bl	b88b0 <pinAvailable>
   b893e:	b128      	cbz	r0, b894c <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   b8940:	4629      	mov	r1, r5
   b8942:	4620      	mov	r0, r4
}
   b8944:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   b8948:	f7fe be6c 	b.w	b7624 <HAL_Pin_Mode>
}
   b894c:	bd38      	pop	{r3, r4, r5, pc}

000b894e <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   b894e:	b538      	push	{r3, r4, r5, lr}
   b8950:	4604      	mov	r4, r0
   b8952:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   b8954:	f7fe fe6e 	bl	b7634 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   b8958:	28ff      	cmp	r0, #255	; 0xff
   b895a:	d010      	beq.n	b897e <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   b895c:	2806      	cmp	r0, #6
   b895e:	d804      	bhi.n	b896a <digitalWrite+0x1c>
   b8960:	234d      	movs	r3, #77	; 0x4d
   b8962:	fa23 f000 	lsr.w	r0, r3, r0
   b8966:	07c3      	lsls	r3, r0, #31
   b8968:	d409      	bmi.n	b897e <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   b896a:	4620      	mov	r0, r4
   b896c:	f7ff ffa0 	bl	b88b0 <pinAvailable>
   b8970:	b128      	cbz	r0, b897e <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   b8972:	4629      	mov	r1, r5
   b8974:	4620      	mov	r0, r4
}
   b8976:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   b897a:	f7fe be63 	b.w	b7644 <HAL_GPIO_Write>
}
   b897e:	bd38      	pop	{r3, r4, r5, pc}

000b8980 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b8980:	4770      	bx	lr
	...

000b8984 <_Z20acquireSerial1Bufferv>:
{
   b8984:	b538      	push	{r3, r4, r5, lr}
   b8986:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b8988:	2514      	movs	r5, #20
   b898a:	462a      	mov	r2, r5
   b898c:	2100      	movs	r1, #0
   b898e:	f000 ff3d 	bl	b980c <memset>
   b8992:	8025      	strh	r5, [r4, #0]
   b8994:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b8996:	4907      	ldr	r1, [pc, #28]	; (b89b4 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b8998:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b899a:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b899c:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b899e:	f000 f86f 	bl	b8a80 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b89a2:	4904      	ldr	r1, [pc, #16]	; (b89b4 <_Z20acquireSerial1Bufferv+0x30>)
    };
   b89a4:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b89a6:	4628      	mov	r0, r5
   b89a8:	f000 f86a 	bl	b8a80 <_ZnajRKSt9nothrow_t>
    };
   b89ac:	60e0      	str	r0, [r4, #12]
}
   b89ae:	4620      	mov	r0, r4
   b89b0:	bd38      	pop	{r3, r4, r5, pc}
   b89b2:	bf00      	nop
   b89b4:	000b9e8c 	.word	0x000b9e8c

000b89b8 <_Z22__fetch_global_Serial1v>:
{
   b89b8:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b89ba:	4d0e      	ldr	r5, [pc, #56]	; (b89f4 <_Z22__fetch_global_Serial1v+0x3c>)
   b89bc:	7829      	ldrb	r1, [r5, #0]
   b89be:	f3bf 8f5b 	dmb	ish
   b89c2:	f011 0401 	ands.w	r4, r1, #1
{
   b89c6:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b89c8:	d111      	bne.n	b89ee <_Z22__fetch_global_Serial1v+0x36>
   b89ca:	4628      	mov	r0, r5
   b89cc:	f7fb fb69 	bl	b40a2 <__cxa_guard_acquire>
   b89d0:	b168      	cbz	r0, b89ee <_Z22__fetch_global_Serial1v+0x36>
   b89d2:	a801      	add	r0, sp, #4
   b89d4:	f7ff ffd6 	bl	b8984 <_Z20acquireSerial1Bufferv>
   b89d8:	aa01      	add	r2, sp, #4
   b89da:	4621      	mov	r1, r4
   b89dc:	4806      	ldr	r0, [pc, #24]	; (b89f8 <_Z22__fetch_global_Serial1v+0x40>)
   b89de:	f7ff fdd9 	bl	b8594 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b89e2:	4628      	mov	r0, r5
   b89e4:	f7fb fb62 	bl	b40ac <__cxa_guard_release>
   b89e8:	4804      	ldr	r0, [pc, #16]	; (b89fc <_Z22__fetch_global_Serial1v+0x44>)
   b89ea:	f000 fee7 	bl	b97bc <atexit>
    return serial1;
}
   b89ee:	4802      	ldr	r0, [pc, #8]	; (b89f8 <_Z22__fetch_global_Serial1v+0x40>)
   b89f0:	b007      	add	sp, #28
   b89f2:	bd30      	pop	{r4, r5, pc}
   b89f4:	2003e728 	.word	0x2003e728
   b89f8:	2003e72c 	.word	0x2003e72c
   b89fc:	000b8981 	.word	0x000b8981

000b8a00 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b8a00:	4770      	bx	lr
	...

000b8a04 <_Z17acquireWireBufferv>:
{
   b8a04:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b8a06:	4b0a      	ldr	r3, [pc, #40]	; (b8a30 <_Z17acquireWireBufferv+0x2c>)
   b8a08:	6003      	str	r3, [r0, #0]
   b8a0a:	2301      	movs	r3, #1
{
   b8a0c:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b8a0e:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b8a10:	4908      	ldr	r1, [pc, #32]	; (b8a34 <_Z17acquireWireBufferv+0x30>)
   b8a12:	2020      	movs	r0, #32
   b8a14:	f000 f834 	bl	b8a80 <_ZnajRKSt9nothrow_t>
	};
   b8a18:	2520      	movs	r5, #32
   b8a1a:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b8a1c:	4905      	ldr	r1, [pc, #20]	; (b8a34 <_Z17acquireWireBufferv+0x30>)
	};
   b8a1e:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b8a20:	4628      	mov	r0, r5
   b8a22:	f000 f82d 	bl	b8a80 <_ZnajRKSt9nothrow_t>
	};
   b8a26:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
   b8a2a:	4620      	mov	r0, r4
   b8a2c:	bd38      	pop	{r3, r4, r5, pc}
   b8a2e:	bf00      	nop
   b8a30:	00010018 	.word	0x00010018
   b8a34:	000b9e8c 	.word	0x000b9e8c

000b8a38 <_Z19__fetch_global_Wirev>:
{
   b8a38:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b8a3a:	4d0e      	ldr	r5, [pc, #56]	; (b8a74 <_Z19__fetch_global_Wirev+0x3c>)
   b8a3c:	7829      	ldrb	r1, [r5, #0]
   b8a3e:	f3bf 8f5b 	dmb	ish
   b8a42:	f011 0401 	ands.w	r4, r1, #1
{
   b8a46:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b8a48:	d111      	bne.n	b8a6e <_Z19__fetch_global_Wirev+0x36>
   b8a4a:	4628      	mov	r0, r5
   b8a4c:	f7fb fb29 	bl	b40a2 <__cxa_guard_acquire>
   b8a50:	b168      	cbz	r0, b8a6e <_Z19__fetch_global_Wirev+0x36>
   b8a52:	4668      	mov	r0, sp
   b8a54:	f7ff ffd6 	bl	b8a04 <_Z17acquireWireBufferv>
   b8a58:	466a      	mov	r2, sp
   b8a5a:	4621      	mov	r1, r4
   b8a5c:	4806      	ldr	r0, [pc, #24]	; (b8a78 <_Z19__fetch_global_Wirev+0x40>)
   b8a5e:	f7ff fdd9 	bl	b8614 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b8a62:	4628      	mov	r0, r5
   b8a64:	f7fb fb22 	bl	b40ac <__cxa_guard_release>
   b8a68:	4804      	ldr	r0, [pc, #16]	; (b8a7c <_Z19__fetch_global_Wirev+0x44>)
   b8a6a:	f000 fea7 	bl	b97bc <atexit>
	return wire;
}
   b8a6e:	4802      	ldr	r0, [pc, #8]	; (b8a78 <_Z19__fetch_global_Wirev+0x40>)
   b8a70:	b007      	add	sp, #28
   b8a72:	bd30      	pop	{r4, r5, pc}
   b8a74:	2003e744 	.word	0x2003e744
   b8a78:	2003e748 	.word	0x2003e748
   b8a7c:	000b8a01 	.word	0x000b8a01

000b8a80 <_ZnajRKSt9nothrow_t>:
   b8a80:	f7fb bb0b 	b.w	b409a <_Znaj>

000b8a84 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>:
   b8a84:	68c3      	ldr	r3, [r0, #12]
   b8a86:	689a      	ldr	r2, [r3, #8]
   b8a88:	60c2      	str	r2, [r0, #12]
   b8a8a:	b510      	push	{r4, lr}
   b8a8c:	b102      	cbz	r2, b8a90 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0xc>
   b8a8e:	6050      	str	r0, [r2, #4]
   b8a90:	6842      	ldr	r2, [r0, #4]
   b8a92:	605a      	str	r2, [r3, #4]
   b8a94:	680c      	ldr	r4, [r1, #0]
   b8a96:	4284      	cmp	r4, r0
   b8a98:	d103      	bne.n	b8aa2 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0x1e>
   b8a9a:	600b      	str	r3, [r1, #0]
   b8a9c:	6098      	str	r0, [r3, #8]
   b8a9e:	6043      	str	r3, [r0, #4]
   b8aa0:	bd10      	pop	{r4, pc}
   b8aa2:	6891      	ldr	r1, [r2, #8]
   b8aa4:	4281      	cmp	r1, r0
   b8aa6:	bf0c      	ite	eq
   b8aa8:	6093      	streq	r3, [r2, #8]
   b8aaa:	60d3      	strne	r3, [r2, #12]
   b8aac:	e7f6      	b.n	b8a9c <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0x18>

000b8aae <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>:
   b8aae:	6883      	ldr	r3, [r0, #8]
   b8ab0:	68da      	ldr	r2, [r3, #12]
   b8ab2:	6082      	str	r2, [r0, #8]
   b8ab4:	b510      	push	{r4, lr}
   b8ab6:	b102      	cbz	r2, b8aba <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0xc>
   b8ab8:	6050      	str	r0, [r2, #4]
   b8aba:	6842      	ldr	r2, [r0, #4]
   b8abc:	605a      	str	r2, [r3, #4]
   b8abe:	680c      	ldr	r4, [r1, #0]
   b8ac0:	4284      	cmp	r4, r0
   b8ac2:	d103      	bne.n	b8acc <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0x1e>
   b8ac4:	600b      	str	r3, [r1, #0]
   b8ac6:	60d8      	str	r0, [r3, #12]
   b8ac8:	6043      	str	r3, [r0, #4]
   b8aca:	bd10      	pop	{r4, pc}
   b8acc:	68d1      	ldr	r1, [r2, #12]
   b8ace:	4281      	cmp	r1, r0
   b8ad0:	bf0c      	ite	eq
   b8ad2:	60d3      	streq	r3, [r2, #12]
   b8ad4:	6093      	strne	r3, [r2, #8]
   b8ad6:	e7f6      	b.n	b8ac6 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0x18>

000b8ad8 <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base>:
   b8ad8:	68c3      	ldr	r3, [r0, #12]
   b8ada:	b123      	cbz	r3, b8ae6 <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base+0xe>
   b8adc:	4618      	mov	r0, r3
   b8ade:	689b      	ldr	r3, [r3, #8]
   b8ae0:	2b00      	cmp	r3, #0
   b8ae2:	d1fb      	bne.n	b8adc <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base+0x4>
   b8ae4:	4770      	bx	lr
   b8ae6:	6843      	ldr	r3, [r0, #4]
   b8ae8:	68da      	ldr	r2, [r3, #12]
   b8aea:	4282      	cmp	r2, r0
   b8aec:	d102      	bne.n	b8af4 <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base+0x1c>
   b8aee:	4618      	mov	r0, r3
   b8af0:	685b      	ldr	r3, [r3, #4]
   b8af2:	e7f9      	b.n	b8ae8 <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base+0x10>
   b8af4:	68c2      	ldr	r2, [r0, #12]
   b8af6:	4293      	cmp	r3, r2
   b8af8:	bf18      	it	ne
   b8afa:	4618      	movne	r0, r3
   b8afc:	4770      	bx	lr

000b8afe <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base>:
   b8afe:	7803      	ldrb	r3, [r0, #0]
   b8b00:	b933      	cbnz	r3, b8b10 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x12>
   b8b02:	6843      	ldr	r3, [r0, #4]
   b8b04:	685b      	ldr	r3, [r3, #4]
   b8b06:	4283      	cmp	r3, r0
   b8b08:	d102      	bne.n	b8b10 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x12>
   b8b0a:	68db      	ldr	r3, [r3, #12]
   b8b0c:	4618      	mov	r0, r3
   b8b0e:	4770      	bx	lr
   b8b10:	6882      	ldr	r2, [r0, #8]
   b8b12:	b122      	cbz	r2, b8b1e <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x20>
   b8b14:	4613      	mov	r3, r2
   b8b16:	68d2      	ldr	r2, [r2, #12]
   b8b18:	2a00      	cmp	r2, #0
   b8b1a:	d1fb      	bne.n	b8b14 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x16>
   b8b1c:	e7f6      	b.n	b8b0c <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0xe>
   b8b1e:	6843      	ldr	r3, [r0, #4]
   b8b20:	689a      	ldr	r2, [r3, #8]
   b8b22:	4282      	cmp	r2, r0
   b8b24:	d1f2      	bne.n	b8b0c <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0xe>
   b8b26:	4618      	mov	r0, r3
   b8b28:	685b      	ldr	r3, [r3, #4]
   b8b2a:	e7f9      	b.n	b8b20 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x22>

000b8b2c <_ZSt18_Rb_tree_incrementPKSt18_Rb_tree_node_base>:
   b8b2c:	f7ff bfd4 	b.w	b8ad8 <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base>

000b8b30 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>:
   b8b30:	f7ff bfe5 	b.w	b8afe <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base>

000b8b34 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>:
   b8b34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b8b38:	461e      	mov	r6, r3
   b8b3a:	f103 0804 	add.w	r8, r3, #4
   b8b3e:	2300      	movs	r3, #0
   b8b40:	e9c1 3302 	strd	r3, r3, [r1, #8]
   b8b44:	460c      	mov	r4, r1
   b8b46:	604a      	str	r2, [r1, #4]
   b8b48:	700b      	strb	r3, [r1, #0]
   b8b4a:	b300      	cbz	r0, b8b8e <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x5a>
   b8b4c:	4296      	cmp	r6, r2
   b8b4e:	6091      	str	r1, [r2, #8]
   b8b50:	d118      	bne.n	b8b84 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x50>
   b8b52:	6071      	str	r1, [r6, #4]
   b8b54:	60f4      	str	r4, [r6, #12]
   b8b56:	2701      	movs	r7, #1
   b8b58:	f04f 0900 	mov.w	r9, #0
   b8b5c:	6873      	ldr	r3, [r6, #4]
   b8b5e:	42a3      	cmp	r3, r4
   b8b60:	d03f      	beq.n	b8be2 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0xae>
   b8b62:	6860      	ldr	r0, [r4, #4]
   b8b64:	7802      	ldrb	r2, [r0, #0]
   b8b66:	2a00      	cmp	r2, #0
   b8b68:	d13b      	bne.n	b8be2 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0xae>
   b8b6a:	6845      	ldr	r5, [r0, #4]
   b8b6c:	68ab      	ldr	r3, [r5, #8]
   b8b6e:	4298      	cmp	r0, r3
   b8b70:	d123      	bne.n	b8bba <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x86>
   b8b72:	68eb      	ldr	r3, [r5, #12]
   b8b74:	b183      	cbz	r3, b8b98 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x64>
   b8b76:	781a      	ldrb	r2, [r3, #0]
   b8b78:	b972      	cbnz	r2, b8b98 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x64>
   b8b7a:	7007      	strb	r7, [r0, #0]
   b8b7c:	701f      	strb	r7, [r3, #0]
   b8b7e:	702a      	strb	r2, [r5, #0]
   b8b80:	462c      	mov	r4, r5
   b8b82:	e7eb      	b.n	b8b5c <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x28>
   b8b84:	68b3      	ldr	r3, [r6, #8]
   b8b86:	4293      	cmp	r3, r2
   b8b88:	d1e5      	bne.n	b8b56 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x22>
   b8b8a:	60b1      	str	r1, [r6, #8]
   b8b8c:	e7e3      	b.n	b8b56 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x22>
   b8b8e:	60d1      	str	r1, [r2, #12]
   b8b90:	68f3      	ldr	r3, [r6, #12]
   b8b92:	4293      	cmp	r3, r2
   b8b94:	d1df      	bne.n	b8b56 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x22>
   b8b96:	e7dd      	b.n	b8b54 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x20>
   b8b98:	68c3      	ldr	r3, [r0, #12]
   b8b9a:	42a3      	cmp	r3, r4
   b8b9c:	d103      	bne.n	b8ba6 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x72>
   b8b9e:	4641      	mov	r1, r8
   b8ba0:	f7ff ff70 	bl	b8a84 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>
   b8ba4:	4604      	mov	r4, r0
   b8ba6:	6863      	ldr	r3, [r4, #4]
   b8ba8:	4641      	mov	r1, r8
   b8baa:	701f      	strb	r7, [r3, #0]
   b8bac:	4628      	mov	r0, r5
   b8bae:	f885 9000 	strb.w	r9, [r5]
   b8bb2:	f7ff ff7c 	bl	b8aae <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>
   b8bb6:	4625      	mov	r5, r4
   b8bb8:	e7e2      	b.n	b8b80 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x4c>
   b8bba:	b113      	cbz	r3, b8bc2 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x8e>
   b8bbc:	781a      	ldrb	r2, [r3, #0]
   b8bbe:	2a00      	cmp	r2, #0
   b8bc0:	d0db      	beq.n	b8b7a <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x46>
   b8bc2:	6883      	ldr	r3, [r0, #8]
   b8bc4:	42a3      	cmp	r3, r4
   b8bc6:	d103      	bne.n	b8bd0 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x9c>
   b8bc8:	4641      	mov	r1, r8
   b8bca:	f7ff ff70 	bl	b8aae <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>
   b8bce:	4604      	mov	r4, r0
   b8bd0:	6863      	ldr	r3, [r4, #4]
   b8bd2:	4641      	mov	r1, r8
   b8bd4:	701f      	strb	r7, [r3, #0]
   b8bd6:	4628      	mov	r0, r5
   b8bd8:	f885 9000 	strb.w	r9, [r5]
   b8bdc:	f7ff ff52 	bl	b8a84 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>
   b8be0:	e7e9      	b.n	b8bb6 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x82>
   b8be2:	2201      	movs	r2, #1
   b8be4:	701a      	strb	r2, [r3, #0]
   b8be6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000b8bea <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_>:
   b8bea:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   b8bee:	460f      	mov	r7, r1
   b8bf0:	e9d0 6102 	ldrd	r6, r1, [r0, #8]
   b8bf4:	4604      	mov	r4, r0
   b8bf6:	2e00      	cmp	r6, #0
   b8bf8:	d03e      	beq.n	b8c78 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x8e>
   b8bfa:	2900      	cmp	r1, #0
   b8bfc:	d03d      	beq.n	b8c7a <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x90>
   b8bfe:	460a      	mov	r2, r1
   b8c00:	4613      	mov	r3, r2
   b8c02:	6892      	ldr	r2, [r2, #8]
   b8c04:	2a00      	cmp	r2, #0
   b8c06:	d1fb      	bne.n	b8c00 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x16>
   b8c08:	42a3      	cmp	r3, r4
   b8c0a:	68da      	ldr	r2, [r3, #12]
   b8c0c:	d04b      	beq.n	b8ca6 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0xbc>
   b8c0e:	4299      	cmp	r1, r3
   b8c10:	6073      	str	r3, [r6, #4]
   b8c12:	609e      	str	r6, [r3, #8]
   b8c14:	d027      	beq.n	b8c66 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x7c>
   b8c16:	685d      	ldr	r5, [r3, #4]
   b8c18:	b102      	cbz	r2, b8c1c <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x32>
   b8c1a:	6055      	str	r5, [r2, #4]
   b8c1c:	6858      	ldr	r0, [r3, #4]
   b8c1e:	6082      	str	r2, [r0, #8]
   b8c20:	60d9      	str	r1, [r3, #12]
   b8c22:	68e1      	ldr	r1, [r4, #12]
   b8c24:	604b      	str	r3, [r1, #4]
   b8c26:	6879      	ldr	r1, [r7, #4]
   b8c28:	42a1      	cmp	r1, r4
   b8c2a:	d11e      	bne.n	b8c6a <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x80>
   b8c2c:	607b      	str	r3, [r7, #4]
   b8c2e:	6861      	ldr	r1, [r4, #4]
   b8c30:	7820      	ldrb	r0, [r4, #0]
   b8c32:	6059      	str	r1, [r3, #4]
   b8c34:	7819      	ldrb	r1, [r3, #0]
   b8c36:	7018      	strb	r0, [r3, #0]
   b8c38:	4616      	mov	r6, r2
   b8c3a:	7021      	strb	r1, [r4, #0]
   b8c3c:	7823      	ldrb	r3, [r4, #0]
   b8c3e:	b173      	cbz	r3, b8c5e <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x74>
   b8c40:	1d39      	adds	r1, r7, #4
   b8c42:	f04f 0800 	mov.w	r8, #0
   b8c46:	f04f 0901 	mov.w	r9, #1
   b8c4a:	687b      	ldr	r3, [r7, #4]
   b8c4c:	42b3      	cmp	r3, r6
   b8c4e:	d07b      	beq.n	b8d48 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x15e>
   b8c50:	2e00      	cmp	r6, #0
   b8c52:	d03f      	beq.n	b8cd4 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0xea>
   b8c54:	7833      	ldrb	r3, [r6, #0]
   b8c56:	2b01      	cmp	r3, #1
   b8c58:	d03c      	beq.n	b8cd4 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0xea>
   b8c5a:	2301      	movs	r3, #1
   b8c5c:	7033      	strb	r3, [r6, #0]
   b8c5e:	4620      	mov	r0, r4
   b8c60:	b003      	add	sp, #12
   b8c62:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b8c66:	461d      	mov	r5, r3
   b8c68:	e7dd      	b.n	b8c26 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x3c>
   b8c6a:	6861      	ldr	r1, [r4, #4]
   b8c6c:	6888      	ldr	r0, [r1, #8]
   b8c6e:	42a0      	cmp	r0, r4
   b8c70:	bf0c      	ite	eq
   b8c72:	608b      	streq	r3, [r1, #8]
   b8c74:	60cb      	strne	r3, [r1, #12]
   b8c76:	e7da      	b.n	b8c2e <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x44>
   b8c78:	460e      	mov	r6, r1
   b8c7a:	6865      	ldr	r5, [r4, #4]
   b8c7c:	b106      	cbz	r6, b8c80 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x96>
   b8c7e:	6075      	str	r5, [r6, #4]
   b8c80:	687b      	ldr	r3, [r7, #4]
   b8c82:	42a3      	cmp	r3, r4
   b8c84:	d111      	bne.n	b8caa <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0xc0>
   b8c86:	607e      	str	r6, [r7, #4]
   b8c88:	68bb      	ldr	r3, [r7, #8]
   b8c8a:	42a3      	cmp	r3, r4
   b8c8c:	d103      	bne.n	b8c96 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0xac>
   b8c8e:	68e3      	ldr	r3, [r4, #12]
   b8c90:	b993      	cbnz	r3, b8cb8 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0xce>
   b8c92:	6863      	ldr	r3, [r4, #4]
   b8c94:	60bb      	str	r3, [r7, #8]
   b8c96:	68fb      	ldr	r3, [r7, #12]
   b8c98:	42a3      	cmp	r3, r4
   b8c9a:	d1cf      	bne.n	b8c3c <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x52>
   b8c9c:	68a3      	ldr	r3, [r4, #8]
   b8c9e:	b993      	cbnz	r3, b8cc6 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0xdc>
   b8ca0:	6863      	ldr	r3, [r4, #4]
   b8ca2:	60fb      	str	r3, [r7, #12]
   b8ca4:	e7ca      	b.n	b8c3c <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x52>
   b8ca6:	4616      	mov	r6, r2
   b8ca8:	e7e7      	b.n	b8c7a <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x90>
   b8caa:	6863      	ldr	r3, [r4, #4]
   b8cac:	689a      	ldr	r2, [r3, #8]
   b8cae:	42a2      	cmp	r2, r4
   b8cb0:	bf0c      	ite	eq
   b8cb2:	609e      	streq	r6, [r3, #8]
   b8cb4:	60de      	strne	r6, [r3, #12]
   b8cb6:	e7e7      	b.n	b8c88 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x9e>
   b8cb8:	4633      	mov	r3, r6
   b8cba:	461a      	mov	r2, r3
   b8cbc:	689b      	ldr	r3, [r3, #8]
   b8cbe:	2b00      	cmp	r3, #0
   b8cc0:	d1fb      	bne.n	b8cba <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0xd0>
   b8cc2:	60ba      	str	r2, [r7, #8]
   b8cc4:	e7e7      	b.n	b8c96 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0xac>
   b8cc6:	4633      	mov	r3, r6
   b8cc8:	461a      	mov	r2, r3
   b8cca:	68db      	ldr	r3, [r3, #12]
   b8ccc:	2b00      	cmp	r3, #0
   b8cce:	d1fb      	bne.n	b8cc8 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0xde>
   b8cd0:	60fa      	str	r2, [r7, #12]
   b8cd2:	e7b3      	b.n	b8c3c <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x52>
   b8cd4:	68a8      	ldr	r0, [r5, #8]
   b8cd6:	42b0      	cmp	r0, r6
   b8cd8:	d139      	bne.n	b8d4e <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x164>
   b8cda:	68e8      	ldr	r0, [r5, #12]
   b8cdc:	7803      	ldrb	r3, [r0, #0]
   b8cde:	b943      	cbnz	r3, b8cf2 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x108>
   b8ce0:	f880 9000 	strb.w	r9, [r0]
   b8ce4:	4628      	mov	r0, r5
   b8ce6:	702b      	strb	r3, [r5, #0]
   b8ce8:	9101      	str	r1, [sp, #4]
   b8cea:	f7ff fecb 	bl	b8a84 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>
   b8cee:	68e8      	ldr	r0, [r5, #12]
   b8cf0:	9901      	ldr	r1, [sp, #4]
   b8cf2:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
   b8cf6:	b122      	cbz	r2, b8d02 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x118>
   b8cf8:	f892 c000 	ldrb.w	ip, [r2]
   b8cfc:	f1bc 0f01 	cmp.w	ip, #1
   b8d00:	d10b      	bne.n	b8d1a <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x130>
   b8d02:	b123      	cbz	r3, b8d0e <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x124>
   b8d04:	f893 c000 	ldrb.w	ip, [r3]
   b8d08:	f1bc 0f01 	cmp.w	ip, #1
   b8d0c:	d105      	bne.n	b8d1a <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x130>
   b8d0e:	686b      	ldr	r3, [r5, #4]
   b8d10:	f880 8000 	strb.w	r8, [r0]
   b8d14:	462e      	mov	r6, r5
   b8d16:	461d      	mov	r5, r3
   b8d18:	e797      	b.n	b8c4a <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x60>
   b8d1a:	b113      	cbz	r3, b8d22 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x138>
   b8d1c:	781b      	ldrb	r3, [r3, #0]
   b8d1e:	2b01      	cmp	r3, #1
   b8d20:	d108      	bne.n	b8d34 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x14a>
   b8d22:	2301      	movs	r3, #1
   b8d24:	7013      	strb	r3, [r2, #0]
   b8d26:	2300      	movs	r3, #0
   b8d28:	7003      	strb	r3, [r0, #0]
   b8d2a:	9101      	str	r1, [sp, #4]
   b8d2c:	f7ff febf 	bl	b8aae <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>
   b8d30:	68e8      	ldr	r0, [r5, #12]
   b8d32:	9901      	ldr	r1, [sp, #4]
   b8d34:	782b      	ldrb	r3, [r5, #0]
   b8d36:	7003      	strb	r3, [r0, #0]
   b8d38:	68c3      	ldr	r3, [r0, #12]
   b8d3a:	2201      	movs	r2, #1
   b8d3c:	702a      	strb	r2, [r5, #0]
   b8d3e:	b103      	cbz	r3, b8d42 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x158>
   b8d40:	701a      	strb	r2, [r3, #0]
   b8d42:	4628      	mov	r0, r5
   b8d44:	f7ff fe9e 	bl	b8a84 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>
   b8d48:	2e00      	cmp	r6, #0
   b8d4a:	d186      	bne.n	b8c5a <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x70>
   b8d4c:	e787      	b.n	b8c5e <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x74>
   b8d4e:	7803      	ldrb	r3, [r0, #0]
   b8d50:	b943      	cbnz	r3, b8d64 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x17a>
   b8d52:	f880 9000 	strb.w	r9, [r0]
   b8d56:	4628      	mov	r0, r5
   b8d58:	702b      	strb	r3, [r5, #0]
   b8d5a:	9101      	str	r1, [sp, #4]
   b8d5c:	f7ff fea7 	bl	b8aae <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>
   b8d60:	68a8      	ldr	r0, [r5, #8]
   b8d62:	9901      	ldr	r1, [sp, #4]
   b8d64:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
   b8d68:	b122      	cbz	r2, b8d74 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x18a>
   b8d6a:	f892 c000 	ldrb.w	ip, [r2]
   b8d6e:	f1bc 0f01 	cmp.w	ip, #1
   b8d72:	d106      	bne.n	b8d82 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x198>
   b8d74:	2b00      	cmp	r3, #0
   b8d76:	d0ca      	beq.n	b8d0e <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x124>
   b8d78:	f893 c000 	ldrb.w	ip, [r3]
   b8d7c:	f1bc 0f01 	cmp.w	ip, #1
   b8d80:	d0c5      	beq.n	b8d0e <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x124>
   b8d82:	b113      	cbz	r3, b8d8a <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x1a0>
   b8d84:	781b      	ldrb	r3, [r3, #0]
   b8d86:	2b01      	cmp	r3, #1
   b8d88:	d108      	bne.n	b8d9c <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x1b2>
   b8d8a:	2301      	movs	r3, #1
   b8d8c:	7013      	strb	r3, [r2, #0]
   b8d8e:	2300      	movs	r3, #0
   b8d90:	7003      	strb	r3, [r0, #0]
   b8d92:	9101      	str	r1, [sp, #4]
   b8d94:	f7ff fe76 	bl	b8a84 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>
   b8d98:	68a8      	ldr	r0, [r5, #8]
   b8d9a:	9901      	ldr	r1, [sp, #4]
   b8d9c:	782b      	ldrb	r3, [r5, #0]
   b8d9e:	7003      	strb	r3, [r0, #0]
   b8da0:	6883      	ldr	r3, [r0, #8]
   b8da2:	2201      	movs	r2, #1
   b8da4:	702a      	strb	r2, [r5, #0]
   b8da6:	b103      	cbz	r3, b8daa <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x1c0>
   b8da8:	701a      	strb	r2, [r3, #0]
   b8daa:	4628      	mov	r0, r5
   b8dac:	f7ff fe7f 	bl	b8aae <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>
   b8db0:	e7ca      	b.n	b8d48 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x15e>
	...

000b8db4 <__aeabi_drsub>:
   b8db4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   b8db8:	e002      	b.n	b8dc0 <__adddf3>
   b8dba:	bf00      	nop

000b8dbc <__aeabi_dsub>:
   b8dbc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000b8dc0 <__adddf3>:
   b8dc0:	b530      	push	{r4, r5, lr}
   b8dc2:	ea4f 0441 	mov.w	r4, r1, lsl #1
   b8dc6:	ea4f 0543 	mov.w	r5, r3, lsl #1
   b8dca:	ea94 0f05 	teq	r4, r5
   b8dce:	bf08      	it	eq
   b8dd0:	ea90 0f02 	teqeq	r0, r2
   b8dd4:	bf1f      	itttt	ne
   b8dd6:	ea54 0c00 	orrsne.w	ip, r4, r0
   b8dda:	ea55 0c02 	orrsne.w	ip, r5, r2
   b8dde:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   b8de2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b8de6:	f000 80e2 	beq.w	b8fae <__adddf3+0x1ee>
   b8dea:	ea4f 5454 	mov.w	r4, r4, lsr #21
   b8dee:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   b8df2:	bfb8      	it	lt
   b8df4:	426d      	neglt	r5, r5
   b8df6:	dd0c      	ble.n	b8e12 <__adddf3+0x52>
   b8df8:	442c      	add	r4, r5
   b8dfa:	ea80 0202 	eor.w	r2, r0, r2
   b8dfe:	ea81 0303 	eor.w	r3, r1, r3
   b8e02:	ea82 0000 	eor.w	r0, r2, r0
   b8e06:	ea83 0101 	eor.w	r1, r3, r1
   b8e0a:	ea80 0202 	eor.w	r2, r0, r2
   b8e0e:	ea81 0303 	eor.w	r3, r1, r3
   b8e12:	2d36      	cmp	r5, #54	; 0x36
   b8e14:	bf88      	it	hi
   b8e16:	bd30      	pophi	{r4, r5, pc}
   b8e18:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b8e1c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b8e20:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   b8e24:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   b8e28:	d002      	beq.n	b8e30 <__adddf3+0x70>
   b8e2a:	4240      	negs	r0, r0
   b8e2c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b8e30:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   b8e34:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b8e38:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   b8e3c:	d002      	beq.n	b8e44 <__adddf3+0x84>
   b8e3e:	4252      	negs	r2, r2
   b8e40:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b8e44:	ea94 0f05 	teq	r4, r5
   b8e48:	f000 80a7 	beq.w	b8f9a <__adddf3+0x1da>
   b8e4c:	f1a4 0401 	sub.w	r4, r4, #1
   b8e50:	f1d5 0e20 	rsbs	lr, r5, #32
   b8e54:	db0d      	blt.n	b8e72 <__adddf3+0xb2>
   b8e56:	fa02 fc0e 	lsl.w	ip, r2, lr
   b8e5a:	fa22 f205 	lsr.w	r2, r2, r5
   b8e5e:	1880      	adds	r0, r0, r2
   b8e60:	f141 0100 	adc.w	r1, r1, #0
   b8e64:	fa03 f20e 	lsl.w	r2, r3, lr
   b8e68:	1880      	adds	r0, r0, r2
   b8e6a:	fa43 f305 	asr.w	r3, r3, r5
   b8e6e:	4159      	adcs	r1, r3
   b8e70:	e00e      	b.n	b8e90 <__adddf3+0xd0>
   b8e72:	f1a5 0520 	sub.w	r5, r5, #32
   b8e76:	f10e 0e20 	add.w	lr, lr, #32
   b8e7a:	2a01      	cmp	r2, #1
   b8e7c:	fa03 fc0e 	lsl.w	ip, r3, lr
   b8e80:	bf28      	it	cs
   b8e82:	f04c 0c02 	orrcs.w	ip, ip, #2
   b8e86:	fa43 f305 	asr.w	r3, r3, r5
   b8e8a:	18c0      	adds	r0, r0, r3
   b8e8c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   b8e90:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b8e94:	d507      	bpl.n	b8ea6 <__adddf3+0xe6>
   b8e96:	f04f 0e00 	mov.w	lr, #0
   b8e9a:	f1dc 0c00 	rsbs	ip, ip, #0
   b8e9e:	eb7e 0000 	sbcs.w	r0, lr, r0
   b8ea2:	eb6e 0101 	sbc.w	r1, lr, r1
   b8ea6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   b8eaa:	d31b      	bcc.n	b8ee4 <__adddf3+0x124>
   b8eac:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   b8eb0:	d30c      	bcc.n	b8ecc <__adddf3+0x10c>
   b8eb2:	0849      	lsrs	r1, r1, #1
   b8eb4:	ea5f 0030 	movs.w	r0, r0, rrx
   b8eb8:	ea4f 0c3c 	mov.w	ip, ip, rrx
   b8ebc:	f104 0401 	add.w	r4, r4, #1
   b8ec0:	ea4f 5244 	mov.w	r2, r4, lsl #21
   b8ec4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   b8ec8:	f080 809a 	bcs.w	b9000 <__adddf3+0x240>
   b8ecc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   b8ed0:	bf08      	it	eq
   b8ed2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b8ed6:	f150 0000 	adcs.w	r0, r0, #0
   b8eda:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b8ede:	ea41 0105 	orr.w	r1, r1, r5
   b8ee2:	bd30      	pop	{r4, r5, pc}
   b8ee4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   b8ee8:	4140      	adcs	r0, r0
   b8eea:	eb41 0101 	adc.w	r1, r1, r1
   b8eee:	3c01      	subs	r4, #1
   b8ef0:	bf28      	it	cs
   b8ef2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   b8ef6:	d2e9      	bcs.n	b8ecc <__adddf3+0x10c>
   b8ef8:	f091 0f00 	teq	r1, #0
   b8efc:	bf04      	itt	eq
   b8efe:	4601      	moveq	r1, r0
   b8f00:	2000      	moveq	r0, #0
   b8f02:	fab1 f381 	clz	r3, r1
   b8f06:	bf08      	it	eq
   b8f08:	3320      	addeq	r3, #32
   b8f0a:	f1a3 030b 	sub.w	r3, r3, #11
   b8f0e:	f1b3 0220 	subs.w	r2, r3, #32
   b8f12:	da0c      	bge.n	b8f2e <__adddf3+0x16e>
   b8f14:	320c      	adds	r2, #12
   b8f16:	dd08      	ble.n	b8f2a <__adddf3+0x16a>
   b8f18:	f102 0c14 	add.w	ip, r2, #20
   b8f1c:	f1c2 020c 	rsb	r2, r2, #12
   b8f20:	fa01 f00c 	lsl.w	r0, r1, ip
   b8f24:	fa21 f102 	lsr.w	r1, r1, r2
   b8f28:	e00c      	b.n	b8f44 <__adddf3+0x184>
   b8f2a:	f102 0214 	add.w	r2, r2, #20
   b8f2e:	bfd8      	it	le
   b8f30:	f1c2 0c20 	rsble	ip, r2, #32
   b8f34:	fa01 f102 	lsl.w	r1, r1, r2
   b8f38:	fa20 fc0c 	lsr.w	ip, r0, ip
   b8f3c:	bfdc      	itt	le
   b8f3e:	ea41 010c 	orrle.w	r1, r1, ip
   b8f42:	4090      	lslle	r0, r2
   b8f44:	1ae4      	subs	r4, r4, r3
   b8f46:	bfa2      	ittt	ge
   b8f48:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   b8f4c:	4329      	orrge	r1, r5
   b8f4e:	bd30      	popge	{r4, r5, pc}
   b8f50:	ea6f 0404 	mvn.w	r4, r4
   b8f54:	3c1f      	subs	r4, #31
   b8f56:	da1c      	bge.n	b8f92 <__adddf3+0x1d2>
   b8f58:	340c      	adds	r4, #12
   b8f5a:	dc0e      	bgt.n	b8f7a <__adddf3+0x1ba>
   b8f5c:	f104 0414 	add.w	r4, r4, #20
   b8f60:	f1c4 0220 	rsb	r2, r4, #32
   b8f64:	fa20 f004 	lsr.w	r0, r0, r4
   b8f68:	fa01 f302 	lsl.w	r3, r1, r2
   b8f6c:	ea40 0003 	orr.w	r0, r0, r3
   b8f70:	fa21 f304 	lsr.w	r3, r1, r4
   b8f74:	ea45 0103 	orr.w	r1, r5, r3
   b8f78:	bd30      	pop	{r4, r5, pc}
   b8f7a:	f1c4 040c 	rsb	r4, r4, #12
   b8f7e:	f1c4 0220 	rsb	r2, r4, #32
   b8f82:	fa20 f002 	lsr.w	r0, r0, r2
   b8f86:	fa01 f304 	lsl.w	r3, r1, r4
   b8f8a:	ea40 0003 	orr.w	r0, r0, r3
   b8f8e:	4629      	mov	r1, r5
   b8f90:	bd30      	pop	{r4, r5, pc}
   b8f92:	fa21 f004 	lsr.w	r0, r1, r4
   b8f96:	4629      	mov	r1, r5
   b8f98:	bd30      	pop	{r4, r5, pc}
   b8f9a:	f094 0f00 	teq	r4, #0
   b8f9e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   b8fa2:	bf06      	itte	eq
   b8fa4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   b8fa8:	3401      	addeq	r4, #1
   b8faa:	3d01      	subne	r5, #1
   b8fac:	e74e      	b.n	b8e4c <__adddf3+0x8c>
   b8fae:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b8fb2:	bf18      	it	ne
   b8fb4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b8fb8:	d029      	beq.n	b900e <__adddf3+0x24e>
   b8fba:	ea94 0f05 	teq	r4, r5
   b8fbe:	bf08      	it	eq
   b8fc0:	ea90 0f02 	teqeq	r0, r2
   b8fc4:	d005      	beq.n	b8fd2 <__adddf3+0x212>
   b8fc6:	ea54 0c00 	orrs.w	ip, r4, r0
   b8fca:	bf04      	itt	eq
   b8fcc:	4619      	moveq	r1, r3
   b8fce:	4610      	moveq	r0, r2
   b8fd0:	bd30      	pop	{r4, r5, pc}
   b8fd2:	ea91 0f03 	teq	r1, r3
   b8fd6:	bf1e      	ittt	ne
   b8fd8:	2100      	movne	r1, #0
   b8fda:	2000      	movne	r0, #0
   b8fdc:	bd30      	popne	{r4, r5, pc}
   b8fde:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   b8fe2:	d105      	bne.n	b8ff0 <__adddf3+0x230>
   b8fe4:	0040      	lsls	r0, r0, #1
   b8fe6:	4149      	adcs	r1, r1
   b8fe8:	bf28      	it	cs
   b8fea:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   b8fee:	bd30      	pop	{r4, r5, pc}
   b8ff0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   b8ff4:	bf3c      	itt	cc
   b8ff6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   b8ffa:	bd30      	popcc	{r4, r5, pc}
   b8ffc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b9000:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   b9004:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b9008:	f04f 0000 	mov.w	r0, #0
   b900c:	bd30      	pop	{r4, r5, pc}
   b900e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b9012:	bf1a      	itte	ne
   b9014:	4619      	movne	r1, r3
   b9016:	4610      	movne	r0, r2
   b9018:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   b901c:	bf1c      	itt	ne
   b901e:	460b      	movne	r3, r1
   b9020:	4602      	movne	r2, r0
   b9022:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b9026:	bf06      	itte	eq
   b9028:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   b902c:	ea91 0f03 	teqeq	r1, r3
   b9030:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   b9034:	bd30      	pop	{r4, r5, pc}
   b9036:	bf00      	nop

000b9038 <__aeabi_ui2d>:
   b9038:	f090 0f00 	teq	r0, #0
   b903c:	bf04      	itt	eq
   b903e:	2100      	moveq	r1, #0
   b9040:	4770      	bxeq	lr
   b9042:	b530      	push	{r4, r5, lr}
   b9044:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b9048:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b904c:	f04f 0500 	mov.w	r5, #0
   b9050:	f04f 0100 	mov.w	r1, #0
   b9054:	e750      	b.n	b8ef8 <__adddf3+0x138>
   b9056:	bf00      	nop

000b9058 <__aeabi_i2d>:
   b9058:	f090 0f00 	teq	r0, #0
   b905c:	bf04      	itt	eq
   b905e:	2100      	moveq	r1, #0
   b9060:	4770      	bxeq	lr
   b9062:	b530      	push	{r4, r5, lr}
   b9064:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b9068:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b906c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   b9070:	bf48      	it	mi
   b9072:	4240      	negmi	r0, r0
   b9074:	f04f 0100 	mov.w	r1, #0
   b9078:	e73e      	b.n	b8ef8 <__adddf3+0x138>
   b907a:	bf00      	nop

000b907c <__aeabi_f2d>:
   b907c:	0042      	lsls	r2, r0, #1
   b907e:	ea4f 01e2 	mov.w	r1, r2, asr #3
   b9082:	ea4f 0131 	mov.w	r1, r1, rrx
   b9086:	ea4f 7002 	mov.w	r0, r2, lsl #28
   b908a:	bf1f      	itttt	ne
   b908c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   b9090:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   b9094:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   b9098:	4770      	bxne	lr
   b909a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   b909e:	bf08      	it	eq
   b90a0:	4770      	bxeq	lr
   b90a2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   b90a6:	bf04      	itt	eq
   b90a8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   b90ac:	4770      	bxeq	lr
   b90ae:	b530      	push	{r4, r5, lr}
   b90b0:	f44f 7460 	mov.w	r4, #896	; 0x380
   b90b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b90b8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b90bc:	e71c      	b.n	b8ef8 <__adddf3+0x138>
   b90be:	bf00      	nop

000b90c0 <__aeabi_ul2d>:
   b90c0:	ea50 0201 	orrs.w	r2, r0, r1
   b90c4:	bf08      	it	eq
   b90c6:	4770      	bxeq	lr
   b90c8:	b530      	push	{r4, r5, lr}
   b90ca:	f04f 0500 	mov.w	r5, #0
   b90ce:	e00a      	b.n	b90e6 <__aeabi_l2d+0x16>

000b90d0 <__aeabi_l2d>:
   b90d0:	ea50 0201 	orrs.w	r2, r0, r1
   b90d4:	bf08      	it	eq
   b90d6:	4770      	bxeq	lr
   b90d8:	b530      	push	{r4, r5, lr}
   b90da:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   b90de:	d502      	bpl.n	b90e6 <__aeabi_l2d+0x16>
   b90e0:	4240      	negs	r0, r0
   b90e2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b90e6:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b90ea:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b90ee:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   b90f2:	f43f aed8 	beq.w	b8ea6 <__adddf3+0xe6>
   b90f6:	f04f 0203 	mov.w	r2, #3
   b90fa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b90fe:	bf18      	it	ne
   b9100:	3203      	addne	r2, #3
   b9102:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b9106:	bf18      	it	ne
   b9108:	3203      	addne	r2, #3
   b910a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   b910e:	f1c2 0320 	rsb	r3, r2, #32
   b9112:	fa00 fc03 	lsl.w	ip, r0, r3
   b9116:	fa20 f002 	lsr.w	r0, r0, r2
   b911a:	fa01 fe03 	lsl.w	lr, r1, r3
   b911e:	ea40 000e 	orr.w	r0, r0, lr
   b9122:	fa21 f102 	lsr.w	r1, r1, r2
   b9126:	4414      	add	r4, r2
   b9128:	e6bd      	b.n	b8ea6 <__adddf3+0xe6>
   b912a:	bf00      	nop

000b912c <__aeabi_dmul>:
   b912c:	b570      	push	{r4, r5, r6, lr}
   b912e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b9132:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b9136:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b913a:	bf1d      	ittte	ne
   b913c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b9140:	ea94 0f0c 	teqne	r4, ip
   b9144:	ea95 0f0c 	teqne	r5, ip
   b9148:	f000 f8de 	bleq	b9308 <__aeabi_dmul+0x1dc>
   b914c:	442c      	add	r4, r5
   b914e:	ea81 0603 	eor.w	r6, r1, r3
   b9152:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   b9156:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   b915a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   b915e:	bf18      	it	ne
   b9160:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   b9164:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b9168:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   b916c:	d038      	beq.n	b91e0 <__aeabi_dmul+0xb4>
   b916e:	fba0 ce02 	umull	ip, lr, r0, r2
   b9172:	f04f 0500 	mov.w	r5, #0
   b9176:	fbe1 e502 	umlal	lr, r5, r1, r2
   b917a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   b917e:	fbe0 e503 	umlal	lr, r5, r0, r3
   b9182:	f04f 0600 	mov.w	r6, #0
   b9186:	fbe1 5603 	umlal	r5, r6, r1, r3
   b918a:	f09c 0f00 	teq	ip, #0
   b918e:	bf18      	it	ne
   b9190:	f04e 0e01 	orrne.w	lr, lr, #1
   b9194:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   b9198:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   b919c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   b91a0:	d204      	bcs.n	b91ac <__aeabi_dmul+0x80>
   b91a2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   b91a6:	416d      	adcs	r5, r5
   b91a8:	eb46 0606 	adc.w	r6, r6, r6
   b91ac:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   b91b0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   b91b4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   b91b8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   b91bc:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   b91c0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b91c4:	bf88      	it	hi
   b91c6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b91ca:	d81e      	bhi.n	b920a <__aeabi_dmul+0xde>
   b91cc:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   b91d0:	bf08      	it	eq
   b91d2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   b91d6:	f150 0000 	adcs.w	r0, r0, #0
   b91da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b91de:	bd70      	pop	{r4, r5, r6, pc}
   b91e0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   b91e4:	ea46 0101 	orr.w	r1, r6, r1
   b91e8:	ea40 0002 	orr.w	r0, r0, r2
   b91ec:	ea81 0103 	eor.w	r1, r1, r3
   b91f0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   b91f4:	bfc2      	ittt	gt
   b91f6:	ebd4 050c 	rsbsgt	r5, r4, ip
   b91fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b91fe:	bd70      	popgt	{r4, r5, r6, pc}
   b9200:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b9204:	f04f 0e00 	mov.w	lr, #0
   b9208:	3c01      	subs	r4, #1
   b920a:	f300 80ab 	bgt.w	b9364 <__aeabi_dmul+0x238>
   b920e:	f114 0f36 	cmn.w	r4, #54	; 0x36
   b9212:	bfde      	ittt	le
   b9214:	2000      	movle	r0, #0
   b9216:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   b921a:	bd70      	pople	{r4, r5, r6, pc}
   b921c:	f1c4 0400 	rsb	r4, r4, #0
   b9220:	3c20      	subs	r4, #32
   b9222:	da35      	bge.n	b9290 <__aeabi_dmul+0x164>
   b9224:	340c      	adds	r4, #12
   b9226:	dc1b      	bgt.n	b9260 <__aeabi_dmul+0x134>
   b9228:	f104 0414 	add.w	r4, r4, #20
   b922c:	f1c4 0520 	rsb	r5, r4, #32
   b9230:	fa00 f305 	lsl.w	r3, r0, r5
   b9234:	fa20 f004 	lsr.w	r0, r0, r4
   b9238:	fa01 f205 	lsl.w	r2, r1, r5
   b923c:	ea40 0002 	orr.w	r0, r0, r2
   b9240:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   b9244:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b9248:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b924c:	fa21 f604 	lsr.w	r6, r1, r4
   b9250:	eb42 0106 	adc.w	r1, r2, r6
   b9254:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b9258:	bf08      	it	eq
   b925a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b925e:	bd70      	pop	{r4, r5, r6, pc}
   b9260:	f1c4 040c 	rsb	r4, r4, #12
   b9264:	f1c4 0520 	rsb	r5, r4, #32
   b9268:	fa00 f304 	lsl.w	r3, r0, r4
   b926c:	fa20 f005 	lsr.w	r0, r0, r5
   b9270:	fa01 f204 	lsl.w	r2, r1, r4
   b9274:	ea40 0002 	orr.w	r0, r0, r2
   b9278:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b927c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b9280:	f141 0100 	adc.w	r1, r1, #0
   b9284:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b9288:	bf08      	it	eq
   b928a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b928e:	bd70      	pop	{r4, r5, r6, pc}
   b9290:	f1c4 0520 	rsb	r5, r4, #32
   b9294:	fa00 f205 	lsl.w	r2, r0, r5
   b9298:	ea4e 0e02 	orr.w	lr, lr, r2
   b929c:	fa20 f304 	lsr.w	r3, r0, r4
   b92a0:	fa01 f205 	lsl.w	r2, r1, r5
   b92a4:	ea43 0302 	orr.w	r3, r3, r2
   b92a8:	fa21 f004 	lsr.w	r0, r1, r4
   b92ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b92b0:	fa21 f204 	lsr.w	r2, r1, r4
   b92b4:	ea20 0002 	bic.w	r0, r0, r2
   b92b8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   b92bc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b92c0:	bf08      	it	eq
   b92c2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b92c6:	bd70      	pop	{r4, r5, r6, pc}
   b92c8:	f094 0f00 	teq	r4, #0
   b92cc:	d10f      	bne.n	b92ee <__aeabi_dmul+0x1c2>
   b92ce:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   b92d2:	0040      	lsls	r0, r0, #1
   b92d4:	eb41 0101 	adc.w	r1, r1, r1
   b92d8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b92dc:	bf08      	it	eq
   b92de:	3c01      	subeq	r4, #1
   b92e0:	d0f7      	beq.n	b92d2 <__aeabi_dmul+0x1a6>
   b92e2:	ea41 0106 	orr.w	r1, r1, r6
   b92e6:	f095 0f00 	teq	r5, #0
   b92ea:	bf18      	it	ne
   b92ec:	4770      	bxne	lr
   b92ee:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   b92f2:	0052      	lsls	r2, r2, #1
   b92f4:	eb43 0303 	adc.w	r3, r3, r3
   b92f8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   b92fc:	bf08      	it	eq
   b92fe:	3d01      	subeq	r5, #1
   b9300:	d0f7      	beq.n	b92f2 <__aeabi_dmul+0x1c6>
   b9302:	ea43 0306 	orr.w	r3, r3, r6
   b9306:	4770      	bx	lr
   b9308:	ea94 0f0c 	teq	r4, ip
   b930c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b9310:	bf18      	it	ne
   b9312:	ea95 0f0c 	teqne	r5, ip
   b9316:	d00c      	beq.n	b9332 <__aeabi_dmul+0x206>
   b9318:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b931c:	bf18      	it	ne
   b931e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b9322:	d1d1      	bne.n	b92c8 <__aeabi_dmul+0x19c>
   b9324:	ea81 0103 	eor.w	r1, r1, r3
   b9328:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b932c:	f04f 0000 	mov.w	r0, #0
   b9330:	bd70      	pop	{r4, r5, r6, pc}
   b9332:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b9336:	bf06      	itte	eq
   b9338:	4610      	moveq	r0, r2
   b933a:	4619      	moveq	r1, r3
   b933c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b9340:	d019      	beq.n	b9376 <__aeabi_dmul+0x24a>
   b9342:	ea94 0f0c 	teq	r4, ip
   b9346:	d102      	bne.n	b934e <__aeabi_dmul+0x222>
   b9348:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   b934c:	d113      	bne.n	b9376 <__aeabi_dmul+0x24a>
   b934e:	ea95 0f0c 	teq	r5, ip
   b9352:	d105      	bne.n	b9360 <__aeabi_dmul+0x234>
   b9354:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   b9358:	bf1c      	itt	ne
   b935a:	4610      	movne	r0, r2
   b935c:	4619      	movne	r1, r3
   b935e:	d10a      	bne.n	b9376 <__aeabi_dmul+0x24a>
   b9360:	ea81 0103 	eor.w	r1, r1, r3
   b9364:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b9368:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b936c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b9370:	f04f 0000 	mov.w	r0, #0
   b9374:	bd70      	pop	{r4, r5, r6, pc}
   b9376:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b937a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   b937e:	bd70      	pop	{r4, r5, r6, pc}

000b9380 <__aeabi_ddiv>:
   b9380:	b570      	push	{r4, r5, r6, lr}
   b9382:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b9386:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b938a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b938e:	bf1d      	ittte	ne
   b9390:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b9394:	ea94 0f0c 	teqne	r4, ip
   b9398:	ea95 0f0c 	teqne	r5, ip
   b939c:	f000 f8a7 	bleq	b94ee <__aeabi_ddiv+0x16e>
   b93a0:	eba4 0405 	sub.w	r4, r4, r5
   b93a4:	ea81 0e03 	eor.w	lr, r1, r3
   b93a8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b93ac:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b93b0:	f000 8088 	beq.w	b94c4 <__aeabi_ddiv+0x144>
   b93b4:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b93b8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   b93bc:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   b93c0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   b93c4:	ea4f 2202 	mov.w	r2, r2, lsl #8
   b93c8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   b93cc:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   b93d0:	ea4f 2600 	mov.w	r6, r0, lsl #8
   b93d4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   b93d8:	429d      	cmp	r5, r3
   b93da:	bf08      	it	eq
   b93dc:	4296      	cmpeq	r6, r2
   b93de:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   b93e2:	f504 7440 	add.w	r4, r4, #768	; 0x300
   b93e6:	d202      	bcs.n	b93ee <__aeabi_ddiv+0x6e>
   b93e8:	085b      	lsrs	r3, r3, #1
   b93ea:	ea4f 0232 	mov.w	r2, r2, rrx
   b93ee:	1ab6      	subs	r6, r6, r2
   b93f0:	eb65 0503 	sbc.w	r5, r5, r3
   b93f4:	085b      	lsrs	r3, r3, #1
   b93f6:	ea4f 0232 	mov.w	r2, r2, rrx
   b93fa:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   b93fe:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   b9402:	ebb6 0e02 	subs.w	lr, r6, r2
   b9406:	eb75 0e03 	sbcs.w	lr, r5, r3
   b940a:	bf22      	ittt	cs
   b940c:	1ab6      	subcs	r6, r6, r2
   b940e:	4675      	movcs	r5, lr
   b9410:	ea40 000c 	orrcs.w	r0, r0, ip
   b9414:	085b      	lsrs	r3, r3, #1
   b9416:	ea4f 0232 	mov.w	r2, r2, rrx
   b941a:	ebb6 0e02 	subs.w	lr, r6, r2
   b941e:	eb75 0e03 	sbcs.w	lr, r5, r3
   b9422:	bf22      	ittt	cs
   b9424:	1ab6      	subcs	r6, r6, r2
   b9426:	4675      	movcs	r5, lr
   b9428:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   b942c:	085b      	lsrs	r3, r3, #1
   b942e:	ea4f 0232 	mov.w	r2, r2, rrx
   b9432:	ebb6 0e02 	subs.w	lr, r6, r2
   b9436:	eb75 0e03 	sbcs.w	lr, r5, r3
   b943a:	bf22      	ittt	cs
   b943c:	1ab6      	subcs	r6, r6, r2
   b943e:	4675      	movcs	r5, lr
   b9440:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   b9444:	085b      	lsrs	r3, r3, #1
   b9446:	ea4f 0232 	mov.w	r2, r2, rrx
   b944a:	ebb6 0e02 	subs.w	lr, r6, r2
   b944e:	eb75 0e03 	sbcs.w	lr, r5, r3
   b9452:	bf22      	ittt	cs
   b9454:	1ab6      	subcs	r6, r6, r2
   b9456:	4675      	movcs	r5, lr
   b9458:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   b945c:	ea55 0e06 	orrs.w	lr, r5, r6
   b9460:	d018      	beq.n	b9494 <__aeabi_ddiv+0x114>
   b9462:	ea4f 1505 	mov.w	r5, r5, lsl #4
   b9466:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   b946a:	ea4f 1606 	mov.w	r6, r6, lsl #4
   b946e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   b9472:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   b9476:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   b947a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   b947e:	d1c0      	bne.n	b9402 <__aeabi_ddiv+0x82>
   b9480:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b9484:	d10b      	bne.n	b949e <__aeabi_ddiv+0x11e>
   b9486:	ea41 0100 	orr.w	r1, r1, r0
   b948a:	f04f 0000 	mov.w	r0, #0
   b948e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   b9492:	e7b6      	b.n	b9402 <__aeabi_ddiv+0x82>
   b9494:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b9498:	bf04      	itt	eq
   b949a:	4301      	orreq	r1, r0
   b949c:	2000      	moveq	r0, #0
   b949e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b94a2:	bf88      	it	hi
   b94a4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b94a8:	f63f aeaf 	bhi.w	b920a <__aeabi_dmul+0xde>
   b94ac:	ebb5 0c03 	subs.w	ip, r5, r3
   b94b0:	bf04      	itt	eq
   b94b2:	ebb6 0c02 	subseq.w	ip, r6, r2
   b94b6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b94ba:	f150 0000 	adcs.w	r0, r0, #0
   b94be:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b94c2:	bd70      	pop	{r4, r5, r6, pc}
   b94c4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   b94c8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   b94cc:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   b94d0:	bfc2      	ittt	gt
   b94d2:	ebd4 050c 	rsbsgt	r5, r4, ip
   b94d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b94da:	bd70      	popgt	{r4, r5, r6, pc}
   b94dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b94e0:	f04f 0e00 	mov.w	lr, #0
   b94e4:	3c01      	subs	r4, #1
   b94e6:	e690      	b.n	b920a <__aeabi_dmul+0xde>
   b94e8:	ea45 0e06 	orr.w	lr, r5, r6
   b94ec:	e68d      	b.n	b920a <__aeabi_dmul+0xde>
   b94ee:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b94f2:	ea94 0f0c 	teq	r4, ip
   b94f6:	bf08      	it	eq
   b94f8:	ea95 0f0c 	teqeq	r5, ip
   b94fc:	f43f af3b 	beq.w	b9376 <__aeabi_dmul+0x24a>
   b9500:	ea94 0f0c 	teq	r4, ip
   b9504:	d10a      	bne.n	b951c <__aeabi_ddiv+0x19c>
   b9506:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b950a:	f47f af34 	bne.w	b9376 <__aeabi_dmul+0x24a>
   b950e:	ea95 0f0c 	teq	r5, ip
   b9512:	f47f af25 	bne.w	b9360 <__aeabi_dmul+0x234>
   b9516:	4610      	mov	r0, r2
   b9518:	4619      	mov	r1, r3
   b951a:	e72c      	b.n	b9376 <__aeabi_dmul+0x24a>
   b951c:	ea95 0f0c 	teq	r5, ip
   b9520:	d106      	bne.n	b9530 <__aeabi_ddiv+0x1b0>
   b9522:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b9526:	f43f aefd 	beq.w	b9324 <__aeabi_dmul+0x1f8>
   b952a:	4610      	mov	r0, r2
   b952c:	4619      	mov	r1, r3
   b952e:	e722      	b.n	b9376 <__aeabi_dmul+0x24a>
   b9530:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b9534:	bf18      	it	ne
   b9536:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b953a:	f47f aec5 	bne.w	b92c8 <__aeabi_dmul+0x19c>
   b953e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   b9542:	f47f af0d 	bne.w	b9360 <__aeabi_dmul+0x234>
   b9546:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   b954a:	f47f aeeb 	bne.w	b9324 <__aeabi_dmul+0x1f8>
   b954e:	e712      	b.n	b9376 <__aeabi_dmul+0x24a>

000b9550 <__gedf2>:
   b9550:	f04f 3cff 	mov.w	ip, #4294967295
   b9554:	e006      	b.n	b9564 <__cmpdf2+0x4>
   b9556:	bf00      	nop

000b9558 <__ledf2>:
   b9558:	f04f 0c01 	mov.w	ip, #1
   b955c:	e002      	b.n	b9564 <__cmpdf2+0x4>
   b955e:	bf00      	nop

000b9560 <__cmpdf2>:
   b9560:	f04f 0c01 	mov.w	ip, #1
   b9564:	f84d cd04 	str.w	ip, [sp, #-4]!
   b9568:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b956c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b9570:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b9574:	bf18      	it	ne
   b9576:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   b957a:	d01b      	beq.n	b95b4 <__cmpdf2+0x54>
   b957c:	b001      	add	sp, #4
   b957e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   b9582:	bf0c      	ite	eq
   b9584:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   b9588:	ea91 0f03 	teqne	r1, r3
   b958c:	bf02      	ittt	eq
   b958e:	ea90 0f02 	teqeq	r0, r2
   b9592:	2000      	moveq	r0, #0
   b9594:	4770      	bxeq	lr
   b9596:	f110 0f00 	cmn.w	r0, #0
   b959a:	ea91 0f03 	teq	r1, r3
   b959e:	bf58      	it	pl
   b95a0:	4299      	cmppl	r1, r3
   b95a2:	bf08      	it	eq
   b95a4:	4290      	cmpeq	r0, r2
   b95a6:	bf2c      	ite	cs
   b95a8:	17d8      	asrcs	r0, r3, #31
   b95aa:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   b95ae:	f040 0001 	orr.w	r0, r0, #1
   b95b2:	4770      	bx	lr
   b95b4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b95b8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b95bc:	d102      	bne.n	b95c4 <__cmpdf2+0x64>
   b95be:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   b95c2:	d107      	bne.n	b95d4 <__cmpdf2+0x74>
   b95c4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b95c8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b95cc:	d1d6      	bne.n	b957c <__cmpdf2+0x1c>
   b95ce:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   b95d2:	d0d3      	beq.n	b957c <__cmpdf2+0x1c>
   b95d4:	f85d 0b04 	ldr.w	r0, [sp], #4
   b95d8:	4770      	bx	lr
   b95da:	bf00      	nop

000b95dc <__aeabi_cdrcmple>:
   b95dc:	4684      	mov	ip, r0
   b95de:	4610      	mov	r0, r2
   b95e0:	4662      	mov	r2, ip
   b95e2:	468c      	mov	ip, r1
   b95e4:	4619      	mov	r1, r3
   b95e6:	4663      	mov	r3, ip
   b95e8:	e000      	b.n	b95ec <__aeabi_cdcmpeq>
   b95ea:	bf00      	nop

000b95ec <__aeabi_cdcmpeq>:
   b95ec:	b501      	push	{r0, lr}
   b95ee:	f7ff ffb7 	bl	b9560 <__cmpdf2>
   b95f2:	2800      	cmp	r0, #0
   b95f4:	bf48      	it	mi
   b95f6:	f110 0f00 	cmnmi.w	r0, #0
   b95fa:	bd01      	pop	{r0, pc}

000b95fc <__aeabi_dcmpeq>:
   b95fc:	f84d ed08 	str.w	lr, [sp, #-8]!
   b9600:	f7ff fff4 	bl	b95ec <__aeabi_cdcmpeq>
   b9604:	bf0c      	ite	eq
   b9606:	2001      	moveq	r0, #1
   b9608:	2000      	movne	r0, #0
   b960a:	f85d fb08 	ldr.w	pc, [sp], #8
   b960e:	bf00      	nop

000b9610 <__aeabi_dcmplt>:
   b9610:	f84d ed08 	str.w	lr, [sp, #-8]!
   b9614:	f7ff ffea 	bl	b95ec <__aeabi_cdcmpeq>
   b9618:	bf34      	ite	cc
   b961a:	2001      	movcc	r0, #1
   b961c:	2000      	movcs	r0, #0
   b961e:	f85d fb08 	ldr.w	pc, [sp], #8
   b9622:	bf00      	nop

000b9624 <__aeabi_dcmple>:
   b9624:	f84d ed08 	str.w	lr, [sp, #-8]!
   b9628:	f7ff ffe0 	bl	b95ec <__aeabi_cdcmpeq>
   b962c:	bf94      	ite	ls
   b962e:	2001      	movls	r0, #1
   b9630:	2000      	movhi	r0, #0
   b9632:	f85d fb08 	ldr.w	pc, [sp], #8
   b9636:	bf00      	nop

000b9638 <__aeabi_dcmpge>:
   b9638:	f84d ed08 	str.w	lr, [sp, #-8]!
   b963c:	f7ff ffce 	bl	b95dc <__aeabi_cdrcmple>
   b9640:	bf94      	ite	ls
   b9642:	2001      	movls	r0, #1
   b9644:	2000      	movhi	r0, #0
   b9646:	f85d fb08 	ldr.w	pc, [sp], #8
   b964a:	bf00      	nop

000b964c <__aeabi_dcmpgt>:
   b964c:	f84d ed08 	str.w	lr, [sp, #-8]!
   b9650:	f7ff ffc4 	bl	b95dc <__aeabi_cdrcmple>
   b9654:	bf34      	ite	cc
   b9656:	2001      	movcc	r0, #1
   b9658:	2000      	movcs	r0, #0
   b965a:	f85d fb08 	ldr.w	pc, [sp], #8
   b965e:	bf00      	nop

000b9660 <__aeabi_dcmpun>:
   b9660:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b9664:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b9668:	d102      	bne.n	b9670 <__aeabi_dcmpun+0x10>
   b966a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   b966e:	d10a      	bne.n	b9686 <__aeabi_dcmpun+0x26>
   b9670:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b9674:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b9678:	d102      	bne.n	b9680 <__aeabi_dcmpun+0x20>
   b967a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   b967e:	d102      	bne.n	b9686 <__aeabi_dcmpun+0x26>
   b9680:	f04f 0000 	mov.w	r0, #0
   b9684:	4770      	bx	lr
   b9686:	f04f 0001 	mov.w	r0, #1
   b968a:	4770      	bx	lr

000b968c <__aeabi_d2iz>:
   b968c:	ea4f 0241 	mov.w	r2, r1, lsl #1
   b9690:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   b9694:	d215      	bcs.n	b96c2 <__aeabi_d2iz+0x36>
   b9696:	d511      	bpl.n	b96bc <__aeabi_d2iz+0x30>
   b9698:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   b969c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   b96a0:	d912      	bls.n	b96c8 <__aeabi_d2iz+0x3c>
   b96a2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b96a6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   b96aa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   b96ae:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b96b2:	fa23 f002 	lsr.w	r0, r3, r2
   b96b6:	bf18      	it	ne
   b96b8:	4240      	negne	r0, r0
   b96ba:	4770      	bx	lr
   b96bc:	f04f 0000 	mov.w	r0, #0
   b96c0:	4770      	bx	lr
   b96c2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   b96c6:	d105      	bne.n	b96d4 <__aeabi_d2iz+0x48>
   b96c8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   b96cc:	bf08      	it	eq
   b96ce:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   b96d2:	4770      	bx	lr
   b96d4:	f04f 0000 	mov.w	r0, #0
   b96d8:	4770      	bx	lr
   b96da:	bf00      	nop

000b96dc <__aeabi_d2uiz>:
   b96dc:	004a      	lsls	r2, r1, #1
   b96de:	d211      	bcs.n	b9704 <__aeabi_d2uiz+0x28>
   b96e0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   b96e4:	d211      	bcs.n	b970a <__aeabi_d2uiz+0x2e>
   b96e6:	d50d      	bpl.n	b9704 <__aeabi_d2uiz+0x28>
   b96e8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   b96ec:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   b96f0:	d40e      	bmi.n	b9710 <__aeabi_d2uiz+0x34>
   b96f2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b96f6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   b96fa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   b96fe:	fa23 f002 	lsr.w	r0, r3, r2
   b9702:	4770      	bx	lr
   b9704:	f04f 0000 	mov.w	r0, #0
   b9708:	4770      	bx	lr
   b970a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   b970e:	d102      	bne.n	b9716 <__aeabi_d2uiz+0x3a>
   b9710:	f04f 30ff 	mov.w	r0, #4294967295
   b9714:	4770      	bx	lr
   b9716:	f04f 0000 	mov.w	r0, #0
   b971a:	4770      	bx	lr

000b971c <__aeabi_d2f>:
   b971c:	ea4f 0241 	mov.w	r2, r1, lsl #1
   b9720:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   b9724:	bf24      	itt	cs
   b9726:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   b972a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   b972e:	d90d      	bls.n	b974c <__aeabi_d2f+0x30>
   b9730:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   b9734:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   b9738:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   b973c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   b9740:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   b9744:	bf08      	it	eq
   b9746:	f020 0001 	biceq.w	r0, r0, #1
   b974a:	4770      	bx	lr
   b974c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   b9750:	d121      	bne.n	b9796 <__aeabi_d2f+0x7a>
   b9752:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   b9756:	bfbc      	itt	lt
   b9758:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   b975c:	4770      	bxlt	lr
   b975e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b9762:	ea4f 5252 	mov.w	r2, r2, lsr #21
   b9766:	f1c2 0218 	rsb	r2, r2, #24
   b976a:	f1c2 0c20 	rsb	ip, r2, #32
   b976e:	fa10 f30c 	lsls.w	r3, r0, ip
   b9772:	fa20 f002 	lsr.w	r0, r0, r2
   b9776:	bf18      	it	ne
   b9778:	f040 0001 	orrne.w	r0, r0, #1
   b977c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b9780:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   b9784:	fa03 fc0c 	lsl.w	ip, r3, ip
   b9788:	ea40 000c 	orr.w	r0, r0, ip
   b978c:	fa23 f302 	lsr.w	r3, r3, r2
   b9790:	ea4f 0343 	mov.w	r3, r3, lsl #1
   b9794:	e7cc      	b.n	b9730 <__aeabi_d2f+0x14>
   b9796:	ea7f 5362 	mvns.w	r3, r2, asr #21
   b979a:	d107      	bne.n	b97ac <__aeabi_d2f+0x90>
   b979c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   b97a0:	bf1e      	ittt	ne
   b97a2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   b97a6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   b97aa:	4770      	bxne	lr
   b97ac:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   b97b0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   b97b4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   b97b8:	4770      	bx	lr
   b97ba:	bf00      	nop

000b97bc <atexit>:
   b97bc:	2300      	movs	r3, #0
   b97be:	4601      	mov	r1, r0
   b97c0:	461a      	mov	r2, r3
   b97c2:	4618      	mov	r0, r3
   b97c4:	f000 b8ec 	b.w	b99a0 <__register_exitproc>

000b97c8 <atoi>:
   b97c8:	220a      	movs	r2, #10
   b97ca:	2100      	movs	r1, #0
   b97cc:	f000 b8de 	b.w	b998c <strtol>

000b97d0 <memcmp>:
   b97d0:	b510      	push	{r4, lr}
   b97d2:	3901      	subs	r1, #1
   b97d4:	4402      	add	r2, r0
   b97d6:	4290      	cmp	r0, r2
   b97d8:	d101      	bne.n	b97de <memcmp+0xe>
   b97da:	2000      	movs	r0, #0
   b97dc:	e005      	b.n	b97ea <memcmp+0x1a>
   b97de:	7803      	ldrb	r3, [r0, #0]
   b97e0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   b97e4:	42a3      	cmp	r3, r4
   b97e6:	d001      	beq.n	b97ec <memcmp+0x1c>
   b97e8:	1b18      	subs	r0, r3, r4
   b97ea:	bd10      	pop	{r4, pc}
   b97ec:	3001      	adds	r0, #1
   b97ee:	e7f2      	b.n	b97d6 <memcmp+0x6>

000b97f0 <memcpy>:
   b97f0:	440a      	add	r2, r1
   b97f2:	4291      	cmp	r1, r2
   b97f4:	f100 33ff 	add.w	r3, r0, #4294967295
   b97f8:	d100      	bne.n	b97fc <memcpy+0xc>
   b97fa:	4770      	bx	lr
   b97fc:	b510      	push	{r4, lr}
   b97fe:	f811 4b01 	ldrb.w	r4, [r1], #1
   b9802:	f803 4f01 	strb.w	r4, [r3, #1]!
   b9806:	4291      	cmp	r1, r2
   b9808:	d1f9      	bne.n	b97fe <memcpy+0xe>
   b980a:	bd10      	pop	{r4, pc}

000b980c <memset>:
   b980c:	4402      	add	r2, r0
   b980e:	4603      	mov	r3, r0
   b9810:	4293      	cmp	r3, r2
   b9812:	d100      	bne.n	b9816 <memset+0xa>
   b9814:	4770      	bx	lr
   b9816:	f803 1b01 	strb.w	r1, [r3], #1
   b981a:	e7f9      	b.n	b9810 <memset+0x4>

000b981c <srand>:
   b981c:	b538      	push	{r3, r4, r5, lr}
   b981e:	4b10      	ldr	r3, [pc, #64]	; (b9860 <srand+0x44>)
   b9820:	681d      	ldr	r5, [r3, #0]
   b9822:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b9824:	4604      	mov	r4, r0
   b9826:	b9b3      	cbnz	r3, b9856 <srand+0x3a>
   b9828:	2018      	movs	r0, #24
   b982a:	f7fe f937 	bl	b7a9c <malloc>
   b982e:	4602      	mov	r2, r0
   b9830:	63a8      	str	r0, [r5, #56]	; 0x38
   b9832:	b920      	cbnz	r0, b983e <srand+0x22>
   b9834:	4b0b      	ldr	r3, [pc, #44]	; (b9864 <srand+0x48>)
   b9836:	480c      	ldr	r0, [pc, #48]	; (b9868 <srand+0x4c>)
   b9838:	2142      	movs	r1, #66	; 0x42
   b983a:	f7fe f957 	bl	b7aec <__assert_func>
   b983e:	490b      	ldr	r1, [pc, #44]	; (b986c <srand+0x50>)
   b9840:	4b0b      	ldr	r3, [pc, #44]	; (b9870 <srand+0x54>)
   b9842:	e9c0 1300 	strd	r1, r3, [r0]
   b9846:	4b0b      	ldr	r3, [pc, #44]	; (b9874 <srand+0x58>)
   b9848:	6083      	str	r3, [r0, #8]
   b984a:	230b      	movs	r3, #11
   b984c:	8183      	strh	r3, [r0, #12]
   b984e:	2100      	movs	r1, #0
   b9850:	2001      	movs	r0, #1
   b9852:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b9856:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b9858:	2200      	movs	r2, #0
   b985a:	611c      	str	r4, [r3, #16]
   b985c:	615a      	str	r2, [r3, #20]
   b985e:	bd38      	pop	{r3, r4, r5, pc}
   b9860:	2003dfd8 	.word	0x2003dfd8
   b9864:	000b9e8d 	.word	0x000b9e8d
   b9868:	000b9ea4 	.word	0x000b9ea4
   b986c:	abcd330e 	.word	0xabcd330e
   b9870:	e66d1234 	.word	0xe66d1234
   b9874:	0005deec 	.word	0x0005deec

000b9878 <strlen>:
   b9878:	4603      	mov	r3, r0
   b987a:	f813 2b01 	ldrb.w	r2, [r3], #1
   b987e:	2a00      	cmp	r2, #0
   b9880:	d1fb      	bne.n	b987a <strlen+0x2>
   b9882:	1a18      	subs	r0, r3, r0
   b9884:	3801      	subs	r0, #1
   b9886:	4770      	bx	lr

000b9888 <_strtol_l.constprop.0>:
   b9888:	2b01      	cmp	r3, #1
   b988a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b988e:	d001      	beq.n	b9894 <_strtol_l.constprop.0+0xc>
   b9890:	2b24      	cmp	r3, #36	; 0x24
   b9892:	d906      	bls.n	b98a2 <_strtol_l.constprop.0+0x1a>
   b9894:	f7fe f922 	bl	b7adc <__errno>
   b9898:	2316      	movs	r3, #22
   b989a:	6003      	str	r3, [r0, #0]
   b989c:	2000      	movs	r0, #0
   b989e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b98a2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; b9988 <_strtol_l.constprop.0+0x100>
   b98a6:	460d      	mov	r5, r1
   b98a8:	462e      	mov	r6, r5
   b98aa:	f815 4b01 	ldrb.w	r4, [r5], #1
   b98ae:	f814 700c 	ldrb.w	r7, [r4, ip]
   b98b2:	f017 0708 	ands.w	r7, r7, #8
   b98b6:	d1f7      	bne.n	b98a8 <_strtol_l.constprop.0+0x20>
   b98b8:	2c2d      	cmp	r4, #45	; 0x2d
   b98ba:	d132      	bne.n	b9922 <_strtol_l.constprop.0+0x9a>
   b98bc:	782c      	ldrb	r4, [r5, #0]
   b98be:	2701      	movs	r7, #1
   b98c0:	1cb5      	adds	r5, r6, #2
   b98c2:	2b00      	cmp	r3, #0
   b98c4:	d05b      	beq.n	b997e <_strtol_l.constprop.0+0xf6>
   b98c6:	2b10      	cmp	r3, #16
   b98c8:	d109      	bne.n	b98de <_strtol_l.constprop.0+0x56>
   b98ca:	2c30      	cmp	r4, #48	; 0x30
   b98cc:	d107      	bne.n	b98de <_strtol_l.constprop.0+0x56>
   b98ce:	782c      	ldrb	r4, [r5, #0]
   b98d0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
   b98d4:	2c58      	cmp	r4, #88	; 0x58
   b98d6:	d14d      	bne.n	b9974 <_strtol_l.constprop.0+0xec>
   b98d8:	786c      	ldrb	r4, [r5, #1]
   b98da:	2310      	movs	r3, #16
   b98dc:	3502      	adds	r5, #2
   b98de:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
   b98e2:	f108 38ff 	add.w	r8, r8, #4294967295
   b98e6:	f04f 0c00 	mov.w	ip, #0
   b98ea:	fbb8 f9f3 	udiv	r9, r8, r3
   b98ee:	4666      	mov	r6, ip
   b98f0:	fb03 8a19 	mls	sl, r3, r9, r8
   b98f4:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
   b98f8:	f1be 0f09 	cmp.w	lr, #9
   b98fc:	d816      	bhi.n	b992c <_strtol_l.constprop.0+0xa4>
   b98fe:	4674      	mov	r4, lr
   b9900:	42a3      	cmp	r3, r4
   b9902:	dd24      	ble.n	b994e <_strtol_l.constprop.0+0xc6>
   b9904:	f1bc 0f00 	cmp.w	ip, #0
   b9908:	db1e      	blt.n	b9948 <_strtol_l.constprop.0+0xc0>
   b990a:	45b1      	cmp	r9, r6
   b990c:	d31c      	bcc.n	b9948 <_strtol_l.constprop.0+0xc0>
   b990e:	d101      	bne.n	b9914 <_strtol_l.constprop.0+0x8c>
   b9910:	45a2      	cmp	sl, r4
   b9912:	db19      	blt.n	b9948 <_strtol_l.constprop.0+0xc0>
   b9914:	fb06 4603 	mla	r6, r6, r3, r4
   b9918:	f04f 0c01 	mov.w	ip, #1
   b991c:	f815 4b01 	ldrb.w	r4, [r5], #1
   b9920:	e7e8      	b.n	b98f4 <_strtol_l.constprop.0+0x6c>
   b9922:	2c2b      	cmp	r4, #43	; 0x2b
   b9924:	bf04      	itt	eq
   b9926:	782c      	ldrbeq	r4, [r5, #0]
   b9928:	1cb5      	addeq	r5, r6, #2
   b992a:	e7ca      	b.n	b98c2 <_strtol_l.constprop.0+0x3a>
   b992c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
   b9930:	f1be 0f19 	cmp.w	lr, #25
   b9934:	d801      	bhi.n	b993a <_strtol_l.constprop.0+0xb2>
   b9936:	3c37      	subs	r4, #55	; 0x37
   b9938:	e7e2      	b.n	b9900 <_strtol_l.constprop.0+0x78>
   b993a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
   b993e:	f1be 0f19 	cmp.w	lr, #25
   b9942:	d804      	bhi.n	b994e <_strtol_l.constprop.0+0xc6>
   b9944:	3c57      	subs	r4, #87	; 0x57
   b9946:	e7db      	b.n	b9900 <_strtol_l.constprop.0+0x78>
   b9948:	f04f 3cff 	mov.w	ip, #4294967295
   b994c:	e7e6      	b.n	b991c <_strtol_l.constprop.0+0x94>
   b994e:	f1bc 0f00 	cmp.w	ip, #0
   b9952:	da05      	bge.n	b9960 <_strtol_l.constprop.0+0xd8>
   b9954:	2322      	movs	r3, #34	; 0x22
   b9956:	6003      	str	r3, [r0, #0]
   b9958:	4646      	mov	r6, r8
   b995a:	b942      	cbnz	r2, b996e <_strtol_l.constprop.0+0xe6>
   b995c:	4630      	mov	r0, r6
   b995e:	e79e      	b.n	b989e <_strtol_l.constprop.0+0x16>
   b9960:	b107      	cbz	r7, b9964 <_strtol_l.constprop.0+0xdc>
   b9962:	4276      	negs	r6, r6
   b9964:	2a00      	cmp	r2, #0
   b9966:	d0f9      	beq.n	b995c <_strtol_l.constprop.0+0xd4>
   b9968:	f1bc 0f00 	cmp.w	ip, #0
   b996c:	d000      	beq.n	b9970 <_strtol_l.constprop.0+0xe8>
   b996e:	1e69      	subs	r1, r5, #1
   b9970:	6011      	str	r1, [r2, #0]
   b9972:	e7f3      	b.n	b995c <_strtol_l.constprop.0+0xd4>
   b9974:	2430      	movs	r4, #48	; 0x30
   b9976:	2b00      	cmp	r3, #0
   b9978:	d1b1      	bne.n	b98de <_strtol_l.constprop.0+0x56>
   b997a:	2308      	movs	r3, #8
   b997c:	e7af      	b.n	b98de <_strtol_l.constprop.0+0x56>
   b997e:	2c30      	cmp	r4, #48	; 0x30
   b9980:	d0a5      	beq.n	b98ce <_strtol_l.constprop.0+0x46>
   b9982:	230a      	movs	r3, #10
   b9984:	e7ab      	b.n	b98de <_strtol_l.constprop.0+0x56>
   b9986:	bf00      	nop
   b9988:	000b9f22 	.word	0x000b9f22

000b998c <strtol>:
   b998c:	4613      	mov	r3, r2
   b998e:	460a      	mov	r2, r1
   b9990:	4601      	mov	r1, r0
   b9992:	4802      	ldr	r0, [pc, #8]	; (b999c <strtol+0x10>)
   b9994:	6800      	ldr	r0, [r0, #0]
   b9996:	f7ff bf77 	b.w	b9888 <_strtol_l.constprop.0>
   b999a:	bf00      	nop
   b999c:	2003dfd8 	.word	0x2003dfd8

000b99a0 <__register_exitproc>:
   b99a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b99a4:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b9a60 <__register_exitproc+0xc0>
   b99a8:	4606      	mov	r6, r0
   b99aa:	f8d8 0000 	ldr.w	r0, [r8]
   b99ae:	461f      	mov	r7, r3
   b99b0:	460d      	mov	r5, r1
   b99b2:	4691      	mov	r9, r2
   b99b4:	f000 f856 	bl	b9a64 <__retarget_lock_acquire_recursive>
   b99b8:	4b25      	ldr	r3, [pc, #148]	; (b9a50 <__register_exitproc+0xb0>)
   b99ba:	681c      	ldr	r4, [r3, #0]
   b99bc:	b934      	cbnz	r4, b99cc <__register_exitproc+0x2c>
   b99be:	4c25      	ldr	r4, [pc, #148]	; (b9a54 <__register_exitproc+0xb4>)
   b99c0:	601c      	str	r4, [r3, #0]
   b99c2:	4b25      	ldr	r3, [pc, #148]	; (b9a58 <__register_exitproc+0xb8>)
   b99c4:	b113      	cbz	r3, b99cc <__register_exitproc+0x2c>
   b99c6:	681b      	ldr	r3, [r3, #0]
   b99c8:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b99cc:	6863      	ldr	r3, [r4, #4]
   b99ce:	2b1f      	cmp	r3, #31
   b99d0:	dd07      	ble.n	b99e2 <__register_exitproc+0x42>
   b99d2:	f8d8 0000 	ldr.w	r0, [r8]
   b99d6:	f000 f847 	bl	b9a68 <__retarget_lock_release_recursive>
   b99da:	f04f 30ff 	mov.w	r0, #4294967295
   b99de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b99e2:	b34e      	cbz	r6, b9a38 <__register_exitproc+0x98>
   b99e4:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b99e8:	b988      	cbnz	r0, b9a0e <__register_exitproc+0x6e>
   b99ea:	4b1c      	ldr	r3, [pc, #112]	; (b9a5c <__register_exitproc+0xbc>)
   b99ec:	b923      	cbnz	r3, b99f8 <__register_exitproc+0x58>
   b99ee:	f8d8 0000 	ldr.w	r0, [r8]
   b99f2:	f000 f838 	bl	b9a66 <__retarget_lock_release>
   b99f6:	e7f0      	b.n	b99da <__register_exitproc+0x3a>
   b99f8:	f44f 7084 	mov.w	r0, #264	; 0x108
   b99fc:	f7fe f84e 	bl	b7a9c <malloc>
   b9a00:	2800      	cmp	r0, #0
   b9a02:	d0f4      	beq.n	b99ee <__register_exitproc+0x4e>
   b9a04:	2300      	movs	r3, #0
   b9a06:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b9a0a:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b9a0e:	6863      	ldr	r3, [r4, #4]
   b9a10:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b9a14:	2201      	movs	r2, #1
   b9a16:	409a      	lsls	r2, r3
   b9a18:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b9a1c:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b9a20:	4313      	orrs	r3, r2
   b9a22:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b9a26:	2e02      	cmp	r6, #2
   b9a28:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b9a2c:	bf02      	ittt	eq
   b9a2e:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b9a32:	4313      	orreq	r3, r2
   b9a34:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b9a38:	6863      	ldr	r3, [r4, #4]
   b9a3a:	f8d8 0000 	ldr.w	r0, [r8]
   b9a3e:	1c5a      	adds	r2, r3, #1
   b9a40:	3302      	adds	r3, #2
   b9a42:	6062      	str	r2, [r4, #4]
   b9a44:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b9a48:	f000 f80e 	bl	b9a68 <__retarget_lock_release_recursive>
   b9a4c:	2000      	movs	r0, #0
   b9a4e:	e7c6      	b.n	b99de <__register_exitproc+0x3e>
   b9a50:	2003e7e8 	.word	0x2003e7e8
   b9a54:	2003e75c 	.word	0x2003e75c
   b9a58:	00000000 	.word	0x00000000
   b9a5c:	000b7a9d 	.word	0x000b7a9d
   b9a60:	2003e03c 	.word	0x2003e03c

000b9a64 <__retarget_lock_acquire_recursive>:
   b9a64:	4770      	bx	lr

000b9a66 <__retarget_lock_release>:
   b9a66:	4770      	bx	lr

000b9a68 <__retarget_lock_release_recursive>:
   b9a68:	4770      	bx	lr

000b9a6a <link_code_end>:
	...

000b9a6c <dynalib_user>:
   b9a6c:	4021 000b 405d 000b 4085 000b 4089 000b     !@..]@...@...@..
   b9a7c:	0000 0000 6564 6166 6c75 2074 4d00 4253     ....default .MSB
   b9a8c:	4c00 4253 3c00 5053 5349 7465 6974 676e     .LSB.<SPISetting
   b9a9c:	2073 6564 6166 6c75 3e74 3c00 5053 5349     s default>.<SPIS
   b9aac:	7465 6974 676e 2073 7325 7525 2520 2073     ettings %s%u %s 
   b9abc:	4f4d 4544 7525 003e 6f43 6c75 2064 6f6e     MODE%u>.Could no
   b9acc:	2074 6966 646e 4120 3753 3433 0031 6f43     t find AS7341.Co
   b9adc:	6c75 6e64 7427 6620 6e69 2064 5452 0043     uldn't find RTC.
   b9aec:	5452 2043 7369 4e20 544f 7220 6e75 696e     RTC is NOT runni
   b9afc:	676e 0021 5741 3539 3332 6e20 746f 6620     ng!.AW9523 not f
   b9b0c:	756f 646e 203f 6843 6365 206b 6977 6972     ound? Check wiri
   b9b1c:	676e 0021 5741 3539 3332 6620 756f 646e     ng!.AW9523 found
   b9b2c:	0021 2820 2900 0020 7245 6f72 2072 6572     !. (.) .Error re
   b9b3c:	6461 6e69 2067 6c61 206c 6863 6e61 656e     ading all channe
   b9b4c:	736c 0021 454c 2044 4e4f 4600 2031 3134     ls!.LED ON.F1 41
   b9b5c:	6e35 206d 203a 4600 2032 3434 6e35 206d     5nm : .F2 445nm 
   b9b6c:	203a 4600 2033 3834 6e30 206d 203a 4600     : .F3 480nm : .F
   b9b7c:	2034 3135 6e35 206d 203a 4600 2035 3535     4 515nm : .F5 55
   b9b8c:	6e35 206d 203a 4600 2036 3935 6e30 206d     5nm : .F6 590nm 
   b9b9c:	203a 4600 2037 3336 6e30 206d 203a 4600     : .F7 630nm : .F
   b9bac:	2038 3836 6e30 206d 203a 4300 656c 7261     8 680nm : .Clear
   b9bbc:	2020 2020 203a 4e00 5249 2020 2020 2020         : .NIR      
   b9bcc:	203a 4c00 4445 4f20 4646 0000               : .LED OFF..

000b9bd8 <_ZTVN8particle11SPISettingsE>:
	...
   b9be0:	4155 000b 40b3 000b 411b 000b               UA...@...A..

000b9bec <_ZTV4File>:
	...
   b9bf4:	40cf 000b 4129 000b 40d7 000b 40d1 000b     .@..)A...@...@..
   b9c04:	40b5 000b 40fb 000b 40f5 000b 40ef 000b     .@...@...@...@..
   b9c14:	6f6c 7367 2500 3630 2e75 7874 0074 6572     logs.%06u.txt.re
   b9c24:	6f6d 6976 676e 6f20 646c 6c20 676f 6620     moving old log f
   b9c34:	6c69 2065 7325 6300 6572 7461 6e69 2067     ile %s.creating 
   b9c44:	6f6c 7367 6420 7269 2520 0073 6b6d 6964     logs dir %s.mkdi
   b9c54:	2072 6166 6c69 6465 6600 6961 656c 2064     r failed.failed 
   b9c64:	6f74 6f20 6570 206e 6f6c 7367 6420 7269     to open logs dir
   b9c74:	6300 6572 7461 6e69 2067 656e 2077 6f6c     .creating new lo
   b9c84:	2067 6966 656c 2520 3430 0064 7277 7469     g file %04d.writ
   b9c94:	2065 6f74 7320 2064 6163 6472 6620 6961     e to sd card fai
   b9ca4:	656c 0064                                   led.

000b9ca8 <_ZTV18SdCardPrintHandler>:
	...
   b9cb0:	482d 000b 4845 000b 4cb9 000b 7d59 000b     -H..EH...L..Y}..

000b9cc0 <CSWTCH.61>:
   b9cc0:	0000 3f00 0000 3f80 0000 4000 0000 4080     ...?...?...@...@
   b9cd0:	0000 4100 0000 4180 0000 4200 0000 4280     ...A...A...B...B
   b9ce0:	0000 4300 0000 4380 0000 4400               ...C...C...D

000b9cec <_ZTV15Adafruit_AS7341>:
	...
   b9cf4:	6d69 000b                                   im..

000b9cf8 <_ZL11daysInMonth>:
   b9cf8:	1c1f 1e1f 1e1f 1f1f 1f1e 1f1e               ............

000b9d04 <_ZTVN5spark13EthernetClassE>:
	...
   b9d0c:	7b7b 000b 7b71 000b 7b67 000b 7b5d 000b     {{..q{..g{..]{..
   b9d1c:	7b51 000b 7b45 000b 878d 000b 8795 000b     Q{..E{..........
   b9d2c:	7b39 000b 7b31 000b 7b27 000b 7b1d 000b     9{..1{..'{...{..
   b9d3c:	87c5 000b                                   ....

000b9d40 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   b9d40:	0800 1810 2820 3830 616e 006e 6e69 0066     .... (08nan.inf.
   b9d50:	766f 0066 002e 7061 0070 5925 252d 2d6d     ovf...app.%Y-%m-
   b9d60:	6425 2554 3a48 4d25 253a 2553 007a 7361     %dT%H:%M:%S%z.as
   b9d70:	7463 6d69 0065 0000                         ctime...

000b9d78 <_ZTV9IPAddress>:
	...
   b9d80:	8325 000b 8315 000b 8317 000b               %...........

000b9d8c <_ZTV9USBSerial>:
	...
   b9d94:	840b 000b 8473 000b 8449 000b 7d59 000b     ....s...I...Y}..
   b9da4:	843b 000b 840d 000b 841d 000b 846d 000b     ;...........m...
   b9db4:	842d 000b 8405 000b                         -.......

000b9dbc <_ZTV11USARTSerial>:
	...
   b9dc4:	8519 000b 8585 000b 855d 000b 7d59 000b     ........]...Y}..
   b9dd4:	852d 000b 8549 000b 853b 000b 8557 000b     -...I...;...W...
   b9de4:	851b 000b 851f 000b                         ........

000b9dec <_ZTV7TwoWire>:
	...
   b9df4:	85bd 000b 8607 000b 85df 000b 85bf 000b     ................
   b9e04:	85e7 000b 85ef 000b 85f7 000b 85ff 000b     ................

000b9e14 <_ZTVN5spark9WiFiClassE>:
	...
   b9e1c:	872f 000b 8725 000b 871b 000b 86d1 000b     /...%...........
   b9e2c:	870f 000b 8703 000b 878d 000b 8795 000b     ................
   b9e3c:	86f7 000b 86ef 000b 86e5 000b 86db 000b     ................
   b9e4c:	87c5 000b                                   ....

000b9e50 <_ZTVN5spark12NetworkClassE>:
	...
   b9e58:	874d 000b 8757 000b 8761 000b 876b 000b     M...W...a...k...
   b9e68:	8775 000b 8781 000b 878d 000b 8795 000b     u...............
   b9e78:	879d 000b 87a9 000b 87b1 000b 87bb 000b     ................
   b9e88:	87c5 000b                                   ....

000b9e8c <_ZSt7nothrow>:
   b9e8c:	5200 4545 544e 6d20 6c61 6f6c 2063 7573     .REENT malloc su
   b9e9c:	6363 6565 6564 0064 6d2f 746e 772f 726f     cceeded./mnt/wor
   b9eac:	736b 6170 6563 772f 726f 736b 6170 6563     kspace/workspace
   b9ebc:	472f 4343 312d 2d30 6970 6570 696c 656e     /GCC-10-pipeline
   b9ecc:	6a2f 6e65 696b 736e 472d 4343 312d 2d30     /jenkins-GCC-10-
   b9edc:	6970 6570 696c 656e 342d 5f38 3032 3032     pipeline-48_2020
   b9eec:	3131 3432 315f 3036 3136 3038 3436 2f31     1124_1606180641/
   b9efc:	7273 2f63 656e 6c77 6269 6e2f 7765 696c     src/newlib/newli
   b9f0c:	2f62 696c 6362 732f 6474 696c 2f62 6172     b/libc/stdlib/ra
   b9f1c:	646e 632e                                    nd.c.

000b9f21 <_ctype_>:
   b9f21:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   b9f31:	2020 2020 2020 2020 2020 2020 2020 2020                     
   b9f41:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   b9f51:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   b9f61:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   b9f71:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   b9f81:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   b9f91:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   b9fa1:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000ba022 <link_const_variable_data_end>:
	...

000ba024 <link_constructors_location>:
   ba024:	000b46dd 	.word	0x000b46dd
   ba028:	000b7b85 	.word	0x000b7b85
   ba02c:	000b7d25 	.word	0x000b7d25
   ba030:	000b7d49 	.word	0x000b7d49
   ba034:	000b8025 	.word	0x000b8025
   ba038:	000b81b5 	.word	0x000b81b5
   ba03c:	000b81d1 	.word	0x000b81d1
   ba040:	000b8739 	.word	0x000b8739
   ba044:	000b889d 	.word	0x000b889d

000ba048 <link_constructors_end>:
	...
